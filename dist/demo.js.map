{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/animated_sprite_demo/AnimatedSpriteDemo.ts","src/wolfie2d/Game.ts","src/wolfie2d/files/ResourceManager.ts","src/wolfie2d/loop/GameLoopTemplate.ts","src/wolfie2d/math/MathUtilities.ts","src/wolfie2d/math/Matrix.ts","src/wolfie2d/math/Vector3.ts","src/wolfie2d/rendering/CircleRenderer.ts","src/wolfie2d/rendering/TextRenderer.ts","src/wolfie2d/rendering/WebGLGameRenderingSystem.ts","src/wolfie2d/rendering/WebGLGameShader.ts","src/wolfie2d/rendering/WebGLGameSpriteRenderer.ts","src/wolfie2d/rendering/WebGLGameTexture.ts","src/wolfie2d/scene/SceneGraph.ts","src/wolfie2d/scene/SceneObject.ts","src/wolfie2d/scene/sprite/AnimatedSprite.ts","src/wolfie2d/scene/sprite/AnimatedSpriteType.ts","src/wolfie2d/scene/sprite/CircleSprite.ts","src/wolfie2d/ui/UIController.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * AnimatedSpriteDemo.ts - demonstrates some simple sprite rendering and \n * animation as well as some basic mouse interactions. Note that the\n * AnimationSpriteDemo class loads and creates custom content for the\n * purpose of demonstrating basic functionality.\n */\nimport {Game} from '../wolfie2d/Game'\nimport {ResourceManager} from '../wolfie2d/files/ResourceManager'\nimport {TextToRender} from '../wolfie2d/rendering/TextRenderer'\nimport {WebGLGameRenderingSystem} from '../wolfie2d/rendering/WebGLGameRenderingSystem'\nimport {SceneGraph} from '../wolfie2d/scene/SceneGraph'\nimport {AnimatedSprite} from '../wolfie2d/scene/sprite/AnimatedSprite'\nimport {AnimatedSpriteType} from '../wolfie2d/scene/sprite/AnimatedSpriteType'\nimport { CircleSprite } from '../wolfie2d/scene/sprite/CircleSprite'\nimport { SceneObject } from '../wolfie2d/scene/SceneObject'\n\n// IN THIS EXAMPLE WE'LL HAVE 2 SPRITE TYPES THAT EACH HAVE THE SAME 2 STATES\n// AND WHERE EACH SPRITE TYPE HAS ITS OWN SPRITE SHEET\nconst DEMO_SPRITE_TYPES : string[] = [\n    'resources/animated_sprites/RedCircleMan.json',\n    'resources/animated_sprites/MultiColorBlock.json'\n];\nconst DEMO_SPRITE_STATES = {\n    FORWARD_STATE: 'FORWARD',\n    REVERSE_STATE: 'REVERSE'\n};\nconst DEMO_TEXTURES : string[] = [\n    'resources/images/EightBlocks.png', \n    'resources/images/RedCircleMan.png'\n];\n\nclass AnimatedSpriteDemo {\n    constructor() {}\n\n    /**\n     * This method initializes the application, building all the needed\n     * game objects and setting them up for use.\n     */\n    public buildTestScene(game : Game, callback : Function) {\n        let renderingSystem : WebGLGameRenderingSystem = game.getRenderingSystem();\n        let sceneGraph : SceneGraph = game.getSceneGraph();\n        let resourceManager : ResourceManager = game.getResourceManager();\n        let builder = this;\n \n        // EMPLOY THE RESOURCE MANAGER TO BUILD ALL THE WORLD CONTENT\n        resourceManager.loadTextures(DEMO_TEXTURES, renderingSystem, function() {\n            // ONLY AFTER ALL THE TEXTURES HAVE LOADED LOAD THE SPRITE TYPES\n            resourceManager.loadSpriteTypes(DEMO_SPRITE_TYPES, function() {\n                // ONLY AFTER ALL THE SPRITE TYPES HAVE LOADED LOAD THE SPRITES\n                builder.buildAnimatedSprites(resourceManager, sceneGraph);\n\n                // AND BUILD ALL THE TEXT OUR APP WILL USE\n                builder.buildText(game);\n\n                // EVERYTHING HAS BEEN BUILT, CALL THE CALLBACK\n                callback();\n            });\n        });\n    }\n\n    /*\n     * Builds all the animated sprites to be used by the application and\n     * adds them to the scene.\n     */\n    private buildAnimatedSprites(resourceManager : ResourceManager, scene : SceneGraph) {\n        let canvasWidth : number = (<HTMLCanvasElement>document.getElementById(\"game_canvas\")).width;\n        let canvasHeight : number = (<HTMLCanvasElement>document.getElementById(\"game_canvas\")).height;\n\n        // BUILD A BUNCH OF CIRCLE SPRITES\n        for (let i = 0; i < DEMO_SPRITE_TYPES.length; i++) {\n            for (let j = 0; j < 5; j++) {\n                let spriteTypeToUse : string = DEMO_SPRITE_TYPES[i];\n                let animatedSpriteType : AnimatedSpriteType = resourceManager.getAnimatedSpriteTypeById(spriteTypeToUse);\n                let spriteToAdd : AnimatedSprite = new AnimatedSprite(animatedSpriteType, DEMO_SPRITE_STATES.FORWARD_STATE);\n                let randomX : number = Math.floor(Math.random() * canvasWidth) - (animatedSpriteType.getSpriteWidth()/2);\n                let randomY : number = Math.floor(Math.random() * canvasHeight) - (animatedSpriteType.getSpriteHeight()/2);\n                spriteToAdd.getPosition().set(randomX, randomY, 0.0, 1.0);\n                scene.addAnimatedSprite(spriteToAdd);\n            }\n        }\n        for (let z = 0; z < 5; z++){\n            let circle : CircleSprite = new CircleSprite();\n            let randomX : number = Math.floor(Math.random() * canvasWidth) - (circle.getWidth()/2);\n            let randomY : number = Math.floor(Math.random() * canvasHeight) - (circle.getHeight()/2);\n            circle.getPosition().set(randomX, randomY, 0.0, 1.0);\n            scene.addCircleSprite(circle);\n        }\n    }\n\n    /*\n     * Builds all the text to be displayed in the application.\n     */\n    private buildText(game : Game) {\n        let sceneGraph : SceneGraph = game.getSceneGraph();\n        let numSpritesText = new TextToRender(\"Num Sprites\", \"\", 20, 50, function() {\n            numSpritesText.text = \"Number of Sprites: \" + sceneGraph.getNumSprites();\n        });\n        let spriteInfo = new TextToRender(\"Sprite Info\", \"\", 20, 70, function(){\n            let sprite : SceneObject = game.getSceneGraph().getSpriteHover();\n            if (sprite === null){\n                spriteInfo.text = \"\";\n            }else if(sprite instanceof AnimatedSprite){\n                let info : string = \"position: (\" \n                +   sprite.getPosition().getX() + \", \" + sprite.getPosition().getY() + \")   \"\n                +   \"State: \" + sprite.getState() + \"   \"\n                +   \"Animation Frame Index: \" + sprite.getAnimationFrameIndex() + \"   \"\n                +   \"Frame Count: \" + sprite.getFrameCounter();\n                spriteInfo.text = info;\n            }else{\n                let circle : CircleSprite = <CircleSprite>sprite;\n                let info : string = \"position: (\"\n                                +   circle.getPosition().getX() + \", \" + circle.getPosition().getY() + \")   \"\n                                +   \"R: \" + circle.getR() + \"   G: \" + circle.getG() + \"   B:\" + circle.getB();\n                spriteInfo.text = info;\n            }\n        });\n        let textRenderer = game.getRenderingSystem().getTextRenderer();\n        textRenderer.addTextToRender(numSpritesText);\n        textRenderer.addTextToRender(spriteInfo);\n    }\n}\n\n// THIS IS THE ENTRY POINT INTO OUR APPLICATION, WE MAKE\n// THE Game OBJECT AND INITIALIZE IT WITH THE CANVASES\nlet game = new Game();\ngame.init(\"game_canvas\", \"text_canvas\");\n\n// BUILD THE GAME SCENE\nlet demo = new AnimatedSpriteDemo();\ndemo.buildTestScene(game, function() {\n    // AND START THE GAME LOOP\n    game.start();\n});","/*\n * Game is the focal point of the application, it has 4 subsystems,\n * the resource manager, the scene graph, the rendering system, and\n * the UI controller. In addition it serves as the game loop, providing\n * both an update and draw function that is called on a schedule.\n */\nimport {GameLoopTemplate} from './loop/GameLoopTemplate'\nimport {WebGLGameRenderingSystem} from './rendering/WebGLGameRenderingSystem'\nimport {SceneGraph} from './scene/SceneGraph'\nimport {AnimatedSprite} from './scene/sprite/AnimatedSprite'\nimport {ResourceManager} from './files/ResourceManager'\nimport {UIController} from './ui/UIController'\nimport { CircleSprite } from './scene/sprite/CircleSprite'\n\nexport class Game extends GameLoopTemplate {\n    private resourceManager : ResourceManager = new ResourceManager();\n    private sceneGraph : SceneGraph = new SceneGraph();\n    private renderingSystem : WebGLGameRenderingSystem = new WebGLGameRenderingSystem();\n    private uiController : UIController = new UIController();\n\n    public constructor() {\n        super();\n    }\n\n    public getRenderingSystem() : WebGLGameRenderingSystem {\n        return this.renderingSystem;\n    }\n\n    public getResourceManager() : ResourceManager {\n        return this.resourceManager;\n    }\n\n    public getSceneGraph() : SceneGraph {\n        return this.sceneGraph;\n    }\n\n    public init(gameCanvasId : string, textCanvasId : string) : void {\n        this.renderingSystem.init(gameCanvasId, textCanvasId);\n        this.uiController.init(gameCanvasId, this.sceneGraph, this.resourceManager);\n    }\n\n    public begin() : void {\n    }\n\n    /*\n     * This draws the game. Note that we are not currently using the \n     * interpolation value, but could once physics is involved.\n     */\n    public draw(interpolationPercentage : number) : void {\n        // GET THE VISIBLE SET FROM THE SCENE GRAPH\n        let visibleSprites : Array<AnimatedSprite>;\n        visibleSprites = <Array<AnimatedSprite>>this.sceneGraph.scope();\n        let visibleCircles : Array<CircleSprite>;\n        visibleCircles = <Array<CircleSprite>>this.sceneGraph.circleScope();\n\n        // RENDER THE VISIBLE SET, WHICH SHOULD ALL BE RENDERABLE\n        this.renderingSystem.render(visibleSprites, visibleCircles);\n    }\n\n    /**\n     * Updates the scene.\n     */\n    public update(delta : number) : void {\n        this.sceneGraph.update(delta);\n    }\n    \n    /**\n     * Updates the FPS counter.\n     */\n    public end(fps : number, panic : boolean) : void {\n        if (panic) {\n            var discardedTime = Math.round(this.resetFrameDelta());\n            console.warn('Main loop panicked, probably because the browser tab was put in the background. Discarding ' + discardedTime + 'ms');\n        }\n    }\n}","/*\n * ResourceManager.js\n *\n * This class is responsible for managing all shared resources. This means things\n * that may be needed by multiple game objects. In this application this means\n * textures for the purpose of GPU rendering and animated sprite types.\n */\nimport {SpriteTypeData, AnimationStateData, AnimationFrameData} from './SpriteTypeData'\nimport {HashTable} from '../data/HashTable'\nimport {WebGLGameRenderingSystem} from '../rendering/WebGLGameRenderingSystem'\nimport {WebGLGameTexture} from '../rendering/WebGLGameTexture'\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\n\nexport class ResourceManager {\n    // GAME TEXTURES \n    private gameTextures : Array<WebGLGameTexture> = new Array();\n    private gameTextureIds : HashTable<number> = {};\n    private numTexturesToLoad : number;\n    private numTexturesLoaded : number;\n\n    // ANIMATED SPRITE TYPES\n    private gameSpriteTypes : Array<AnimatedSpriteType> = new Array();\n    private gameSpriteTypeIds : HashTable<number> = {};\n    private numSpriteTypesToLoad : number;\n    private numSpriteTypesLoaded : number;\n\n    public constructor() {}\n\n    // ACCESSOR METHODS\n\n    public getAnimatedSpriteTypeByIndex(typeIndex : number) : AnimatedSpriteType {\n        return this.gameSpriteTypes[typeIndex];\n    }\n\n    public getAnimatedSpriteTypeById(typeId : string) : AnimatedSpriteType {\n        let typeIndex : number = this.gameSpriteTypeIds[typeId];\n        return this.getAnimatedSpriteTypeByIndex(typeIndex);\n    }\n    \n    // ADDS A NEW SPRITE TYPE \n    public addAnimatedSpriteType(typeId : number, spriteType : AnimatedSpriteType) : void {\n        this.gameSpriteTypes[typeId] = spriteType;\n    }\n\n    /*\n     * Loads all the textures listed in the texturePaths argument and once\n     * that is done it calls the callback function.\n     */\n    public loadTextures(    texturePaths : Array<string>, \n                            renderingSystem : WebGLGameRenderingSystem, \n                            callback : Function) : void {\n        // THEN LOAD THE TEXTURES WE'LL BE USING\n        this.numTexturesToLoad = texturePaths.length;\n        this.numTexturesLoaded = 0;\n        let thisResourceManager = this;\n        let startNumTextures = this.gameTextures.length;\n        for (let i : number = 0; i < this.numTexturesToLoad; i++) {\n            let textureToLoad : WebGLGameTexture = new WebGLGameTexture();\n            let textureId = startNumTextures + i;\n            thisResourceManager.gameTextures[textureId] = textureToLoad;\n            thisResourceManager.gameTextureIds[texturePaths[i]] = textureId;\n            thisResourceManager.loadImage(texturePaths[i], textureId, function(id : number, image : HTMLImageElement) {\n                renderingSystem.initWebGLTexture(textureToLoad, id, image, function() {\n                    thisResourceManager.completeLoadingTexture(callback);\n                });\n            });\n        }\n    }\n\n    /*\n     * Loads all the sprite types listed in the spriteTypePaths argument and once\n     * that is done it calls the callback function.\n     */\n    public loadSpriteTypes(spriteTypePaths : Array<string>, \n                    callback : Function) : void {\n        // THEN LOAD THE TEXTURES WE'LL BE USING\n        this.numSpriteTypesToLoad = spriteTypePaths.length;\n        this.numSpriteTypesLoaded = 0;\n        let thisResourceManager = this;\n        let startNumSpriteTypes = this.gameSpriteTypes.length;\n        for (let i : number = 0; i < this.numSpriteTypesToLoad; i++) {\n            let spriteTypeId = startNumSpriteTypes + i;\n            this.loadSpriteType(spriteTypePaths[i], spriteTypeId, function() {\n                thisResourceManager.completeLoadingSpriteType(callback);\n            });\n        }\n    }\n\n    // PRIVATE HELPER METHODS\n\n    // LOADS A NEW JSON FILE AND UPON COMPLETION CALLS THE callback FUNCTION\n    private loadJsonFile(testFilePath : string, callback : Function) : void {\n        let xobj : XMLHttpRequest = new XMLHttpRequest();\n        xobj.overrideMimeType(\"application/json\");\n        xobj.open('GET', testFilePath, true);\n        xobj.onreadystatechange = function () {\n            if ((xobj.readyState == 4) && (xobj.status == 200)) {\n                callback(xobj.responseText);\n            }\n        };\n        xobj.send(null);\n    }\n\n    // CHECKS TO SEE IF ALL TEXTURE LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingTexture(callback : Function) : void {\n        this.numTexturesLoaded++;\n        if (this.numTexturesLoaded === this.numTexturesToLoad) {\n            callback();\n        }\n    }\n\n    /**\n     * Loads an Image into RAM and once that process is complete it\n     * calls the callback method argument, presumably to then load\n     * it into GPU memory.\n     */\n    private loadImage(path : string, id : number, callback : Function) : void {\n        // MAKE THE IMAGE\n        var image = new Image();\n\n        // ONCE THE IMAGE LOADING IS COMPLETED, THE CALLBACK WILL GET CALLED\n        image.onload = function () { \n            callback(id, image); \n        }\n\n        // START IMAGE LOADING\n        image.src = path;\n    }\n\n    /*\n     * This function loads a single sprite type resource from a JSON file and upon\n     * completion calls the callback function.\n     */\n    private loadSpriteType(jsonFilePath : string, spriteTypeId : number, callback : Function) : void {\n        let thisResourceManager : ResourceManager = this;\n        this.loadJsonFile(jsonFilePath, function(jsonText : string) {\n            let spriteType : AnimatedSpriteType = thisResourceManager.loadSpriteTypeData(jsonText);\n            thisResourceManager.gameSpriteTypes[spriteTypeId] = spriteType;\n            thisResourceManager.gameSpriteTypeIds[jsonFilePath] = spriteTypeId;\n            callback();\n        });\n    }\n\n    /*\n     * This helper function loads all the json text into an AnimatedSpriteType\n     * object and returns it.\n     */\n    private loadSpriteTypeData = (jsonText : string) : AnimatedSpriteType => {\n        let jsonData : SpriteTypeData = <SpriteTypeData>JSON.parse(jsonText);\n        let texturePath = jsonData.spriteSheetImage;\n        let textureId = this.gameTextureIds[texturePath];\n        let texture : WebGLGameTexture = this.gameTextures[textureId];\n        let spriteWidth : number = jsonData.spriteWidth;\n        let spriteHeight : number = jsonData.spriteHeight;\n        let animatedSpriteType = new AnimatedSpriteType(texture, spriteWidth, spriteHeight);\n        for (let i = 0; i < jsonData.animations.length; i++) {\n            let animation = <AnimationStateData>jsonData.animations[i];\n            animatedSpriteType.addAnimation(animation.name);\n            for (var j = 0; j < animation.frames.length; j++) {\n                var frame = animation.frames[j];\n                animatedSpriteType.addAnimationFrame(animation.name, frame.index, frame.duration);\n            }\n        }\n        return animatedSpriteType;\n    }\n\n    // CHECKS TO SEE IF ALL SPRITE TYPE LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingSpriteType(callback : Function) : void {\n        this.numSpriteTypesLoaded++;\n        if (this.numSpriteTypesLoaded === this.numSpriteTypesToLoad) {\n            callback();\n        }\n    }    \n}","export abstract class GameLoopTemplate {\n    // ALL INSTANCE VARIABLES WILL BE INITIALIZED VIA THE CONSTRUCTOR\n    private fps: number;\n    private simulationTimestep: number;\n    private frameDelta: number;\n    private lastFrameTimeMs: number;\n    private fpsAlpha: number;\n    private fpsUpdateInterval: number;\n    private lastFpsUpdate: number;\n    private framesSinceLastFpsUpdate: number;\n    private numUpdateSteps: number;\n    private minFrameDelay: number;\n    private running: boolean;\n    private started: boolean;\n    private panic: boolean;\n    private raf: number;\n\n    constructor() {\n        // An exponential moving average of the frames per second.\n        this.fps = 60;\n\n        // The amount of time (in milliseconds) to simulate each time update() runs.\n        // See `MainLoop.setSimulationTimestep()` for details.\n        this.simulationTimestep = 1000 / this.fps;\n\n        // The cumulative amount of in-app time that hasn't been simulated yet.\n        // See the comments inside animate() for details.\n        this.frameDelta = 0;\n\n        // The timestamp in milliseconds of the last time the main loop was run.\n        // Used to compute the time elapsed between frames.\n        this.lastFrameTimeMs = 0;\n\n        // A factor that affects how heavily to weight more recent seconds'\n        // performance when calculating the average frames per second. Valid values\n        // range from zero to one inclusive. Higher values result in weighting more\n        // recent seconds more heavily.\n        this.fpsAlpha = 0.9;\n\n        // The minimum duration between updates to the frames-per-second estimate.\n        // Higher values increase accuracy, but result in slower updates.\n        this.fpsUpdateInterval = 1000;\n\n        // The timestamp (in milliseconds) of the last time the `fps` moving\n        // average was updated.\n        this.lastFpsUpdate = 0;\n\n        // The number of frames delivered since the last time the `fps` moving\n        // average was updated (i.e. since `lastFpsUpdate`).\n        this.framesSinceLastFpsUpdate = 0;\n\n        // The number of times update() is called in a given frame. This is only\n        // relevant inside of animate(), but a reference is held externally so that\n        // this variable is not marked for garbage collection every time the main\n        // loop runs.\n        this.numUpdateSteps = 0;\n\n        // The minimum amount of time in milliseconds that must pass since the last\n        // frame was executed before another frame can be executed. The\n        // multiplicative inverse caps the FPS (the default of zero means there is\n        // no cap).\n        this.minFrameDelay = 0;\n\n        // Whether the main loop is running.\n        this.running = false;\n\n        // `true` if `MainLoop.start()` has been called and the most recent time it\n        // was called has not been followed by a call to `MainLoop.stop()`. This is\n        // different than `running` because there is a delay of a few milliseconds\n        // after `MainLoop.start()` is called before the application is considered\n        // \"running.\" This delay is due to waiting for the next frame.\n        this.started = false;\n\n        // Whether the simulation has fallen too far behind real time.\n        // Specifically, `panic` will be set to `true` if too many updates occur in\n        // one frame. This is only relevant inside of animate(), but a reference is\n        // held externally so that this variable is not marked for garbage\n        // collection every time the main loop runs.\n        this.panic = false;\n    }\n\n    /**\n     * Gets how many milliseconds should be simulated by every run of update().\n     *\n     * See `MainLoop.setSimulationTimestep()` for details on this value.\n     *\n     * @return {Number}\n     *   The number of milliseconds that should be simulated by every run of\n     *   {@link #setUpdate update}().\n     */\n    getSimulationTimestep(): number {\n        return this.simulationTimestep;\n    }\n\n    /**\n     * Sets how many milliseconds should be simulated by every run of update().\n     *\n     * The perceived frames per second (FPS) is effectively capped at the\n     * multiplicative inverse of the simulation timestep. That is, if the\n     * timestep is 1000 / 60 (which is the default), then the maximum perceived\n     * FPS is effectively 60. Decreasing the timestep increases the maximum\n     * perceived FPS at the cost of running {@link #setUpdate update}() more\n     * times per frame at lower frame rates. Since running update() more times\n     * takes more time to process, this can actually slow down the frame rate.\n     * Additionally, if the amount of time it takes to run update() exceeds or\n     * very nearly exceeds the timestep, the application will freeze and crash\n     * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\n     * an explanation of what can be done if a spiral of death is occurring).\n     *\n     * The exception to this is that interpolating between updates for each\n     * render can increase the perceived frame rate and reduce visual\n     * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\n     * this.\n     *\n     * If you are considering decreasing the simulation timestep in order to\n     * raise the maximum perceived FPS, keep in mind that most monitors can't\n     * display more than 60 FPS. Whether humans can tell the difference among\n     * high frame rates depends on the application, but for reference, film is\n     * usually displayed at 24 FPS, other videos at 30 FPS, most games are\n     * acceptable above 30 FPS, and virtual reality might require 75 FPS to\n     * feel natural. Some gaming monitors go up to 144 FPS. Setting the\n     * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\n     * strongly discouraged. The default of 1000 / 60 is good in most cases.\n     *\n     * The simulation timestep should typically only be changed at\n     * deterministic times (e.g. before the main loop starts for the first\n     * time, and not in response to user input or slow frame rates) to avoid\n     * introducing non-deterministic behavior. The update timestep should be\n     * the same for all players/users in multiplayer/multi-user applications.\n     *\n     * See also `MainLoop.getSimulationTimestep()`.\n     *\n     * @param {Number} timestep\n     *   The number of milliseconds that should be simulated by every run of\n     *   {@link #setUpdate update}().\n     */\n    setSimulationTimestep(timestep: number): void {\n        this.simulationTimestep = timestep;\n    }\n\n    /**\n     * Returns the exponential moving average of the frames per second.\n     *\n     * @return {Number}\n     *   The exponential moving average of the frames per second.\n     */\n    getFPS(): number {\n        return this.fps;\n    }\n\n    /**\n     * Gets the maximum frame rate.\n     *\n     * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\n     * for details.\n     *\n     * See also `MainLoop.setMaxAllowedFPS()`.\n     *\n     * @return {Number}\n     *   The maximum number of frames per second allowed.\n     */\n    getMaxAllowedFPS(): number {\n        return 1000 / this.minFrameDelay;\n    }\n\n    /**\n     * Sets a maximum frame rate.\n     *\n     * See also `MainLoop.getMaxAllowedFPS()`.\n     *\n     * @param {Number} [fps=Infinity]\n     *   The maximum number of frames per second to execute. If Infinity or not\n     *   passed, there will be no FPS cap (although other factors do limit the\n     *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\n     *   will stop the loop, and when the loop is next started, it will return\n     *   to the previous maximum frame rate. Passing negative values will stall\n     *   the loop until this function is called again with a positive value.\n     *\n     * @chainable\n     */\n    setMaxAllowedFPS(fps: number): void {\n        if (typeof fps === 'undefined') {\n            fps = Infinity;\n        }\n        if (fps === 0) {\n            this.stop();\n        }\n        else {\n            // Dividing by Infinity returns zero.\n            this.minFrameDelay = 1000 / fps;\n        }\n    }\n\n    /**\n     * Reset the amount of time that has not yet been simulated to zero.\n     *\n     * This introduces non-deterministic behavior if called after the\n     * application has started running (unless it is being reset, in which case\n     * it doesn't matter). However, this can be useful in cases where the\n     * amount of time that has not yet been simulated has grown very large\n     * (for example, when the application's tab gets put in the background and\n     * the browser throttles the timers as a result). In applications with\n     * lockstep the player would get dropped, but in other networked\n     * applications it may be necessary to snap or ease the player/user to the\n     * authoritative state and discard pending updates in the process. In\n     * non-networked applications it may also be acceptable to simply resume\n     * the application where it last left off and ignore the accumulated\n     * unsimulated time.\n     *\n     * @return {Number}\n     *   The cumulative amount of elapsed time in milliseconds that has not yet\n     *   been simulated, but is being discarded as a result of calling this\n     *   function.\n     */\n    resetFrameDelta() : number {\n        var oldFrameDelta = this.frameDelta;\n        this.frameDelta = 0;\n        return oldFrameDelta;\n    }\n\n    /**\n     * Starts the main loop.\n     *\n     * Note that the application is not considered \"running\" immediately after\n     * this function returns; rather, it is considered \"running\" after the\n     * application draws its first frame. The distinction is that event\n     * handlers should remain paused until the application is running, even\n     * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\n     * current status. To act after the application starts, register a callback\n     * with requestAnimationFrame() after calling this function and execute the\n     * action in that callback. It is safe to call `MainLoop.start()` multiple\n     * times even before the application starts running and without calling\n     * `MainLoop.stop()` in between, although there is no reason to do this;\n     * the main loop will only start if it is not already started.\n     *\n     * See also `MainLoop.stop()`.\n     */\n    start(): void {\n        if (!this.started) {\n            // Since the application doesn't start running immediately, track\n            // whether this function was called and use that to keep it from\n            // starting the main loop multiple times.\n            this.started = true;\n\n            // In the main loop, draw() is called after update(), so if we\n            // entered the main loop immediately, we would never render the\n            // initial state before any updates occur. Instead, we run one\n            // frame where all we do is draw, and then start the main loop with\n            // the next frame.\n            this.raf = requestAnimationFrame(this.startLoop.bind(this));\n        }\n    }\n\n    startLoop(timestamp : number): void {\n        // Render the initial state before any updates occur.\n        this.draw(1);\n\n        // The application isn't considered \"running\" until the\n        // application starts drawing.\n        this.running = true;\n\n        // Reset variables that are used for tracking time so that we\n        // don't simulate time passed while the application was paused.\n        this.lastFrameTimeMs = timestamp;\n        this.lastFpsUpdate = timestamp;\n        this.framesSinceLastFpsUpdate = 0;\n\n        // Start the main loop.\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\n    }\n\n    /**\n     * Returns whether the main loop is currently running.\n     *\n     * See also `MainLoop.start()` and `MainLoop.stop()`.\n     *\n     * @return {Boolean}\n     *   Whether the main loop is currently running.\n     */\n    isRunning(): boolean {\n        return this.running;\n    }\n\n    /**\n     * Stops the main loop.\n     *\n     * Event handling and other background tasks should also be paused when the\n     * main loop is paused.\n     *\n     * Note that pausing in multiplayer/multi-user applications will cause the\n     * player's/user's client to become out of sync. In this case the\n     * simulation should exit, or the player/user needs to be snapped to their\n     * updated position when the main loop is started again.\n     *\n     * See also `MainLoop.start()` and `MainLoop.isRunning()`.\n     */\n    stop(): void {\n        this.running = false;\n        this.started = false;\n        window.cancelAnimationFrame(this.raf);\n    }\n\n    /**\n     * The main loop that runs updates and rendering.\n     * \n     * @param {DOMHighResTimeStamp} timestamp\n     * The current timestamp. In practice this is supplied by\n     * requestAnimationFrame at the time that it starts to fire callbacks. This\n     * should only be used for comparison to other timestamps because the epoch\n     * (i.e. the \"zero\" time) depends on the engine running this code. In engines\n     * that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\n     * 8) the epoch is the time the page started loading, specifically\n     * `performance.timing.navigationStart`. Everywhere else, including node.js,\n     * the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n     * \n     * @ignore\n     */\n    animate(timestamp : number): void {\n        // Run the loop again the next time the browser is ready to render.\n        // We set rafHandle immediately so that the next frame can be canceled\n        // during the current frame.\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\n\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\n        // `MainLoop.setMaxAllowedFPS()`).\n        if (timestamp < this.lastFrameTimeMs + this.minFrameDelay) {\n            return;\n        }\n\n        // frameDelta is the cumulative amount of in-app time that hasn't been\n        // simulated yet. Add the time since the last frame. We need to track total\n        // not-yet-simulated time (as opposed to just the time elapsed since the\n        // last frame) because not all actually elapsed time is guaranteed to be\n        // simulated each frame. See the comments below for details.\n        this.frameDelta += timestamp - this.lastFrameTimeMs;\n        this.lastFrameTimeMs = timestamp;\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setBegin()` for additional details on how to use this.\n        this.begin(timestamp, this.frameDelta);\n\n        // Update the estimate of the frame rate, `fps`. Approximately every\n        // second, the number of frames that occurred in that second are included\n        // in an exponential moving average of all frames per second. This means\n        // that more recent seconds affect the estimated frame rate more than older\n        // seconds.\n        if (timestamp > this.lastFpsUpdate + this.fpsUpdateInterval) {\n            // Compute the new exponential moving average.\n            this.fps =\n                // Divide the number of frames since the last FPS update by the\n                // amount of time that has passed to get the mean frames per second\n                // over that period. This is necessary because slightly more than a\n                // second has likely passed since the last update.\n                this.fpsAlpha * this.framesSinceLastFpsUpdate * 1000 / (timestamp - this.lastFpsUpdate) +\n                (1 - this.fpsAlpha) * this.fps;\n\n            // Reset the frame counter and last-updated timestamp since their\n            // latest values have now been incorporated into the FPS estimate.\n            this.lastFpsUpdate = timestamp;\n            this.framesSinceLastFpsUpdate = 0;\n        }\n        // Count the current frame in the next frames-per-second update. This\n        // happens after the previous section because the previous section\n        // calculates the frames that occur up until `timestamp`, and `timestamp`\n        // refers to a time just before the current frame was delivered.\n        this.framesSinceLastFpsUpdate++;\n\n        /*\n         * A naive way to move an object along its X-axis might be to write a main\n         * loop containing the statement `obj.x += 10;` which would move the object\n         * 10 units per frame. This approach suffers from the issue that it is\n         * dependent on the frame rate. In other words, if your application is\n         * running slowly (that is, fewer frames per second), your object will also\n         * appear to move slowly, whereas if your application is running quickly\n         * (that is, more frames per second), your object will appear to move\n         * quickly. This is undesirable, especially in multiplayer/multi-user\n         * applications.\n         *\n         * One solution is to multiply the speed by the amount of time that has\n         * passed between rendering frames. For example, if you want your object to\n         * move 600 units per second, you might write `obj.x += 600 * delta`, where\n         * `delta` is the time passed since the last frame. (For convenience, let's\n         * move this statement to an update() function that takes `delta` as a\n         * parameter.) This way, your object will move a constant distance over\n         * time. However, at low frame rates and high speeds, your object will move\n         * large distances every frame, which can cause it to do strange things\n         * such as move through walls. Additionally, we would like our program to\n         * be deterministic. That is, every time we run the application with the\n         * same input, we would like exactly the same output. If the time between\n         * frames (the `delta`) varies, our output will diverge the longer the\n         * program runs due to accumulated rounding errors, even at normal frame\n         * rates.\n         *\n         * A better solution is to separate the amount of time simulated in each\n         * update() from the amount of time between frames. Our update() function\n         * doesn't need to change; we just need to change the delta we pass to it\n         * so that each update() simulates a fixed amount of time (that is, `delta`\n         * should have the same value each time update() is called). The update()\n         * function can be run multiple times per frame if needed to simulate the\n         * total amount of time passed since the last frame. (If the time that has\n         * passed since the last frame is less than the fixed simulation time, we\n         * just won't run an update() until the the next frame. If there is\n         * unsimulated time left over that is less than our timestep, we'll just\n         * leave it to be simulated during the next frame.) This approach avoids\n         * inconsistent rounding errors and ensures that there are no giant leaps\n         * through walls between frames.\n         *\n         * That is what is done below. It introduces a new problem, but it is a\n         * manageable one: if the amount of time spent simulating is consistently\n         * longer than the amount of time between frames, the application could\n         * freeze and crash in a spiral of death. This won't happen as long as the\n         * fixed simulation time is set to a value that is high enough that\n         * update() calls usually take less time than the amount of time they're\n         * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\n         * for a discussion of ways to stop it.\n         *\n         * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\n         * considerations.\n         *\n         * Further reading for those interested:\n         *\n         * - http://gameprogrammingpatterns.com/game-loop.html\n         * - http://gafferongames.com/game-physics/fix-your-timestep/\n         * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\n         * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\n         */\n        this.numUpdateSteps = 0;\n        while (this.frameDelta >= this.simulationTimestep) {\n            this.update(this.simulationTimestep);\n            this.frameDelta -= this.simulationTimestep;\n\n            /*\n             * Sanity check: bail if we run the loop too many times.\n             *\n             * One way this could happen is if update() takes longer to run than\n             * the time it simulates, thereby causing a spiral of death. For ways\n             * to avoid this, see `MainLoop.setEnd()`. Another way this could\n             * happen is if the browser throttles serving frames, which typically\n             * occurs when the tab is in the background or the device battery is\n             * low. An event outside of the main loop such as audio processing or\n             * synchronous resource reads could also cause the application to hang\n             * temporarily and accumulate not-yet-simulated time as a result.\n             *\n             * 240 is chosen because, for any sane value of simulationTimestep, 240\n             * updates will simulate at least one second, and it will simulate four\n             * seconds with the default value of simulationTimestep. (Safari\n             * notifies users that the script is taking too long to run if it takes\n             * more than five seconds.)\n             *\n             * If there are more updates to run in a frame than this, the\n             * application will appear to slow down to the user until it catches\n             * back up. In networked applications this will usually cause the user\n             * to get out of sync with their peers, but if the updates are taking\n             * this long already, they're probably already out of sync.\n             */\n            if (++this.numUpdateSteps >= 240) {\n                this.panic = true;\n                break;\n            }\n        }\n\n        /*\n         * Render the screen. We do this regardless of whether update() has run\n         * during this frame because it is possible to interpolate between updates\n         * to make the frame rate appear faster than updates are actually\n         * happening. See `MainLoop.setDraw()` for an explanation of how to do\n         * that.\n         *\n         * We draw after updating because we want the screen to reflect a state of\n         * the application that is as up-to-date as possible. (`MainLoop.start()`\n         * draws the very first frame in the application's initial state, before\n         * any updates have occurred.) Some sources speculate that rendering\n         * earlier in the requestAnimationFrame callback can get the screen painted\n         * faster; this is mostly not true, and even when it is, it's usually just\n         * a trade-off between rendering the current frame sooner and rendering the\n         * next frame later.\n         *\n         * See `MainLoop.setDraw()` for details about draw() itself.\n         */\n        this.draw(this.frameDelta / this.simulationTimestep);\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setEnd()` for additional details on how to use this.\n        this.end(this.fps, this.panic);\n\n        this.panic = false;\n    }\n\n    // SUBCLASSES MUST OVERRIDE FOUR REQUIRED METHODS:\n        // begin\n        // update\n        // draw\n        // end\n\n    /**\n     * A function that runs at the beginning of the main loop.\n     *\n     * The begin() function is typically used to process input before the\n     * updates run. Processing input here (in chunks) can reduce the running\n     * time of event handlers, which is useful because long-running event\n     * handlers can sometimes delay frames.\n     *\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\n     * frame, begin() always runs exactly once per frame. This makes it useful\n     * for any updates that are not dependent on time in the simulation.\n     * Examples include adjusting HUD calculations or performing long-running\n     * updates incrementally. Compared to {@link #setEnd end}(), generally\n     * actions should occur in begin() if they affect anything that\n     * {@link #setUpdate update}() or {@link #setDraw draw}() use.\n     *\n     * @param {Function} begin\n     *   The begin() function.\n     * @param {Number} [begin.timestamp]\n     *   The current timestamp (when the frame started), in milliseconds. This\n     *   should only be used for comparison to other timestamps because the\n     *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\n     *   In engines that support `DOMHighResTimeStamp` (all modern browsers\n     *   except iOS Safari 8) the epoch is the time the page started loading,\n     *   specifically `performance.timing.navigationStart`. Everywhere else,\n     *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n     * @param {Number} [begin.delta]\n     *   The total elapsed time that has not yet been simulated, in\n     *   milliseconds.\n     */\n    abstract begin(timestamp : number, delta : number) : void;\n\n    /**\n     * A function that runs updates (i.e. AI and physics).\n     *\n     * The update() function should simulate anything that is affected by time.\n     * It can be called zero or more times per frame depending on the frame\n     * rate.\n     *\n     * As with everything in the main loop, the running time of update()\n     * directly affects the frame rate. If update() takes long enough that the\n     * frame rate drops below the target (\"budgeted\") frame rate, parts of the\n     * update() function that do not need to execute between every frame can be\n     * moved into Web Workers. (Various sources on the internet sometimes\n     * suggest other scheduling patterns using setTimeout() or setInterval().\n     * These approaches sometimes offer modest improvements with minimal\n     * changes to existing code, but because JavaScript is single-threaded, the\n     * updates will still block rendering and drag down the frame rate. Web\n     * Workers execute in separate threads, so they free up more time in the\n     * main loop.)\n     *\n     * This script can be imported into a Web Worker using importScripts() and\n     * used to run a second main loop in the worker. Some considerations:\n     *\n     * - Profile your code before doing the work to move it into Web Workers.\n     *   It could be the rendering that is the bottleneck, in which case the\n     *   solution is to decrease the visual complexity of the scene.\n     * - It doesn't make sense to move the *entire* contents of update() into\n     *   workers unless {@link #setDraw draw}() can interpolate between frames.\n     *   The lowest-hanging fruit is background updates (like calculating\n     *   citizens' happiness in a city-building game), physics that doesn't\n     *   affect the scene (like flags waving in the wind), and anything that is\n     *   occluded or happening far off screen.\n     * - If draw() needs to interpolate physics based on activity that occurs\n     *   in a worker, the worker needs to pass the interpolation value back to\n     *   the main thread so that is is available to draw().\n     * - Web Workers can't access the state of the main thread, so they can't\n     *   directly modify objects in your scene. Moving data to and from Web\n     *   Workers is a pain. The fastest way to do it is with Transferable\n     *   Objects: basically, you can pass an ArrayBuffer to a worker,\n     *   destroying the original reference in the process.\n     *\n     * You can read more about Web Workers and Transferable Objects at\n     * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\n     *\n     * @param {Function} update\n     *   The update() function.\n     * @param {Number} [update.delta]\n     *   The amount of time in milliseconds to simulate in the update. In most\n     *   cases this timestep never changes in order to ensure deterministic\n     *   updates. The timestep is the same as that returned by\n     *   `MainLoop.getSimulationTimestep()`.\n     */\n    abstract update(timeStep : number) : void;\n\n    /**\n     * A function that draws things on the screen.\n     *\n     * The draw() function gets passed the percent of time that the next run of\n     * {@link #setUpdate update}() will simulate that has actually elapsed, as\n     * a decimal. In other words, draw() gets passed how far between update()\n     * calls it is. This is useful because the time simulated by update() and\n     * the time between draw() calls is usually different, so the parameter to\n     * draw() can be used to interpolate motion between frames to make\n     * rendering appear smoother. To illustrate, if update() advances the\n     * simulation at each vertical bar in the first row below, and draw() calls\n     * happen at each vertical bar in the second row below, then some frames\n     * will have time left over that is not yet simulated by update() when\n     * rendering occurs in draw():\n     *\n     *     update() timesteps:  |  |  |  |  |  |  |  |  |\n     *     draw() calls:        |   |   |   |   |   |   |\n     *\n     * To interpolate motion for rendering purposes, objects' state after the\n     * last update() must be retained and used to calculate an intermediate\n     * state. Note that this means renders will be up to one update() behind.\n     * This is still better than extrapolating (projecting objects' state after\n     * a future update()) which can produce bizarre results. Storing multiple\n     * states can be difficult to set up, and keep in mind that running this\n     * process takes time that could push the frame rate down, so it's often\n     * not worthwhile unless stuttering is visible.\n     *\n     * @param {Function} draw\n     *   The draw() function.\n     * @param {Number} [draw.interpolationPercentage]\n     *   The cumulative amount of time that hasn't been simulated yet, divided\n     *   by the amount of time that will be simulated the next time update()\n     *   runs. Useful for interpolating frames.\n     */\n    public abstract draw(interpolationPercentage : number) : void;\n\n    /**\n     * A function that runs at the end of the main loop.\n     *\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\n     * frame, end() always runs exactly once per frame. This makes it useful\n     * for any updates that are not dependent on time in the simulation.\n     * Examples include cleaning up any temporary state set up by\n     * {@link #setBegin begin}(), lowering the visual quality if the frame rate\n     * is too low, or performing long-running updates incrementally. Compared\n     * to begin(), generally actions should occur in end() if they use anything\n     * that update() or {@link #setDraw draw}() affect.\n     *\n     * @param {Function} end\n     *   The end() function.\n     * @param {Number} [end.fps]\n     *   The exponential moving average of the frames per second. This is the\n     *   same value returned by `MainLoop.getFPS()`. It can be used to take\n     *   action when the FPS is too low (or to restore to normalcy if the FPS\n     *   moves back up). Examples of actions to take if the FPS is too low\n     *   include exiting the application, lowering the visual quality, stopping\n     *   or reducing activities outside of the main loop like event handlers or\n     *   audio playback, performing non-critical updates less frequently, or\n     *   increasing the simulation timestep (by calling\n     *   `MainLoop.setSimulationTimestep()`). Note that this last option\n     *   results in more time being simulated per update() call, which causes\n     *   the application to behave non-deterministically.\n     * @param {Boolean} [end.panic=false]\n     *   Indicates whether the simulation has fallen too far behind real time.\n     *   Specifically, `panic` will be `true` if too many updates occurred in\n     *   one frame. In networked lockstep applications, the application should\n     *   wait for some amount of time to see if the user can catch up before\n     *   dropping the user. In networked but non-lockstep applications, this\n     *   typically indicates that the user needs to be snapped or eased to the\n     *   current authoritative state. When this happens, it may be convenient\n     *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\n     *   updates. In non-networked applications, it may be acceptable to allow\n     *   the application to keep running for awhile to see if it will catch up.\n     *   However, this could also cause the application to look like it is\n     *   running very quickly for a few frames as it transitions through the\n     *   intermediate states. An alternative that may be acceptable is to\n     *   simply ignore the unsimulated elapsed time by calling\n     *   `MainLoop.resetFrameDelta()` even though this introduces\n     *   non-deterministic behavior. In all cases, if the application panics\n     *   frequently, this is an indication that the main loop is running too\n     *   slowly. However, most of the time the drop in frame rate will probably\n     *   be noticeable before a panic occurs. To help the application catch up\n     *   after a panic caused by a spiral of death, the same steps can be taken\n     *   that are suggested above if the FPS drops too low.\n     */\n    abstract end(fps : number, panic : boolean) : void;\n}","/*\n * MathUtilities provides a number of services for rendering using 4x4 matrices, like\n * transformting (i.e. translation, rotation, and scaling) 3d or 2d points from world\n * coordinate systems to screen coordinate systems.\n */\nimport {Matrix} from './Matrix'\nimport {Vector3} from './Vector3'\n\nexport namespace MathUtilities {\n    export function determinant4x4(result : Matrix) : number {\n        let det0 = result.get(0, 0) * (\n            (result.get(1, 1) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\n            - (result.get(1, 2) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\n            + (result.get(1, 3) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(3, 1) * result.get(2, 2)))));\n        let det1 = result.get(0, 1) * (\n            (result.get(1, 0) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\n            - (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(3, 0) * result.get(2, 3))))\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(3, 0) * result.get(2, 2)))));\n        let det2 = result.get(0, 2) * (\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 0))))\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\n        let det3 = result.get(0, 3) * (\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 1))))\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 0))))\n            + (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\n        let det = det0 - det1 + det2 - det3;\n        console.log(\"det = \" + det0 + \" + \" + det1 + \" + \" + det2 + \" + \" + det3);\n        return det;\n    }\n    export function identity(result : Matrix) : void {\n        if (result.getRows() === result.getColumns()) {\n            for (let i = 0; i < result.getRows(); i++) {\n                for (let j = 0; j < result.getColumns(); j++) {\n                    if (i === j)\n                        result.set(1.0, i, j);\n                    else\n                        result.set(0.0, i, j);\n                }\n            }\n        }\n    }\n    export function inverse(result : Matrix, mat : Matrix) : void {\n        let det = this.determinant(mat);\n        let m00 = mat.get(0, 0); let m01 = mat.get(0, 1); let m02 = mat.get(0, 2); let m03 = mat.get(0, 3);\n        let m10 = mat.get(1, 0); let m11 = mat.get(1, 1); let m12 = mat.get(1, 2); let m13 = mat.get(1, 3);\n        let m20 = mat.get(2, 0); let m21 = mat.get(2, 1); let m22 = mat.get(2, 2); let m23 = mat.get(2, 3);\n        let m30 = mat.get(3, 0); let m31 = mat.get(3, 1); let m32 = mat.get(3, 2); let m33 = mat.get(3, 3);\n        let temp = new Matrix(4, 4);\n        temp.set((m12 * m23 * m31) - (m13 * m22 * m31) + (m13 * m21 * m32) - (m11 * m23 * m32) - (m12 * m21 * m33) + (m11 * m22 * m33), 0, 0);\n        temp.set((m03 * m22 * m31) - (m02 * m23 * m31) - (m03 * m21 * m32) + (m01 * m23 * m32) + (m02 * m21 * m33) - (m01 * m22 * m33), 0, 1);\n        temp.set((m02 * m13 * m31) - (m03 * m12 * m31) + (m03 * m11 * m32) - (m01 * m13 * m32) - (m02 * m11 * m33) + (m01 * m12 * m33), 0, 2);\n        temp.set((m03 * m12 * m21) - (m02 * m13 * m21) - (m03 * m11 * m22) + (m01 * m13 * m22) + (m02 * m11 * m23) - (m01 * m12 * m23), 0, 3);\n        temp.set((m13 * m22 * m30) - (m12 * m23 * m30) - (m13 * m20 * m32) + (m10 * m23 * m32) + (m12 * m20 * m33) - (m10 * m22 * m33), 1, 0);\n        temp.set((m02 * m23 * m30) - (m03 * m22 * m30) + (m03 * m20 * m32) - (m00 * m23 * m32) - (m02 * m20 * m33) + (m00 * m22 * m33), 1, 1);\n        temp.set((m03 * m12 * m30) - (m02 * m13 * m30) - (m03 * m10 * m32) + (m00 * m13 * m32) + (m02 * m10 * m33) - (m00 * m12 * m33), 1, 2);\n        temp.set((m02 * m13 * m20) - (m03 * m12 * m20) + (m03 * m10 * m22) - (m00 * m13 * m22) - (m02 * m10 * m23) + (m00 * m12 * m23), 1, 3);\n        temp.set((m11 * m23 * m30) - (m13 * m21 * m30) + (m13 * m20 * m31) - (m10 * m23 * m31) - (m11 * m20 * m33) + (m10 * m21 * m33), 2, 0);\n        temp.set((m03 * m21 * m30) - (m01 * m23 * m30) - (m03 * m20 * m31) + (m00 * m23 * m31) + (m01 * m20 * m33) - (m00 * m21 * m33), 2, 1);\n        temp.set((m01 * m13 * m30) - (m03 * m11 * m30) + (m03 * m10 * m31) - (m00 * m13 * m31) - (m01 * m10 * m33) + (m00 * m11 * m33), 2, 2);\n        temp.set((m03 * m11 * m20) - (m01 * m13 * m20) - (m03 * m10 * m21) + (m00 * m13 * m21) + (m01 * m10 * m23) - (m00 * m11 * m23), 2, 3);\n        temp.set((m12 * m21 * m30) - (m11 * m22 * m30) - (m12 * m20 * m31) + (m10 * m22 * m31) + (m11 * m20 * m32) - (m10 * m21 * m32), 3, 0);\n        temp.set((m01 * m22 * m30) - (m02 * m21 * m30) + (m02 * m20 * m31) - (m00 * m22 * m31) - (m01 * m20 * m32) + (m00 * m21 * m32), 3, 1);\n        temp.set((m02 * m11 * m30) - (m01 * m12 * m30) - (m02 * m10 * m31) + (m00 * m12 * m31) + (m01 * m10 * m32) - (m00 * m11 * m32), 3, 2);\n        temp.set((m01 * m12 * m20) - (m02 * m11 * m20) + (m02 * m10 * m21) - (m00 * m12 * m21) - (m01 * m10 * m22) + (m00 * m11 * m22), 3, 3);\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                result.set(temp.get(i, j) / det, i, j);\n            }\n        }\n    }\n    export function model(result : Matrix, translation : Vector3, rotation : Vector3, scale : Vector3) : void {\n        // TRANSLATION MATRIX\t\n        let translationMatrix = new Matrix(4, 4);\n        this.identity(translationMatrix);\n        this.translate(translationMatrix, translation);\n\n        // ROTATION MATRIX\n        let rotationMatrix = new Matrix(4, 4);\n        this.identity(rotationMatrix);\n        this.rotate(rotationMatrix, rotation);\n\n        // SCALING MATRIX\n        let scaleMatrix = new Matrix(4, 4);\n        this.identity(scaleMatrix);\n        this.scale(scaleMatrix, scale);\n\n        // AND NOW MULTIPLY THEM TOGETHER IN THE CORRECT ORDER\n        let tempMatrix = new Matrix(4, 4);\n        this.multiply(tempMatrix, translationMatrix, rotationMatrix);\n        this.multiply(result, tempMatrix, scaleMatrix);\n    }\n\n    export function multiply(result : Matrix, mat0 : Matrix, mat1 : Matrix) : void {\n        // result MIGHT BE mat0 OR mat1 SO IT'S BEST IF WE\n        // CALCULATE TEMP VALUES FIRST BEFORE ASSIGNMENT\n        let r00 = (mat0.get(0, 0) * mat1.get(0, 0))\n            + (mat0.get(0, 1) * mat1.get(1, 0))\n            + (mat0.get(0, 2) * mat1.get(2, 0))\n            + (mat0.get(0, 3) * mat1.get(3, 0));\n        let r10 = (mat0.get(1, 0) * mat1.get(0, 0))\n            + (mat0.get(1, 1) * mat1.get(1, 0))\n            + (mat0.get(1, 2) * mat1.get(2, 0))\n            + (mat0.get(1, 3) * mat1.get(3, 0));\n        let r20 = (mat0.get(2, 0) * mat1.get(0, 0))\n            + (mat0.get(2, 1) * mat1.get(1, 0))\n            + (mat0.get(2, 2) * mat1.get(2, 0))\n            + (mat0.get(2, 3) * mat1.get(3, 0));\n        let r30 = (mat0.get(3, 0) * mat1.get(0, 0))\n            + (mat0.get(3, 1) * mat1.get(1, 0))\n            + (mat0.get(3, 2) * mat1.get(2, 0))\n            + (mat0.get(3, 3) * mat1.get(3, 0));\n        let r01 = (mat0.get(0, 0) * mat1.get(0, 1))\n            + (mat0.get(0, 1) * mat1.get(1, 1))\n            + (mat0.get(0, 2) * mat1.get(2, 1))\n            + (mat0.get(0, 3) * mat1.get(3, 1));\n        let r11 = (mat0.get(1, 0) * mat1.get(0, 1))\n            + (mat0.get(1, 1) * mat1.get(1, 1))\n            + (mat0.get(1, 2) * mat1.get(2, 1))\n            + (mat0.get(1, 3) * mat1.get(3, 1));\n        let r21 = (mat0.get(2, 0) * mat1.get(0, 1))\n            + (mat0.get(2, 1) * mat1.get(1, 1))\n            + (mat0.get(2, 2) * mat1.get(2, 1))\n            + (mat0.get(2, 3) * mat1.get(3, 1));\n        let r31 = (mat0.get(3, 0) * mat1.get(0, 1))\n            + (mat0.get(3, 1) * mat1.get(1, 1))\n            + (mat0.get(3, 2) * mat1.get(2, 1))\n            + (mat0.get(3, 3) * mat1.get(3, 1));\n        let r02 = (mat0.get(0, 0) * mat1.get(0, 2))\n            + (mat0.get(0, 1) * mat1.get(1, 2))\n            + (mat0.get(0, 2) * mat1.get(2, 2))\n            + (mat0.get(0, 3) * mat1.get(3, 2));\n        let r12 = (mat0.get(1, 0) * mat1.get(0, 2))\n            + (mat0.get(1, 1) * mat1.get(1, 2))\n            + (mat0.get(1, 2) * mat1.get(2, 2))\n            + (mat0.get(1, 3) * mat1.get(3, 2));\n        let r22 = (mat0.get(2, 0) * mat1.get(0, 2))\n            + (mat0.get(2, 1) * mat1.get(1, 2))\n            + (mat0.get(2, 2) * mat1.get(2, 2))\n            + (mat0.get(2, 3) * mat1.get(3, 2));\n        let r32 = (mat0.get(3, 0) * mat1.get(0, 2))\n            + (mat0.get(3, 1) * mat1.get(1, 2))\n            + (mat0.get(3, 2) * mat1.get(2, 2))\n            + (mat0.get(3, 3) * mat1.get(3, 2));\n        let r03 = (mat0.get(0, 0) * mat1.get(0, 3))\n            + (mat0.get(0, 1) * mat1.get(1, 3))\n            + (mat0.get(0, 2) * mat1.get(2, 3))\n            + (mat0.get(0, 3) * mat1.get(3, 3));\n        let r13 = (mat0.get(1, 0) * mat1.get(0, 3))\n            + (mat0.get(1, 1) * mat1.get(1, 3))\n            + (mat0.get(1, 2) * mat1.get(2, 3))\n            + (mat0.get(1, 3) * mat1.get(3, 3));\n        let r23 = (mat0.get(2, 0) * mat1.get(0, 3))\n            + (mat0.get(2, 1) * mat1.get(1, 3))\n            + (mat0.get(2, 2) * mat1.get(2, 3))\n            + (mat0.get(2, 3) * mat1.get(3, 3));\n        let r33 = (mat0.get(3, 0) * mat1.get(0, 3))\n            + (mat0.get(3, 1) * mat1.get(1, 3))\n            + (mat0.get(3, 2) * mat1.get(2, 3))\n            + (mat0.get(3, 3) * mat1.get(3, 3));\n\n        // NOW PUT ALL THE CALCULATED VALUES IN THE result MATRIX\n        result.set(r00, 0, 0);\n        result.set(r10, 1, 0);\n        result.set(r20, 2, 0);\n        result.set(r30, 3, 0);\n        result.set(r01, 0, 1);\n        result.set(r11, 1, 1);\n        result.set(r21, 2, 1);\n        result.set(r31, 3, 1);\n        result.set(r02, 0, 2);\n        result.set(r12, 1, 2);\n        result.set(r22, 2, 2);\n        result.set(r32, 3, 2);\n        result.set(r03, 0, 3);\n        result.set(r13, 1, 3);\n        result.set(r23, 2, 3);\n        result.set(r33, 3, 3);\n    }\n\n    export function projection(result : Matrix, nearZ : number, farZ : number, viewportWidth : number, viewportHeight : number, fovY : number) : void {\n        let aspectRatio = viewportWidth / viewportHeight;\n        let fieldOfViewY = this.math.degreesToRadians(fovY);\n        let fieldOfViewX = 2 * Math.atan(Math.tan(fieldOfViewY / 2) * aspectRatio);\n\n        // WE'LL USE THESE AS SHORTHAND FOR LOADING OUR MATRIX\n        let n = nearZ;\n        let f = farZ;\n        let r = Math.tan(fieldOfViewX / 2) * n;\n        let t = Math.tan(fieldOfViewY / 2) * n;\n\n        // 0-3\n        result.set(n / r, 0, 0);\n        result.set(0.0, 0, 1);\n        result.set(0.0, 0, 2);\n        result.set(0.0, 0, 3);\n        // 4-7\n        result.set(0.0, 1, 0);\n        result.set(n / t, 1, 1);\n        result.set(0.0, 1, 2);\n        result.set(0.0, 1, 3);\n        // 8-11\n        result.set(0.0, 2, 0);\n        result.set(0.0, 2, 1);\n        result.set((-(f + n)) / (f - n), 2, 2);\n        result.set((-2 * f * n) / (f - n), 2, 3);\n        // 12-15 \n        result.set(0.0, 3, 0);\n        result.set(0.0, 3, 1);\n        result.set(-1.0, 3, 2);\n        result.set(0.0, 3, 3);\n    }\n\n    export function rotate(result : Matrix, rotationVector : Vector3) : void {\n        // START WITH THE X-AXIS ROTATION\n        let xRotationMatrix = new Matrix(4, 4);\n        this.identity(xRotationMatrix);\n        let thetaX = rotationVector.getThetaX();\n        xRotationMatrix.set(Math.cos(thetaX), 1, 1);\n        xRotationMatrix.set(Math.sin(thetaX), 2, 1);\n        xRotationMatrix.set(-1 * Math.sin(thetaX), 1, 2);\n        xRotationMatrix.set(Math.cos(thetaX), 2, 2);\n\n        // START WITH THE Y-AXIS ROTATION\n        let yRotationMatrix = new Matrix(4, 4);\n        this.identity(yRotationMatrix);\n        let thetaY = rotationVector.getThetaY();\n        yRotationMatrix.set(Math.cos(thetaY), 0, 0);\n        yRotationMatrix.set(-1 * Math.sin(thetaY), 2, 0);\n        yRotationMatrix.set(Math.sin(thetaY), 0, 2);\n        yRotationMatrix.set(Math.cos(thetaY), 2, 2);\n\n        // START WITH THE Z-AXIS ROTATION\n        let zRotationMatrix = new Matrix(4, 4);\n        this.identity(zRotationMatrix);\n        let thetaZ = rotationVector.getThetaZ();\n        zRotationMatrix.set(Math.cos(thetaZ), 0, 0);\n        zRotationMatrix.set(Math.sin(thetaZ), 1, 0);\n        zRotationMatrix.set(-1 * Math.sin(thetaZ), 0, 1);\n        zRotationMatrix.set(Math.cos(thetaZ), 1, 1);\n\n        // START WITH THE X-AXIS ROTATION\n        let tempMatrix = new Matrix(4, 4);\n        this.identity(tempMatrix);\n        this.multiply(tempMatrix, xRotationMatrix, yRotationMatrix);\n        this.multiply(result, tempMatrix, zRotationMatrix);\n    }\n\n    export function scale(result : Matrix, scaleVector : Vector3) : void {\n        // START WITH THE IDENTITY MATRIX\n        this.identity(result, scaleVector);\n\n        // AND THEN LOAD IN THE TRANSLATION VALUES\n        result.set(scaleVector.getX(), 0, 0);\n        result.set(scaleVector.getY(), 1, 1);\n        result.set(scaleVector.getZ(), 2, 2);\n    }\n\n    export function transform(result : Vector3, mat : Matrix, vec : Vector3) : void {\n        result.setX((mat.get(0, 0) * vec.getX()) + (mat.get(0, 1) * vec.getY()) + (mat.get(0, 2) * vec.getZ()) + (mat.get(0, 3) * vec.getW()));\n        result.setY((mat.get(1, 0) * vec.getX()) + (mat.get(1, 1) * vec.getY()) + (mat.get(1, 2) * vec.getZ()) + (mat.get(1, 3) * vec.getW()));\n        result.setZ((mat.get(2, 0) * vec.getX()) + (mat.get(2, 1) * vec.getY()) + (mat.get(2, 2) * vec.getZ()) + (mat.get(2, 3) * vec.getW()));\n        result.setW((mat.get(3, 0) * vec.getX()) + (mat.get(3, 1) * vec.getY()) + (mat.get(3, 2) * vec.getZ()) + (mat.get(3, 3) * vec.getW()));\n    }\n\n    export function translate(result : Matrix, translationVector : Vector3) : void {\n        // START WITH THE IDENTITY MATRIX\n        this.identity(result);\n\n        // AND THEN LOAD IN THE TRANSLATION VALUES\n        result.set(translationVector.getX(), 0, 3);\n        result.set(translationVector.getY(), 1, 3);\n        result.set(translationVector.getZ(), 2, 3);\n    }\n\n    export function transpose(result : Matrix, mat : Matrix) : void {\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                let temp = mat.get(i, j);\n                result.set(temp, j, i);\n            }\n        }\n    }\n\n    export function view(result : Matrix, cameraPosition : Vector3, cameraOrientation : Vector3) : void {\n        let pitch = this.math.degreesToRadians(cameraOrientation.getThetaX());\n        let yaw = this.math.degreesToRadians(cameraOrientation.getThetaY());\n        let roll = this.math.degreesToRadians(cameraOrientation.getThetaZ());\n\n        // TO TRANSLATE\n        let translateVector = this.math.vectorMath.createPositionVector();\n        translateVector.set(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ());\n        let translateMatrix = new Matrix(4, 4);\n        this.identity(translateMatrix);\n        this.translate(translateMatrix, translateVector);\n\n        // TO ROTATE\n        let rotateVector = this.math.vectorMath.createRotationVector();\n        rotateVector.set(-pitch, -yaw, -roll);\n        let rotateMatrix = new Matrix(4, 4);\n        this.rotate(rotateMatrix, rotateVector);\n\n        // NOW COMBINE THE 2 MATRICES\n        this.multiply(result, rotateMatrix, translateMatrix);\n    }\n\n    export function addVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        for (let i = 0; i < vec0.getSize(); i++) {\n            let total = vec0.getAt(i) + vec1.getAt(i);\n            result.setAt(i, total);\n        }\n    }\n\n    export function crossProduct(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        let result0 = (vec0.getY() * vec1.getZ())\n            - (vec1.getY() * vec0.getZ());\n        let result1 = (vec0.getZ() * vec1.getX())\n            - (vec1.getZ() * vec0.getX());\n        let result2 = (vec0.getX() * vec1.getY())\n            - (vec1.getX() * vec0.getY());\n        result.setX(result0);\n        result.setY(result1);\n        result.setZ(result2);\n    }\n\n    export function dotProduct(vec0 : Vector3, vec1 : Vector3) : number {\n        let resultX = vec0.getX() * vec1.getX();\n        let resultY = vec0.getY() * vec1.getY();\n        let resultZ = vec0.getZ() * vec1.getZ();\n        return resultX + resultY + resultZ;\n    }\n\n    export function multiplyVectors(result : Vector3, vec : Vector3, scalar : number) : void {\n        let vecX = vec.getX() * scalar;\n        let vecY = vec.getY() * scalar;\n        let vecZ = vec.getZ() * scalar;\n        result.setX(vecX);\n        result.setY(vecY);\n        result.setZ(vecZ);\n    }\n\n    export function normalize(result : Vector3, vec : Vector3) : void {\n        let xSquared = vec.getX() * vec.getX();\n        let ySquared = vec.getY() * vec.getY();\n        let zSquared = vec.getZ() * vec.getZ();\n        let distance = Math.sqrt(xSquared + ySquared + zSquared);\n        result.setX(vec.getX() / distance);\n        result.setY(vec.getY() / distance);\n        result.setZ(vec.getZ() / distance);\n    }\n\n    export function subtractVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        let resultX = vec0.getX() - vec1.getX();\n        let resultY = vec0.getY() - vec1.getY();\n        let resultZ = vec0.getZ() - vec1.getZ();\n        result.setX(resultX);\n        result.setY(resultY);\n        result.setZ(resultZ);\n    }\n}","/*\n * A Matrix is used for transforming points from local\n * coordinates to world coordinates.\n */\nexport class Matrix {\n    private mat : Float32Array;\n    private rows : number;\n    private columns : number;\n\n    public constructor(rows : number, columns : number) {\n        this.rows = rows;\n        this.columns = columns;\n        this.mat = new Float32Array(rows * columns);\n        for (let i = 0; i < (rows * columns); i++)\n            this.mat[i] = 0.0;\n    }\n\n    public getData() : Float32Array {\n        return this.mat;\n    }\n\n    public getRows() : number {\n        return this.rows;\n    }\n\n    public getColumns() : number {\n        return this.columns;\n    }\n\n    public getIndex (rows : number, columns : number) : number {\n        return (this.rows * columns) + rows;\n    }\n    \n    public get (row : number, column : number) : number {\n        let index = this.getIndex(row, column);\n        let valueToReturn = this.mat[index];\n        return valueToReturn;\n    }\n\n    public set (value : number, row : number, column : number) {\n        let index = this.getIndex(row, column);\n        this.mat[index] = value;\n    }\n    \n    public print () : void {\n        let maxWidth = 0;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                let testNum = this.get(j, i) + \"\";\n                if (testNum.length > maxWidth) {\n                    maxWidth = testNum.length;\n                }\n            }\n        }\n        let text = \"[ \";\n        for (let i = 0; i < this.rows; i++) {\n            if (i > 0)\n                text += \"  \";\n            for (var j = 0; j < this.columns; j++) {\n                var numText = this.get(i, j) + \"\";\n                while (numText.length < maxWidth) {\n                    numText = \" \" + numText;\n                }\n                text += numText;\n                if (j < (this.columns - 1)) {\n                    text += \",\";\n                }\n                text += \" \";\n            }\n            if (i < (this.rows - 1)) {\n                text += \"\\n\";\n            }\n            text += \"]\";\n            console.log(text);\n        }\n    }\n}","/**\n * Vector3\n * \n * The Vector3 class can be used for any 2d or 3d point, vector, \n * or rotation (i.e. angles of orientation).\n */\nexport class Vector3 {\n    private vec : Float32Array;\n    private size : number;\n\n    public constructor() {\n        this.vec = new Float32Array(4);\n        for (let i = 0; i < 4; i++)\n            this.vec[i] = 0.0;\n        this.size = 4;\n    }\n\n    public getSize() : number {\n        return this.size;\n    }\n\n    public getAt(index : number) : number {\n        return this.vec[index];\n    }\n\n    public getX() : number {\n        return this.vec[0];\n    }\n\n    public getY() : number {\n        return this.vec[1];\n    }\n\n    public getZ() : number {\n        return this.vec[2];\n    }\n\n    public getW() : number {\n        return this.vec[3];\n    }\n\n    public getThetaX() : number {\n        return this.vec[0];\n    }\n\n    public getThetaY() : number {\n        return this.vec[1];\n    }\n\n    public getThetaZ() : number {\n        return this.vec[2];\n    }\n\n    public set(init0 : number, init1 : number, init2 : number, init3 : number) : void {\n        this.vec[0] = init0;\n        this.vec[1] = init1;\n        this.vec[2] = init2;\n        this.vec[3] = init3;\n    }\n\n    public setAt(index : number, value : number) : void {\n        this.vec[index] = value;\n    }\n\n    public setX(initX : number) : void {\n        this.vec[0] = initX;\n    }\n\n    public setY(initY : number) : void {\n        this.vec[1] = initY;\n    }\n\n    public setZ(initZ : number) : void {\n        this.vec[2] = initZ;\n    }\n\n    public setW(initW : number) : void {\n        this.vec[3] = initW;\n    }\n\n    public setThetaX(initThetaX : number) : void {\n        this.setX(initThetaX);\n    }\n\n    public setThetaY(initThetaY : number) : void {\n        this.setY(initThetaY);\n    }\n\n    public setThetaZ(initThetaZ : number) : void {\n        this.setZ(initThetaZ);\n    }\n\n    public print() : void {\n        let text = \"[\";\n        for (let i = 0; i < this.size; i++) {\n            text += this.vec[i];\n            if (i < (this.size - 1)) {\n                text += \", \";\n            }\n        }\n        text += \"]\";\n        console.log(text);\n    }\n}","import {WebGLGameShader} from './WebGLGameShader'\r\nimport {MathUtilities} from '../math/MathUtilities'\r\nimport { Matrix } from '../math/Matrix'\r\nimport { Vector3 } from '../math/Vector3'\r\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\r\nimport {WebGLGameTexture} from './WebGLGameTexture'\r\nimport {HashTable} from '../data/HashTable'\r\nimport { CircleSprite } from '../scene/sprite/CircleSprite'\r\n\r\nvar CircleDefaults = {\r\n    A_POSITION: \"a_Position\",\r\n    A_VALUE_TO_INTERPOLATE: \"a_ValueToInterpolate\",\r\n    U_SPRITE_TRANSFORM: \"u_SpriteTransform\",\r\n    U_R: \"u_r\",\r\n    U_G: \"u_g\",\r\n    U_B: \"u_b\",\r\n    NUM_VERTICES: 4,\r\n    FLOATS_PER_VERTEX: 2,\r\n    FLOATS_PER_TEXTURE_COORDINATE: 2,\r\n    TOTAL_BYTES: 16,\r\n    OFFSET: 0,\r\n    STRIDE: 0,\r\n    INDEX_OF_FIRST_VERTEX: 0,\r\n};\r\n\r\nexport class CircleRenderer {\r\n    private shader : WebGLGameShader;\r\n    private vertexTexCoordBuffer : WebGLBuffer;\r\n\r\n    private spriteTransform : Matrix;\r\n    private spriteTranslate : Vector3;\r\n    private spriteRotate : Vector3;\r\n    private spriteScale : Vector3;    \r\n\r\n    private webGLAttributeLocations : HashTable<GLuint>;\r\n    private webGLUniformLocations : HashTable<WebGLUniformLocation>;\r\n\r\n    public constructor() {}\r\n\r\n    public init(webGL : WebGLRenderingContext) : void {\r\n        this.shader = new WebGLGameShader();\r\n        var vertexShaderSource =\r\n            'precision highp float;\\n'+\r\n            'attribute vec4 ' + CircleDefaults.A_POSITION + ';\\n'+\r\n            'attribute vec2 ' + CircleDefaults.A_VALUE_TO_INTERPOLATE + ';\\n'+\r\n            'varying vec2 val;\\n'+\r\n            'uniform mat4 ' + CircleDefaults.U_SPRITE_TRANSFORM +';\\n'+\r\n            'void main() {\\n'+\r\n            '    val = ' + CircleDefaults.A_VALUE_TO_INTERPOLATE +' * 2.0 ;\\n'+\r\n            '  gl_Position = ' + CircleDefaults.U_SPRITE_TRANSFORM + ' * ' + CircleDefaults.A_POSITION + ';\\n' +\r\n            '}\\n'\r\n        \r\n        var fragmentShaderSource =\r\n            'precision highp float;\\n'+\r\n            'varying vec2 val;\\n'+\r\n            'uniform float ' + CircleDefaults.U_R + ';\\n'+\r\n            'uniform float ' + CircleDefaults.U_G + ';\\n'+\r\n            'uniform float ' + CircleDefaults.U_B + ';\\n'+\r\n            'void main() {\\n'+\r\n            '    float R = 1.0;\\n'+\r\n            '    float dist = sqrt(dot(val,val));\\n'+\r\n            '    float alpha = 1.0;\\n'+\r\n            '    if (dist > R) {\\n'+\r\n            '        discard;\\n'+\r\n            '    }\\n'+\r\n            '    if (u_r == 0.0){\\n'+\r\n            '        gl_FragColor = vec4(dist, ' + CircleDefaults.U_G + ' + dist, ' + CircleDefaults.U_B + ' + dist, alpha);\\n'+\r\n            '    }\\n'+\r\n            '    if(u_g == 0.0){\\n'+\r\n            '        gl_FragColor = vec4( ' + CircleDefaults.U_R + ', dist, ' + CircleDefaults.U_B +', alpha);\\n'+\r\n            '    }\\n'+\r\n            '    if(u_b == 0.0){\\n'+\r\n            '        gl_FragColor = vec4('+CircleDefaults.U_R +', ' + CircleDefaults.U_G + ', dist, alpha);\\n'+\r\n            '    }\\n'+\r\n            '}\\n'\r\n        \r\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\r\n        // GET THE webGL OBJECT TO USE\r\n        var verticesTexCoords = new Float32Array([\r\n            -0.5,  0.5,\r\n            -0.5, -0.5,\r\n             0.5,  0.5,\r\n             0.5, -0.5,\r\n        ]);\r\n        // CREATE THE BUFFER ON THE GPU\r\n        this.vertexTexCoordBuffer = webGL.createBuffer();\r\n\r\n        // BIND THE BUFFER TO BE VERTEX DATA\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n\r\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\r\n        webGL.bufferData(webGL.ARRAY_BUFFER, verticesTexCoords, webGL.STATIC_DRAW);\r\n\r\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\r\n        this.webGLAttributeLocations = {};\r\n        this.webGLUniformLocations = {};\r\n        this.loadAttributeLocations(webGL, [\"a_Position\", \"a_ValueToInterpolate\"]);\r\n        this.loadUniformLocations(webGL, [\"u_SpriteTransform\", \"u_r\", \"u_g\", \"u_b\"]);\r\n\r\n        // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n        this.spriteTransform = new Matrix(4, 4);\r\n        this.spriteTranslate = new Vector3();\r\n        this.spriteRotate = new Vector3();\r\n        this.spriteScale = new Vector3();\r\n    }\r\n    private loadAttributeLocations(webGL : WebGLRenderingContext, attributeLocationNames : Array<string>) {\r\n        for (var i = 0; i < attributeLocationNames.length; i++) {\r\n            let locationName : string = attributeLocationNames[i];\r\n            let location : GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\r\n            this.webGLAttributeLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private loadUniformLocations(webGL : WebGLRenderingContext, uniformLocationNames : Array<string>) {\r\n        for (let i : number = 0; i < uniformLocationNames.length; i++) {\r\n            let locationName : string = uniformLocationNames[i];\r\n            let location : WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\r\n            this.webGLUniformLocations[locationName] = location;\r\n        }\r\n    }\r\n    public renderCicle(webGL : WebGLRenderingContext, canvasWidth : number,\r\n                    canvasHeight : number, circle : CircleSprite){\r\n        let circleWidth : number = circle.getWidth();\r\n        let circleHeight : number = circle.getHeight();\r\n        let circleXInPixels : number = circle.getPosition().getX() + (circleWidth/2);\r\n        let circleYInPixels : number = circle.getPosition().getY() + (circleHeight/2);\r\n        let circleXTranslate : number = (circleXInPixels - (canvasWidth/2))/(canvasWidth/2);\r\n        let circleYTranslate : number = (circleYInPixels - (canvasHeight/2))/(canvasHeight/2);\r\n        this.spriteTranslate.setX(circleXTranslate);\r\n        this.spriteTranslate.setY(-circleYTranslate);\r\n\r\n        let defaultWidth : number = canvasWidth/2;\r\n        let defaultHeight : number = canvasHeight/2;\r\n        let scaleX : number = circleWidth/defaultWidth;\r\n        let scaleY : number = circleHeight/defaultHeight;\r\n        this.spriteScale.setX(scaleX);\r\n        this.spriteScale.setY(scaleY);\r\n\r\n        MathUtilities.identity(this.spriteTransform);\r\n        MathUtilities.model(this.spriteTransform, this.spriteTranslate, this.spriteRotate, this.spriteScale);\r\n        \r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n\r\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations[\"a_Position\"];\r\n        webGL.vertexAttribPointer(a_PositionLocation, 2, webGL.FLOAT, false, CircleDefaults.STRIDE, CircleDefaults.OFFSET);\r\n        webGL.enableVertexAttribArray(a_PositionLocation);\r\n        let a_ValueToInterpolate : GLuint = this.webGLAttributeLocations[\"a_ValueToInterpolate\"];\r\n        webGL.vertexAttribPointer(a_ValueToInterpolate, 2, webGL.FLOAT, false, 0, CircleDefaults.OFFSET);\r\n        webGL.enableVertexAttribArray(a_ValueToInterpolate);\r\n\r\n        let u_SpriteTransform : WebGLUniformLocation = this.webGLUniformLocations[\"u_SpriteTransform\"];\r\n        webGL.uniformMatrix4fv(u_SpriteTransform, false, this.spriteTransform.getData());\r\n        let u_r : WebGLUniformLocation = this.webGLUniformLocations[\"u_r\"];\r\n        webGL.uniform1f(u_r, circle.getR());\r\n        let u_g : WebGLUniformLocation = this.webGLUniformLocations[\"u_g\"];\r\n        webGL.uniform1f(u_g, circle.getG());\r\n        let u_b : WebGLUniformLocation = this.webGLUniformLocations[\"u_b\"];\r\n        webGL.uniform1f(u_b, circle.getB());\r\n\r\n\r\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\r\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, CircleDefaults.INDEX_OF_FIRST_VERTEX, CircleDefaults.NUM_VERTICES);\r\n    }\r\n\r\n    public renderCircleSprites(webGL : WebGLRenderingContext, \r\n        canvasWidth : number, \r\n        canvasHeight : number, \r\n        visibleSet : Array<CircleSprite>) : void{\r\n            let shaderProgramToUse = this.shader.getProgram();\r\n            webGL.useProgram(shaderProgramToUse);\r\n            for(let circle of visibleSet){\r\n                this.renderCicle(webGL, canvasWidth, canvasHeight, circle);\r\n            }\r\n        }\r\n}","/*\n * This class renders text to a canvas, updated each frame.\n */\nimport {HashTable} from '../data/HashTable'\n\nexport class TextToRender {\n    public id : string;\n    public text : string;\n    public x : number;\n    public y : number;\n    public update : Function;\n    public fontFamily : string;\n    public fontSize : number;\n    public fontColor : string;\n    public properties : HashTable<object>;\n\n    public constructor(initId : string, initText : string, initX : number, initY : number, initUpdate : Function) {\n        this.id = initId;\n        this.text = initText;\n        this.x = initX;\n        this.y = initY;\n        this.update = initUpdate;\n        this.fontFamily = \"\";\n        this.fontSize = 0;\n        this.fontColor = \"\";\n        this.properties = {};\n    }\n}\n\nexport class TextRenderer {\n    private textToRender : Array<TextToRender>;\n    private textCanvas : HTMLCanvasElement;\n    private textCanvasWidth : number;\n    private textCanvasHeight : number;\n    private textCtx : CanvasRenderingContext2D;\n    private defaultFontFamily : string;\n    private defaultFontSize : number;\n    private defaultFontColor : string;\n\n    public constructor(textCanvasId : string, initFontFamily : string, initFontSize : number, initFontColor : string) {\n        this.textToRender = new Array();\n        this.textCanvas = <HTMLCanvasElement>document.getElementById(textCanvasId);\n        this.textCanvas.width = window.innerWidth;\n        this.textCanvas.height = window.innerHeight;\n        this.textCanvasWidth = this.textCanvas.width;\n        this.textCanvasHeight = this.textCanvas.height;\n        this.textCtx = this.textCanvas.getContext(\"2d\");\n        this.defaultFontFamily = initFontFamily;\n        this.defaultFontSize = initFontSize;\n        this.defaultFontColor = initFontColor;\n    }\n    \n    public addTextToRender(textToAdd : TextToRender) : void {\n        textToAdd.fontFamily = this.defaultFontFamily;\n        textToAdd.fontSize = this.defaultFontSize;\n        textToAdd.fontColor = this.defaultFontColor;\n        this.textToRender.push(textToAdd);\n    }\n\n    public clear() : void {\n        this.textToRender = [];\n    }\n\n    public getCanvasWidth() : number {\n        return this.textCanvasWidth;\n    }\n\n    public getCanvasHeight() : number {\n        return this.textCanvasHeight;\n    }\n\n    public render() : void {\n        this.textCtx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\n        for (var i = 0; i < this.textToRender.length; i++) {\n            var textToRender = this.textToRender[i];\n            textToRender.update();\n            this.textCtx.font = \"\" + textToRender.fontSize + \"px \" + textToRender.fontFamily;\n            this.textCtx.fillStyle = textToRender.fontColor;\n            this.textCtx.fillText(textToRender.text, textToRender.x, textToRender.y);\n        }\n    }\n}","/*\n * This serves as the subsystem that manages all game rendering.\n */\nimport {TextRenderer} from './TextRenderer'\nimport {WebGLGameSpriteRenderer} from './WebGLGameSpriteRenderer'\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\nimport {WebGLGameTexture } from './WebGLGameTexture';\nimport { CircleRenderer } from './CircleRenderer';\nimport { CircleSprite } from '../scene/sprite/CircleSprite';\nimport { Vector3 } from '../math/Vector3';\n\nexport class WebGLGameRenderingSystem {\n    private renderingCanvas : HTMLCanvasElement;\n    private webGL : WebGLRenderingContext;\n    private spriteRenderer : WebGLGameSpriteRenderer;\n    private circleRenderer : CircleRenderer;\n    private textRenderer : TextRenderer;\n    private canvasWidth : number;\n    private canvasHeight : number;\n\n    public constructor() {}\n\n    public getTextureConstant(id : number) : number {\n        // WE ONLY HAVE 4 HERE, WE SHOULD HAVE A BETTER WAY OF DOING THIS\n        switch(id) {\n            case 0: return this.webGL.TEXTURE0;\n            case 1: return this.webGL.TEXTURE1;\n            case 2: return this.webGL.TEXTURE3;\n            default: return this.webGL.TEXTURE4;\n        }\n    }\n\n    public getWebGL() : WebGLRenderingContext {\n        return this.webGL;\n    }\n\n    public getSpriteRenderer() : WebGLGameSpriteRenderer {\n        return this.spriteRenderer;\n    }\n\n    public getTextRenderer() : TextRenderer {\n        return this.textRenderer;\n    }\n\n    public init(renderingCanvasId : string, textCanvasId : string) : void {\n        // FIRST SETUP webGL\n        this.renderingCanvas = <HTMLCanvasElement>document.getElementById(renderingCanvasId);\n        this.renderingCanvas.width = window.innerWidth;\n        this.renderingCanvas.height = window.innerHeight;\n        this.canvasWidth = this.renderingCanvas.width;\n        this.canvasHeight = this.renderingCanvas.height;\n        this.webGL = this.renderingCanvas.getContext(\"webgl\");\n\n        // IF THE USER'S MACHINE/BROWSER DOESN'T SUPPORT\n        // WebGL THEN THERE'S NO POINT OF GOING ON\n        if (!this.webGL) {\n            // PROVIDE SOME FEEDBACK THAT WebGL WON'T WORK BECAUSE\n            // THE USER'S' GRAPHICS CARD IS FOR THE BIRDS\n            console.error(\"WebGL is not supported by this device\");\n\n            // AND END INITIALIZATION\n            return;\n        }\n\n        // WebGL IS SUPPORTED, SO INIT EVERYTHING THAT USES IT\n\n        // MAKE THE CLEAR COLOR BLACK\n        this.setClearColor(0.0, 0.0, 0.0, 1.0);\n\n        // ENABLE DEPTH TESTING\n        this.webGL.disable(this.webGL.DEPTH_TEST);\n        this.webGL.enable(this.webGL.BLEND);\n        this.webGL.blendFunc(this.webGL.SRC_ALPHA, this.webGL.ONE_MINUS_SRC_ALPHA);\n\n        // TURN ON BACKFACE CULLING\n        this.webGL.enable(this.webGL.CULL_FACE);\n\n        // THIS SPECIFIES THAT WE'RE USING THE ENTIRE CANVAS\n        this.webGL.viewport(0, 0, this.canvasWidth, this.canvasHeight);\n\n        // NOW MAKE THE SHADER FOR DRAWING THIS THING\n        this.spriteRenderer = new WebGLGameSpriteRenderer();\n        this.spriteRenderer.init(this.webGL);\n        this.circleRenderer = new CircleRenderer();\n        this.circleRenderer.init(this.webGL);\n        // THIS WILL STORE OUR TEXT\n        this.textRenderer = new TextRenderer(textCanvasId, \"serif\", 18, \"#FFFF00\");\n    }\n\n    public initWebGLTexture(textureToInit : WebGLGameTexture, textureId : number, image : HTMLImageElement, callback : Function) : void {\n        textureToInit.width = image.width;\n        textureToInit.height = image.height;\n\n        // CREATE A WebGL TEXTURE ON THE GPU\n        textureToInit.webGLTexture = this.webGL.createTexture();\n        textureToInit.webGLTextureId = textureId;\n\n        // FLIP THE IMAGE'S y-AXIS\n        //webGL.pixelStorei(webGL.UNPACK_FLIP_Y_WEBGL, 1);\n\n        // ACTIVATE THE WebGL TEXTURE ON THE GPU\n        //let textureNumName : string = \"TEXTURE\" + textureId;\n        let textureNameConstant : number = this.getTextureConstant(textureId);\n        this.webGL.activeTexture(textureNameConstant);\n\n        // BIND THE TEXTURE TO A 2D TYPE\n        this.webGL.bindTexture(this.webGL.TEXTURE_2D, textureToInit.webGLTexture);\n\n        // SPECIFY RENDERING SETTINGS\n        this.webGL.texParameteri(this.webGL.TEXTURE_2D, this.webGL.TEXTURE_MIN_FILTER, this.webGL.LINEAR);\n\n        // SET THE IMAGE FOR THE TEXTURE\n        this.webGL.texImage2D(this.webGL.TEXTURE_2D, 0, this.webGL.RGBA, this.webGL.RGBA, this.webGL.UNSIGNED_BYTE, image);\n\n        // KEEP IT FOR WHEN WE RENDER\n        callback();\n    }\n\n    public setClearColor(r : number, g : number, b : number, a : number) : void {\n        this.webGL.clearColor(r, g, b, a);\n    }\n\n    public render(visibleSet : Array<AnimatedSprite>, visibleCircles : Array<CircleSprite>) : void {\n        // CLEAR THE CANVAS\n        this.webGL.clear(this.webGL.COLOR_BUFFER_BIT | this.webGL.DEPTH_BUFFER_BIT);\n        \n        // RENDER THE SPRITES ON ONE CANVAS\n        this.spriteRenderer.renderAnimatedSprites(this.webGL, this.canvasWidth, this.canvasHeight, visibleSet);\n        this.circleRenderer.renderCircleSprites(this.webGL, this.canvasWidth, this.canvasHeight, visibleCircles);\n        // THEN THE TEXT ON ANOTHER OVERLAPPING CANVAS\n        this.textRenderer.render();\n    }\n}","/*\n * This is a wrapper class for a WebGLProgram, i.e. a shader for custom rendering\n * using WebGL's programmable pipeline.\n */\nexport class WebGLGameShader {\n    private program : WebGLProgram;\n    private vertexShader : WebGLShader;\n    private fragmentShader : WebGLShader;\n\n    public constructor() {}\n\n    public getProgram() : WebGLProgram {\n        return this.program;\n    }\n\n    public init(webGL : WebGLRenderingContext, vSource : string, fSource : string) : void {\n        this.vertexShader = <WebGLShader>this.createShader(webGL, webGL.VERTEX_SHADER, vSource);\n        this.fragmentShader = <WebGLShader>this.createShader(webGL, webGL.FRAGMENT_SHADER, fSource);\n        this.program = this.createShaderProgram(webGL, this.vertexShader, this.fragmentShader);\n    }\n\n    public createShader(webGL : WebGLRenderingContext, type : number, source : string) : WebGLShader {\n        // MAKE A NEW SHADER OBJECT, LOAD IT'S SOURCE, AND COMPILE IT\n        var shader = webGL.createShader(type);\n        webGL.shaderSource(shader, source);\n        webGL.compileShader(shader);\n\n        // DID IT COMPILE?\n        var success = webGL.getShaderParameter(shader, webGL.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        // DISASTER\n        console.log(webGL.getShaderInfoLog(shader));\n        webGL.deleteShader(shader);\n        return null;\n    }\n\n    public createShaderProgram(webGL : WebGLRenderingContext, vShader : WebGLShader, fShader : WebGLShader) : WebGLProgram {\n        // MAKE THE GLSL SHADER PROGRAM\n        let programToCreate = webGL.createProgram();\n\n        // LINK THE VERT AND FRAG\n        webGL.attachShader(programToCreate, vShader);\n        webGL.attachShader(programToCreate, fShader);\n\n        // NOW WE CAN LINK THE SHADER PROGRAM\n        webGL.linkProgram(programToCreate);\n        let linked : boolean = webGL.getProgramParameter(programToCreate, webGL.LINK_STATUS);\n\n        // IS IT LINKED?\n        if (!linked) {\n            // DISASTER\n            let errorFeedback : string = webGL.getProgramInfoLog(programToCreate);\n            console.log(errorFeedback);\n\n            // DISASTER\n            console.log(webGL.getProgramInfoLog(programToCreate));\n            webGL.deleteProgram(programToCreate);\n        }\n        return programToCreate;\n    }\n}","import {WebGLGameShader} from './WebGLGameShader'\nimport {MathUtilities} from '../math/MathUtilities'\nimport { Matrix } from '../math/Matrix'\nimport { Vector3 } from '../math/Vector3'\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\nimport {WebGLGameTexture} from './WebGLGameTexture'\nimport {HashTable} from '../data/HashTable'\n\nvar SpriteDefaults = {\n    A_POSITION: \"a_Position\",\n    A_TEX_COORD: \"a_TexCoord\",\n    U_SPRITE_TRANSFORM: \"u_SpriteTransform\",\n    U_TEX_COORD_FACTOR: \"u_TexCoordFactor\",\n    U_TEX_COORD_SHIFT: \"u_TexCoordShift\",\n    U_SAMPLER: \"u_Sampler\",\n    NUM_VERTICES: 4,\n    FLOATS_PER_VERTEX: 2,\n    FLOATS_PER_TEXTURE_COORDINATE: 2,\n    TOTAL_BYTES: 16,\n    VERTEX_POSITION_OFFSET: 0,\n    TEXTURE_COORDINATE_OFFSET: 8,\n    INDEX_OF_FIRST_VERTEX: 0\n};\n\nexport class WebGLGameSpriteRenderer {\n    private shader : WebGLGameShader;\n    private vertexTexCoordBuffer : WebGLBuffer;\n\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\n    private spriteTransform : Matrix;\n    private spriteTranslate : Vector3;\n    private spriteRotate : Vector3;\n    private spriteScale : Vector3;    \n\n    private webGLAttributeLocations : HashTable<GLuint>;\n    private webGLUniformLocations : HashTable<WebGLUniformLocation>;\n\n    public constructor() {}\n    \n    public init(webGL : WebGLRenderingContext) : void {\n        this.shader = new WebGLGameShader();\n        var vertexShaderSource =\n            'uniform mat4 ' + SpriteDefaults.U_SPRITE_TRANSFORM + ';\\n' +\n            'uniform vec2 ' + SpriteDefaults.U_TEX_COORD_FACTOR + ';\\n' +\n            'uniform vec2 ' + SpriteDefaults.U_TEX_COORD_SHIFT + ';\\n' +\n            'attribute vec4 ' + SpriteDefaults.A_POSITION + ';\\n' +\n            'attribute vec2 ' + SpriteDefaults.A_TEX_COORD + ';\\n' +\n            'varying vec2 v_TexCoord;\\n' +\n            'void main() {\\n' +\n            '  gl_Position = ' + SpriteDefaults.U_SPRITE_TRANSFORM + ' * ' + SpriteDefaults.A_POSITION + ';\\n' +\n            '  vec2 tempTexCoord = ' + SpriteDefaults.A_TEX_COORD + ' * ' + SpriteDefaults.U_TEX_COORD_FACTOR + ';\\n' +\n            '  v_TexCoord = tempTexCoord + ' + SpriteDefaults.U_TEX_COORD_SHIFT + ';\\n' +\n            '}\\n';\n        var fragmentShaderSource =\n            '#ifdef GL_ES\\n' +\n            'precision mediump float;\\n' +\n            '#endif\\n' +\n            'uniform sampler2D ' + SpriteDefaults.U_SAMPLER + ';\\n' +\n            'varying vec2 v_TexCoord;\\n' +\n            'void main() {\\n' +\n            '  gl_FragColor = texture2D(' + SpriteDefaults.U_SAMPLER + ', v_TexCoord);\\n' +\n            '}\\n';\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\n\n        // GET THE webGL OBJECT TO USE\n        var verticesTexCoords = new Float32Array([\n            -0.5,  0.5, 0.0, 0.0,\n            -0.5, -0.5, 0.0, 1.0,\n             0.5,  0.5, 1.0, 0.0,\n             0.5, -0.5, 1.0, 1.0\n        ]);\n\n        // CREATE THE BUFFER ON THE GPU\n        this.vertexTexCoordBuffer = webGL.createBuffer();\n\n        // BIND THE BUFFER TO BE VERTEX DATA\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\n\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\n        webGL.bufferData(webGL.ARRAY_BUFFER, verticesTexCoords, webGL.STATIC_DRAW);\n\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\n        this.webGLAttributeLocations = {};\n        this.webGLUniformLocations = {};\n        this.loadAttributeLocations(webGL, [SpriteDefaults.A_POSITION, SpriteDefaults.A_TEX_COORD]);\n        this.loadUniformLocations(webGL, [SpriteDefaults.U_SPRITE_TRANSFORM, SpriteDefaults.U_SAMPLER, SpriteDefaults.U_TEX_COORD_FACTOR, SpriteDefaults.U_TEX_COORD_SHIFT]);\n\n        // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\n        this.spriteTransform = new Matrix(4, 4);\n        this.spriteTranslate = new Vector3();\n        this.spriteRotate = new Vector3();\n        this.spriteScale = new Vector3();\n    }\n\n    public renderAnimatedSprites(  webGL : WebGLRenderingContext, \n                            canvasWidth : number, \n                            canvasHeight : number, \n                            visibleSet : Array<AnimatedSprite>) : void {\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\n        let shaderProgramToUse = this.shader.getProgram();\n        webGL.useProgram(shaderProgramToUse);\n\n       // AND THEN RENDER EACH ONE\n       for (let sprite of visibleSet) {\n            this.renderAnimatedSprite(webGL, canvasWidth, canvasHeight, sprite);        \n        }\n    }\n\n    private loadAttributeLocations(webGL : WebGLRenderingContext, attributeLocationNames : Array<string>) {\n        for (var i = 0; i < attributeLocationNames.length; i++) {\n            let locationName : string = attributeLocationNames[i];\n            let location : GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\n            this.webGLAttributeLocations[locationName] = location;\n        }\n    }\n\n    private loadUniformLocations(webGL : WebGLRenderingContext, uniformLocationNames : Array<string>) {\n        for (let i : number = 0; i < uniformLocationNames.length; i++) {\n            let locationName : string = uniformLocationNames[i];\n            let location : WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\n            this.webGLUniformLocations[locationName] = location;\n        }\n    }\n\n    private renderAnimatedSprite(   webGL : WebGLRenderingContext, \n                            canvasWidth : number, \n                            canvasHeight : number, \n                            sprite : AnimatedSprite) {\n        let spriteType : AnimatedSpriteType = sprite.getSpriteType();\n        let texture : WebGLGameTexture = spriteType.getSpriteSheetTexture();\n\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\n        let spriteWidth : number = spriteType.getSpriteWidth();\n        let spriteHeight : number = spriteType.getSpriteHeight();\n        let spriteXInPixels : number = sprite.getPosition().getX() + (spriteWidth/2);\n        let spriteYInPixels : number = sprite.getPosition().getY() + (spriteHeight/2);\n        let spriteXTranslate : number = (spriteXInPixels - (canvasWidth/2))/(canvasWidth/2);\n        let spriteYTranslate : number = (spriteYInPixels - (canvasHeight/2))/(canvasHeight/2);\n        this.spriteTranslate.setX(spriteXTranslate);\n        this.spriteTranslate.setY(-spriteYTranslate);\n\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\n        let defaultWidth : number = canvasWidth/2;\n        let defaultHeight : number = canvasHeight/2;\n        let scaleX : number = spriteWidth/defaultWidth;\n        let scaleY : number = spriteHeight/defaultHeight;\n        this.spriteScale.setX(scaleX);\n        this.spriteScale.setY(scaleY);\n\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\n        MathUtilities.identity(this.spriteTransform);\n        MathUtilities.model(this.spriteTransform, this.spriteTranslate, this.spriteRotate, this.spriteScale);\n        \n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\n        let texCoordFactorX : number = spriteWidth/texture.width;\n        let texCoordFactorY : number = spriteHeight/texture.height;\n        let spriteLeft : number = sprite.getLeft();\n        let spriteTop : number = sprite.getTop();\n        let texCoordShiftX : number = spriteLeft/texture.width;\n        let texCoordShiftY : number = spriteTop/texture.height;   \n\n        // USE THE ATTRIBUTES\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\n        webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\n\n        // HOOK UP THE ATTRIBUTES\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations[SpriteDefaults.A_POSITION];\n        webGL.vertexAttribPointer(a_PositionLocation, SpriteDefaults.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, SpriteDefaults.TOTAL_BYTES, SpriteDefaults.VERTEX_POSITION_OFFSET);\n        webGL.enableVertexAttribArray(a_PositionLocation);\n        let a_TexCoordLocation : GLuint = this.webGLAttributeLocations[SpriteDefaults.A_TEX_COORD];\n        webGL.vertexAttribPointer(a_TexCoordLocation, SpriteDefaults.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, SpriteDefaults.TOTAL_BYTES, SpriteDefaults.TEXTURE_COORDINATE_OFFSET);\n        webGL.enableVertexAttribArray(a_TexCoordLocation);\n\n        // USE THE UNIFORMS\n        let u_SpriteTransformLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_SPRITE_TRANSFORM];\n        webGL.uniformMatrix4fv(u_SpriteTransformLocation, false, this.spriteTransform.getData());\n        let u_SamplerLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_SAMPLER];\n        webGL.uniform1i(u_SamplerLocation, texture.webGLTextureId);\n        let u_TexCoordFactorLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_TEX_COORD_FACTOR];\n        webGL.uniform2f(u_TexCoordFactorLocation, texCoordFactorX, texCoordFactorY);\n        let u_TexCoordShiftLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_TEX_COORD_SHIFT];\n        webGL.uniform2f(u_TexCoordShiftLocation, texCoordShiftX, texCoordShiftY);\n\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, SpriteDefaults.INDEX_OF_FIRST_VERTEX, SpriteDefaults.NUM_VERTICES);\n    }\n}","export class WebGLGameTexture {\n    public webGLTextureId: number;\n    public webGLTexture: WebGLTexture;\n    public image: HTMLImageElement;\n    public width : number;\n    public height : number;\n}","import {SceneObject} from './SceneObject'\nimport {AnimatedSprite} from './sprite/AnimatedSprite'\nimport { CircleSprite } from './sprite/CircleSprite';\n\nexport class SceneGraph {\n    // AND ALL OF THE ANIMATED SPRITES, WHICH ARE NOT STORED\n    // SORTED OR IN ANY PARTICULAR ORDER. NOTE THAT ANIMATED SPRITES\n    // ARE SCENE OBJECTS\n    private animatedSprites : Array<AnimatedSprite>;\n    private circleSprites : Array<CircleSprite>;\n\n    // SET OF VISIBLE OBJECTS, NOTE THAT AT THE MOMENT OUR\n    // SCENE GRAPH IS QUITE SIMPLE, SO THIS IS THE SAME AS\n    // OUR LIST OF ANIMATED SPRITES\n    private visibleSet : Array<SceneObject>;\n    private spriteHover : SceneObject;\n\n    public constructor() {\n        // DEFAULT CONSTRUCTOR INITIALIZES OUR DATA STRUCTURES\n        this.animatedSprites = new Array();\n        this.circleSprites = new Array();\n        this.visibleSet = new Array();\n        this.spriteHover = null;\n    }\n\n    public getNumSprites() : number {\n        return this.animatedSprites.length + this.circleSprites.length;\n    }\n\n    public addAnimatedSprite(sprite : AnimatedSprite) : void {\n        this.animatedSprites.push(sprite);\n    }\n\n    public addCircleSprite(circle : CircleSprite) : void{\n        this.circleSprites.push(circle);\n    }\n    public getSpriteAt(testX : number, testY : number) : AnimatedSprite {\n        for (let sprite of this.animatedSprites) {\n            if (sprite.contains(testX, testY))\n                return sprite;\n        }\n        return null;\n    }\n    public getCircleAt(testX : number, testY : number) : CircleSprite {\n        for (let circle of this.circleSprites){\n            if(circle.contains(testX,testY))\n                return circle;\n        }\n    }\n\n    /**\n     * update\n     * \n     * Called once per frame, this function updates the state of all the objects\n     * in the scene.\n     * \n     * @param delta The time that has passed since the last time this update\n     * funcation was called.\n     */\n    public update(delta : number) : void {\n        for (let sprite of this.animatedSprites) {\n            sprite.update(delta);\n        }\n    }\n\n    public scope() : Array<SceneObject> {\n        // CLEAR OUT THE OLD\n        this.visibleSet = [];\n\n        // PUT ALL THE SCENE OBJECTS INTO THE VISIBLE SET\n        for (let sprite of this.animatedSprites) {\n            this.visibleSet.push(sprite);\n        }\n\n        return this.visibleSet;\n    }\n\n    public circleScope() : Array<SceneObject> {\n        this.visibleSet = [];\n        for (let circle of this.circleSprites){\n            this.visibleSet.push(circle);\n        }\n        return this.visibleSet;\n    }\n    public remove(sprite : AnimatedSprite) : void{\n        let index : number = this.animatedSprites.indexOf(sprite);\n        this.animatedSprites.splice(index, 1);\n    }\n    public removeCircle(circle : CircleSprite) : void{\n        let index : number = this.circleSprites.indexOf(circle);\n        this.circleSprites.splice(index, 1);\n    }\n    public setSpriteHover(spriteHover : SceneObject) : void{\n        this.spriteHover = spriteHover;\n    }\n    public getSpriteHover() : SceneObject{\n        return this.spriteHover;\n    }\n}","import {Vector3} from '../math/Vector3'\n\n/**\n * SceneObject\n * \n * A SceneObject is something that can be placed into the scene graph. It has\n * a position, rotation, and scale in the game world. Note that its position\n * is typically its centered location, so if we're talking about a 2d box, \n * it would be the center of that box.\n */\nexport abstract class SceneObject {\n    private position : Vector3;\n    private rotation : Vector3;\n    private scale : Vector3;\n\n    public constructor() {\n        this.position = new Vector3();\n        this.rotation = new Vector3();\n        this.scale = new Vector3();\n\n        // CLEAR ALL VALUES\n        this.position.set(0.0, 0.0, 0.0, 1.0);\n        this.rotation.set(0.0, 0.0, 0.0, 1.0);\n        this.scale.set(1.0, 1.0, 1.0, 1.0);\n    }\n\n    public getPosition() : Vector3 {\n        return this.position;\n    }    \n\n    public getRotation() : Vector3 {\n        return this.rotation;\n    }\n\n    public getScale() : Vector3 {\n        return this.scale;\n    }\n\n    public abstract contains(testX : number, testY : number) : boolean;\n}","import {SceneObject} from '../SceneObject'\nimport {AnimatedSpriteType} from './AnimatedSpriteType'\n\nexport class AnimatedSprite extends SceneObject {\n    private spriteType : AnimatedSpriteType;\n    private state : string;\n    private animationFrameIndex : number;\n    private frameCounter : number;\n    \n    public constructor(initSpriteType : AnimatedSpriteType, initState : string) {\n        super();\n        this.spriteType = initSpriteType;\n        \n        // START RESET\n        this.state = initState;\n        this.animationFrameIndex = 0;\n        this.frameCounter = 0;\n    }\n\n    public getAnimationFrameIndex() : number {\n        return this.animationFrameIndex;\n    }\n\n    public getFrameCounter() : number {\n        return this.frameCounter;\n    }\n\n    public getSpriteType() : AnimatedSpriteType {\n        return this.spriteType;\n    }\n\n    public getState() : string {\n        return this.state;\n    }\n    \n    public setState(initState : string) : void {\n        this.state = initState;\n        this.animationFrameIndex = 0;\n        this.frameCounter = 0;\n    }\n    \n    public update(delta : number) : void {\n        this.frameCounter++;\n        \n        // HAVE WE GONE PAST THE LAST FRAME IN THE ANIMATION?\n        var currentAnimation = this.spriteType.getAnimation(this.state);\n        var currentFrame = currentAnimation[this.animationFrameIndex];\n        if (this.frameCounter > (currentFrame.duration)) {\n            this.animationFrameIndex++;\n            if (this.animationFrameIndex >= currentAnimation.length) {\n                this.animationFrameIndex = 0;\n            }\n            this.frameCounter = 0;\n        }\n    }\n\n    public contains(pointX : number, pointY : number) : boolean {\n        let spriteWidth = this.getSpriteType().getSpriteWidth();\n        let spriteHeight = this.getSpriteType().getSpriteHeight();\n        let spriteLeft = this.getPosition().getX();\n        let spriteRight = this.getPosition().getX() + spriteWidth;\n        let spriteTop = this.getPosition().getY();\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\n        if (    (pointX < spriteLeft)\n            ||  (spriteRight < pointX)\n            ||  (pointY < spriteTop)\n            ||  (spriteBottom < pointY)) {\n                return false;\n        }\n        else {\n            return true;\n        }\n    }\n    \n    /**RENAME THIS METHOD SO IT DENOTES PIXEL LOCATION IN TEXTURE */\n    public getLeft() : number {\n        return this.spriteType.getLeft(this.state, this.animationFrameIndex);\n    }\n    \n    public getTop() : number {\n        return this.spriteType.getTop(this.state, this.animationFrameIndex);\n    }\n\n    public toString() : string {\n        let summary : string =  \"{ position: (\"\n                            +   this.getPosition().getX() + \", \" + this.getPosition().getY() + \") \"\n                            +   \"(state: \" + this.getState() + \") \"\n                            +   \"(animationFrameIndex: \" + this.getAnimationFrameIndex() + \") \"\n                            +   \"(frameCounter: \" + this.getFrameCounter() + \") \";\n        return summary;\n    }\n}","import {WebGLGameTexture} from '../../rendering/WebGLGameTexture'\nimport {HashTable} from '../../data/HashTable'\n\nexport class AnimationFrame {\n    public left : number;\n    public top : number;\n    public duration : number;\n\n    constructor(initLeft : number, initTop : number, initDuration : number) {\n        this.left = initLeft;\n        this.top = initTop;\n        this.duration = initDuration;\n    }\n}\n\nexport class AnimatedSpriteType {\n    private spriteSheetTexture : WebGLGameTexture;\n    private animations : HashTable<Array<AnimationFrame>>;\n    private spriteWidth : number;\n    private spriteHeight : number;\n\n    public constructor(initSpriteSheetTexture : WebGLGameTexture, \n                initSpriteWidth : number, initSpriteHeight : number) {\n        this.spriteSheetTexture = initSpriteSheetTexture;\n        this.animations = {};\n        this.spriteWidth = initSpriteWidth;\n        this.spriteHeight = initSpriteHeight;\n    }\n\n    public addAnimation(state : string) : void {\n        this.animations[state] = new Array<AnimationFrame>();\n    }\n\n    public addAnimationFrame(state : string, index : number, frameDuration : number) : void {\n        var columns = this.spriteSheetTexture.width/this.spriteWidth;\n        var rows = this.spriteSheetTexture.height/this.spriteHeight;\n        var col = index % columns;\n        var row = Math.floor(index /  columns);\n        var left = col * this.spriteWidth;\n        var top = row * this.spriteHeight;\n        this.animations[state].push(new AnimationFrame(left, top, frameDuration));\n    }\n\n    public getSpriteWidth() : number {\n        return this.spriteWidth;\n    }\n\n    public getSpriteHeight() : number {\n        return this.spriteHeight;\n    }\n\n    public getSpriteSheetTexture() : WebGLGameTexture {\n        return this.spriteSheetTexture;\n    }\n\n    public getAnimation(state : string) : Array<AnimationFrame> {\n        return this.animations[state];\n    }\n\n    public getLeft(state : string, frameIndex : number) : number {\n        let animationFrame : AnimationFrame = this.animations[state][frameIndex];\n        return animationFrame.left;\n    }\n\n    public getTop(state : string, frameIndex : number) : number {\n        let animationFrame : AnimationFrame = this.animations[state][frameIndex];\n        return animationFrame.top;\n    }\n}","import {SceneObject} from '../SceneObject'\r\nimport { Vector3 } from '../../math/Vector3';\r\nimport { textChangeRangeIsUnchanged } from 'typescript';\r\nexport class CircleSprite extends SceneObject {\r\n    private colors : Array<Array<number>>;\r\n    private width : number;\r\n    private height : number;\r\n    private r_value : number;\r\n    private g_value : number;\r\n    private b_value : number;\r\n    public constructor(){\r\n        super();\r\n        this.colors = [[255.0,0.0,0.0],\r\n                    [0.0, 255.0, 0.0],\r\n                    [0.0, 0.0, 255.0],\r\n                    [255.0,255.0,0.0],\r\n                    [0.0, 255.0, 255.0],\r\n                    [255.0, 0.0, 255.0]];\r\n        let index = Math.floor(Math.random()*6);\r\n        this.width = 256;\r\n        this.height = 256;\r\n        this.r_value = this.colors[index][0];\r\n        this.g_value = this.colors[index][1];\r\n        this.b_value = this.colors[index][2];\r\n    }\r\n    public contains(pointX : number, pointY : number) : boolean {\r\n        let spriteWidth = this.width;\r\n        let spriteHeight = this.height;\r\n        let spriteLeft = this.getPosition().getX();\r\n        let spriteRight = this.getPosition().getX() + spriteWidth;\r\n        let spriteTop = this.getPosition().getY();\r\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\r\n        if (    (pointX < spriteLeft)\r\n            ||  (spriteRight < pointX)\r\n            ||  (pointY < spriteTop)\r\n            ||  (spriteBottom < pointY)) {\r\n                return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    public getColors() : Array<Array<number>>{\r\n        return this.colors;\r\n    }\r\n    public getWidth() : number{\r\n        return this.width;\r\n    }\r\n    public getHeight() : number{\r\n        return this.height;\r\n    }\r\n    public getR() : number{\r\n        return this.r_value;\r\n    }\r\n    public getG() : number{\r\n        return this.g_value;\r\n    }\r\n    public getB() : number{\r\n        return this.b_value;\r\n    }\r\n}","/*\n * This provides responses to UI input.\n */\nimport {AnimatedSprite} from \"../scene/sprite/AnimatedSprite\"\nimport {SceneGraph} from \"../scene/SceneGraph\"\nimport { CircleSprite } from \"../scene/sprite/CircleSprite\"\nimport { ResourceManager } from \"../files/ResourceManager\"\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType';\n\nexport class UIController {\n    private spriteToDrag : AnimatedSprite;\n    private circleToDrag : CircleSprite;\n    private scene : SceneGraph;\n    private dragOffsetX : number;\n    private dragOffsetY : number;\n    private resourceManager : ResourceManager;\n\n    public constructor() {}\n\n    public init(canvasId : string, initScene : SceneGraph, resourceManager : ResourceManager) : void {\n        this.spriteToDrag = null;\n        this.scene = initScene;\n        this.dragOffsetX = -1;\n        this.dragOffsetY = -1;\n        this.resourceManager = resourceManager;\n\n        let canvas : HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(canvasId);\n        canvas.addEventListener(\"mousedown\", this.mouseDownHandler);\n        canvas.addEventListener(\"mousemove\", this.mouseMoveHandler);\n        canvas.addEventListener(\"mouseup\", this.mouseUpHandler);\n        canvas.addEventListener(\"dblclick\", this.mouseDoubleClickHandler);\n        canvas.addEventListener(\"mousemove\", this.hoverInfo);\n    }\n\n    public mouseDownHandler = (event : MouseEvent) : void => {\n        let mousePressX : number = event.clientX;\n        let mousePressY : number = event.clientY;\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n        let circle : CircleSprite = this.scene.getCircleAt(mousePressX, mousePressY);\n        console.log(\"mousePressX: \" + mousePressX);\n        console.log(\"mousePressY: \" + mousePressY);\n        console.log(\"sprite: \" + sprite);\n        if (sprite != null) {\n            // START DRAGGING IT\n            this.spriteToDrag = sprite;\n            this.dragOffsetX = sprite.getPosition().getX() - mousePressX;\n            this.dragOffsetY = sprite.getPosition().getY() - mousePressY;\n        }else if(circle != null){\n            this.circleToDrag = circle;\n            this.dragOffsetX = circle.getPosition().getX() - mousePressX;\n            this.dragOffsetY = circle.getPosition().getY() - mousePressY;\n        }else{\n            let i : number = Math.floor(Math.random()*3);\n            console.log(i);\n            if (i === 2){\n                let circle : CircleSprite = new CircleSprite();\n                circle.getPosition().set(event.clientX - (256 / 2), event.clientY - (256 / 2), 0.0, 1.0);\n                this.scene.addCircleSprite(circle);\n            }else{\n                const DEMO_SPRITE_TYPES : string[] = [\n                    'resources/animated_sprites/RedCircleMan.json',\n                    'resources/animated_sprites/MultiColorBlock.json'\n                ];\n                const DEMO_SPRITE_STATES = {\n                    FORWARD_STATE: 'FORWARD',\n                    REVERSE_STATE: 'REVERSE'\n                };\n                let spriteTypeToUse : string = DEMO_SPRITE_TYPES[i];\n                let animatedSpriteType : AnimatedSpriteType = this.resourceManager.getAnimatedSpriteTypeById(spriteTypeToUse);\n                let spriteToAdd : AnimatedSprite = new AnimatedSprite(animatedSpriteType, DEMO_SPRITE_STATES.FORWARD_STATE);\n                spriteToAdd.getPosition().set(event.clientX - (256 / 2), event.clientY - (256 / 2), 0.0, 1.0);\n                this.scene.addAnimatedSprite(spriteToAdd);\n            }\n        }\n    }\n    \n    public mouseMoveHandler = (event : MouseEvent) : void => {\n        if (this.spriteToDrag != null) {\n            this.spriteToDrag.getPosition().set(event.clientX + this.dragOffsetX, \n                                                event.clientY + this.dragOffsetY, \n                                                this.spriteToDrag.getPosition().getZ(), \n                                                this.spriteToDrag.getPosition().getW());\n        }else if(this.circleToDrag != null){\n            this.circleToDrag.getPosition().set(event.clientX + this.dragOffsetX, \n                                                event.clientY + this.dragOffsetY, \n                                                this.circleToDrag.getPosition().getZ(), \n                                                this.circleToDrag.getPosition().getW());\n        }\n    }\n\n    public mouseUpHandler = (event : MouseEvent) : void => {\n        this.spriteToDrag = null;\n        this.circleToDrag = null;\n    }\n\n    public mouseDoubleClickHandler = (event : MouseEvent) : void => {\n        let mousePressX : number = event.clientX;\n        let mousePressY : number = event.clientY;\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n        let circle : CircleSprite = this.scene.getCircleAt(mousePressX, mousePressY);\n        if(sprite != null){\n            this.scene.remove(sprite);\n        }else if(circle != null){\n            this.scene.removeCircle(circle);\n        }\n    }\n\n    public hoverInfo = (event : MouseEvent) : void => {\n        let mousePressX : number = event.clientX;\n        let mousePressY : number = event.clientY;\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n        let circle : CircleSprite = this.scene.getCircleAt(mousePressX, mousePressY);\n        if(sprite != null){\n            this.scene.setSpriteHover(sprite);\n        }else if(circle != null){\n            this.scene.setSpriteHover(circle);\n        }else{\n            this.scene.setSpriteHover(null);\n        }\n    }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYW5pbWF0ZWRfc3ByaXRlX2RlbW8vQW5pbWF0ZWRTcHJpdGVEZW1vLnRzIiwic3JjL3dvbGZpZTJkL0dhbWUudHMiLCJzcmMvd29sZmllMmQvZmlsZXMvUmVzb3VyY2VNYW5hZ2VyLnRzIiwic3JjL3dvbGZpZTJkL2xvb3AvR2FtZUxvb3BUZW1wbGF0ZS50cyIsInNyYy93b2xmaWUyZC9tYXRoL01hdGhVdGlsaXRpZXMudHMiLCJzcmMvd29sZmllMmQvbWF0aC9NYXRyaXgudHMiLCJzcmMvd29sZmllMmQvbWF0aC9WZWN0b3IzLnRzIiwic3JjL3dvbGZpZTJkL3JlbmRlcmluZy9DaXJjbGVSZW5kZXJlci50cyIsInNyYy93b2xmaWUyZC9yZW5kZXJpbmcvVGV4dFJlbmRlcmVyLnRzIiwic3JjL3dvbGZpZTJkL3JlbmRlcmluZy9XZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0udHMiLCJzcmMvd29sZmllMmQvcmVuZGVyaW5nL1dlYkdMR2FtZVNoYWRlci50cyIsInNyYy93b2xmaWUyZC9yZW5kZXJpbmcvV2ViR0xHYW1lU3ByaXRlUmVuZGVyZXIudHMiLCJzcmMvd29sZmllMmQvcmVuZGVyaW5nL1dlYkdMR2FtZVRleHR1cmUudHMiLCJzcmMvd29sZmllMmQvc2NlbmUvU2NlbmVHcmFwaC50cyIsInNyYy93b2xmaWUyZC9zY2VuZS9TY2VuZU9iamVjdC50cyIsInNyYy93b2xmaWUyZC9zY2VuZS9zcHJpdGUvQW5pbWF0ZWRTcHJpdGUudHMiLCJzcmMvd29sZmllMmQvc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZS50cyIsInNyYy93b2xmaWUyZC9zY2VuZS9zcHJpdGUvQ2lyY2xlU3ByaXRlLnRzIiwic3JjL3dvbGZpZTJkL3VpL1VJQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUNBQTs7Ozs7O0FBTUEsSUFBQSxTQUFBLFFB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QXZCTCxRQUFBLFlBQUEsR0FBQSxZQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLypcbiAqIEFuaW1hdGVkU3ByaXRlRGVtby50cyAtIGRlbW9uc3RyYXRlcyBzb21lIHNpbXBsZSBzcHJpdGUgcmVuZGVyaW5nIGFuZCBcbiAqIGFuaW1hdGlvbiBhcyB3ZWxsIGFzIHNvbWUgYmFzaWMgbW91c2UgaW50ZXJhY3Rpb25zLiBOb3RlIHRoYXQgdGhlXG4gKiBBbmltYXRpb25TcHJpdGVEZW1vIGNsYXNzIGxvYWRzIGFuZCBjcmVhdGVzIGN1c3RvbSBjb250ZW50IGZvciB0aGVcbiAqIHB1cnBvc2Ugb2YgZGVtb25zdHJhdGluZyBiYXNpYyBmdW5jdGlvbmFsaXR5LlxuICovXG5pbXBvcnQge0dhbWV9IGZyb20gJy4uL3dvbGZpZTJkL0dhbWUnXG5pbXBvcnQge1Jlc291cmNlTWFuYWdlcn0gZnJvbSAnLi4vd29sZmllMmQvZmlsZXMvUmVzb3VyY2VNYW5hZ2VyJ1xuaW1wb3J0IHtUZXh0VG9SZW5kZXJ9IGZyb20gJy4uL3dvbGZpZTJkL3JlbmRlcmluZy9UZXh0UmVuZGVyZXInXG5pbXBvcnQge1dlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbX0gZnJvbSAnLi4vd29sZmllMmQvcmVuZGVyaW5nL1dlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSdcbmltcG9ydCB7U2NlbmVHcmFwaH0gZnJvbSAnLi4vd29sZmllMmQvc2NlbmUvU2NlbmVHcmFwaCdcbmltcG9ydCB7QW5pbWF0ZWRTcHJpdGV9IGZyb20gJy4uL3dvbGZpZTJkL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZSdcbmltcG9ydCB7QW5pbWF0ZWRTcHJpdGVUeXBlfSBmcm9tICcuLi93b2xmaWUyZC9zY2VuZS9zcHJpdGUvQW5pbWF0ZWRTcHJpdGVUeXBlJ1xuaW1wb3J0IHsgQ2lyY2xlU3ByaXRlIH0gZnJvbSAnLi4vd29sZmllMmQvc2NlbmUvc3ByaXRlL0NpcmNsZVNwcml0ZSdcbmltcG9ydCB7IFNjZW5lT2JqZWN0IH0gZnJvbSAnLi4vd29sZmllMmQvc2NlbmUvU2NlbmVPYmplY3QnXG5cbi8vIElOIFRISVMgRVhBTVBMRSBXRSdMTCBIQVZFIDIgU1BSSVRFIFRZUEVTIFRIQVQgRUFDSCBIQVZFIFRIRSBTQU1FIDIgU1RBVEVTXG4vLyBBTkQgV0hFUkUgRUFDSCBTUFJJVEUgVFlQRSBIQVMgSVRTIE9XTiBTUFJJVEUgU0hFRVRcbmNvbnN0IERFTU9fU1BSSVRFX1RZUEVTIDogc3RyaW5nW10gPSBbXG4gICAgJ3Jlc291cmNlcy9hbmltYXRlZF9zcHJpdGVzL1JlZENpcmNsZU1hbi5qc29uJyxcbiAgICAncmVzb3VyY2VzL2FuaW1hdGVkX3Nwcml0ZXMvTXVsdGlDb2xvckJsb2NrLmpzb24nXG5dO1xuY29uc3QgREVNT19TUFJJVEVfU1RBVEVTID0ge1xuICAgIEZPUldBUkRfU1RBVEU6ICdGT1JXQVJEJyxcbiAgICBSRVZFUlNFX1NUQVRFOiAnUkVWRVJTRSdcbn07XG5jb25zdCBERU1PX1RFWFRVUkVTIDogc3RyaW5nW10gPSBbXG4gICAgJ3Jlc291cmNlcy9pbWFnZXMvRWlnaHRCbG9ja3MucG5nJywgXG4gICAgJ3Jlc291cmNlcy9pbWFnZXMvUmVkQ2lyY2xlTWFuLnBuZydcbl07XG5cbmNsYXNzIEFuaW1hdGVkU3ByaXRlRGVtbyB7XG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW5pdGlhbGl6ZXMgdGhlIGFwcGxpY2F0aW9uLCBidWlsZGluZyBhbGwgdGhlIG5lZWRlZFxuICAgICAqIGdhbWUgb2JqZWN0cyBhbmQgc2V0dGluZyB0aGVtIHVwIGZvciB1c2UuXG4gICAgICovXG4gICAgcHVibGljIGJ1aWxkVGVzdFNjZW5lKGdhbWUgOiBHYW1lLCBjYWxsYmFjayA6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGxldCByZW5kZXJpbmdTeXN0ZW0gOiBXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0gPSBnYW1lLmdldFJlbmRlcmluZ1N5c3RlbSgpO1xuICAgICAgICBsZXQgc2NlbmVHcmFwaCA6IFNjZW5lR3JhcGggPSBnYW1lLmdldFNjZW5lR3JhcGgoKTtcbiAgICAgICAgbGV0IHJlc291cmNlTWFuYWdlciA6IFJlc291cmNlTWFuYWdlciA9IGdhbWUuZ2V0UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICAgIGxldCBidWlsZGVyID0gdGhpcztcbiBcbiAgICAgICAgLy8gRU1QTE9ZIFRIRSBSRVNPVVJDRSBNQU5BR0VSIFRPIEJVSUxEIEFMTCBUSEUgV09STEQgQ09OVEVOVFxuICAgICAgICByZXNvdXJjZU1hbmFnZXIubG9hZFRleHR1cmVzKERFTU9fVEVYVFVSRVMsIHJlbmRlcmluZ1N5c3RlbSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBPTkxZIEFGVEVSIEFMTCBUSEUgVEVYVFVSRVMgSEFWRSBMT0FERUQgTE9BRCBUSEUgU1BSSVRFIFRZUEVTXG4gICAgICAgICAgICByZXNvdXJjZU1hbmFnZXIubG9hZFNwcml0ZVR5cGVzKERFTU9fU1BSSVRFX1RZUEVTLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBPTkxZIEFGVEVSIEFMTCBUSEUgU1BSSVRFIFRZUEVTIEhBVkUgTE9BREVEIExPQUQgVEhFIFNQUklURVNcbiAgICAgICAgICAgICAgICBidWlsZGVyLmJ1aWxkQW5pbWF0ZWRTcHJpdGVzKHJlc291cmNlTWFuYWdlciwgc2NlbmVHcmFwaCk7XG5cbiAgICAgICAgICAgICAgICAvLyBBTkQgQlVJTEQgQUxMIFRIRSBURVhUIE9VUiBBUFAgV0lMTCBVU0VcbiAgICAgICAgICAgICAgICBidWlsZGVyLmJ1aWxkVGV4dChnYW1lKTtcblxuICAgICAgICAgICAgICAgIC8vIEVWRVJZVEhJTkcgSEFTIEJFRU4gQlVJTFQsIENBTEwgVEhFIENBTExCQUNLXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEJ1aWxkcyBhbGwgdGhlIGFuaW1hdGVkIHNwcml0ZXMgdG8gYmUgdXNlZCBieSB0aGUgYXBwbGljYXRpb24gYW5kXG4gICAgICogYWRkcyB0aGVtIHRvIHRoZSBzY2VuZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkQW5pbWF0ZWRTcHJpdGVzKHJlc291cmNlTWFuYWdlciA6IFJlc291cmNlTWFuYWdlciwgc2NlbmUgOiBTY2VuZUdyYXBoKSB7XG4gICAgICAgIGxldCBjYW52YXNXaWR0aCA6IG51bWJlciA9ICg8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lX2NhbnZhc1wiKSkud2lkdGg7XG4gICAgICAgIGxldCBjYW52YXNIZWlnaHQgOiBudW1iZXIgPSAoPEhUTUxDYW52YXNFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZV9jYW52YXNcIikpLmhlaWdodDtcblxuICAgICAgICAvLyBCVUlMRCBBIEJVTkNIIE9GIENJUkNMRSBTUFJJVEVTXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgREVNT19TUFJJVEVfVFlQRVMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNTsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNwcml0ZVR5cGVUb1VzZSA6IHN0cmluZyA9IERFTU9fU1BSSVRFX1RZUEVTW2ldO1xuICAgICAgICAgICAgICAgIGxldCBhbmltYXRlZFNwcml0ZVR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0QW5pbWF0ZWRTcHJpdGVUeXBlQnlJZChzcHJpdGVUeXBlVG9Vc2UpO1xuICAgICAgICAgICAgICAgIGxldCBzcHJpdGVUb0FkZCA6IEFuaW1hdGVkU3ByaXRlID0gbmV3IEFuaW1hdGVkU3ByaXRlKGFuaW1hdGVkU3ByaXRlVHlwZSwgREVNT19TUFJJVEVfU1RBVEVTLkZPUldBUkRfU1RBVEUpO1xuICAgICAgICAgICAgICAgIGxldCByYW5kb21YIDogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FudmFzV2lkdGgpIC0gKGFuaW1hdGVkU3ByaXRlVHlwZS5nZXRTcHJpdGVXaWR0aCgpLzIpO1xuICAgICAgICAgICAgICAgIGxldCByYW5kb21ZIDogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FudmFzSGVpZ2h0KSAtIChhbmltYXRlZFNwcml0ZVR5cGUuZ2V0U3ByaXRlSGVpZ2h0KCkvMik7XG4gICAgICAgICAgICAgICAgc3ByaXRlVG9BZGQuZ2V0UG9zaXRpb24oKS5zZXQocmFuZG9tWCwgcmFuZG9tWSwgMC4wLCAxLjApO1xuICAgICAgICAgICAgICAgIHNjZW5lLmFkZEFuaW1hdGVkU3ByaXRlKHNwcml0ZVRvQWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB6ID0gMDsgeiA8IDU7IHorKyl7XG4gICAgICAgICAgICBsZXQgY2lyY2xlIDogQ2lyY2xlU3ByaXRlID0gbmV3IENpcmNsZVNwcml0ZSgpO1xuICAgICAgICAgICAgbGV0IHJhbmRvbVggOiBudW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjYW52YXNXaWR0aCkgLSAoY2lyY2xlLmdldFdpZHRoKCkvMik7XG4gICAgICAgICAgICBsZXQgcmFuZG9tWSA6IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhbnZhc0hlaWdodCkgLSAoY2lyY2xlLmdldEhlaWdodCgpLzIpO1xuICAgICAgICAgICAgY2lyY2xlLmdldFBvc2l0aW9uKCkuc2V0KHJhbmRvbVgsIHJhbmRvbVksIDAuMCwgMS4wKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZENpcmNsZVNwcml0ZShjaXJjbGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBCdWlsZHMgYWxsIHRoZSB0ZXh0IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZFRleHQoZ2FtZSA6IEdhbWUpIHtcbiAgICAgICAgbGV0IHNjZW5lR3JhcGggOiBTY2VuZUdyYXBoID0gZ2FtZS5nZXRTY2VuZUdyYXBoKCk7XG4gICAgICAgIGxldCBudW1TcHJpdGVzVGV4dCA9IG5ldyBUZXh0VG9SZW5kZXIoXCJOdW0gU3ByaXRlc1wiLCBcIlwiLCAyMCwgNTAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbnVtU3ByaXRlc1RleHQudGV4dCA9IFwiTnVtYmVyIG9mIFNwcml0ZXM6IFwiICsgc2NlbmVHcmFwaC5nZXROdW1TcHJpdGVzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3ByaXRlSW5mbyA9IG5ldyBUZXh0VG9SZW5kZXIoXCJTcHJpdGUgSW5mb1wiLCBcIlwiLCAyMCwgNzAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQgc3ByaXRlIDogU2NlbmVPYmplY3QgPSBnYW1lLmdldFNjZW5lR3JhcGgoKS5nZXRTcHJpdGVIb3ZlcigpO1xuICAgICAgICAgICAgaWYgKHNwcml0ZSA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgc3ByaXRlSW5mby50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIH1lbHNlIGlmKHNwcml0ZSBpbnN0YW5jZW9mIEFuaW1hdGVkU3ByaXRlKXtcbiAgICAgICAgICAgICAgICBsZXQgaW5mbyA6IHN0cmluZyA9IFwicG9zaXRpb246IChcIiBcbiAgICAgICAgICAgICAgICArICAgc3ByaXRlLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgXCIsIFwiICsgc3ByaXRlLmdldFBvc2l0aW9uKCkuZ2V0WSgpICsgXCIpICAgXCJcbiAgICAgICAgICAgICAgICArICAgXCJTdGF0ZTogXCIgKyBzcHJpdGUuZ2V0U3RhdGUoKSArIFwiICAgXCJcbiAgICAgICAgICAgICAgICArICAgXCJBbmltYXRpb24gRnJhbWUgSW5kZXg6IFwiICsgc3ByaXRlLmdldEFuaW1hdGlvbkZyYW1lSW5kZXgoKSArIFwiICAgXCJcbiAgICAgICAgICAgICAgICArICAgXCJGcmFtZSBDb3VudDogXCIgKyBzcHJpdGUuZ2V0RnJhbWVDb3VudGVyKCk7XG4gICAgICAgICAgICAgICAgc3ByaXRlSW5mby50ZXh0ID0gaW5mbztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGxldCBjaXJjbGUgOiBDaXJjbGVTcHJpdGUgPSA8Q2lyY2xlU3ByaXRlPnNwcml0ZTtcbiAgICAgICAgICAgICAgICBsZXQgaW5mbyA6IHN0cmluZyA9IFwicG9zaXRpb246IChcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgY2lyY2xlLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgXCIsIFwiICsgY2lyY2xlLmdldFBvc2l0aW9uKCkuZ2V0WSgpICsgXCIpICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgIFwiUjogXCIgKyBjaXJjbGUuZ2V0UigpICsgXCIgICBHOiBcIiArIGNpcmNsZS5nZXRHKCkgKyBcIiAgIEI6XCIgKyBjaXJjbGUuZ2V0QigpO1xuICAgICAgICAgICAgICAgIHNwcml0ZUluZm8udGV4dCA9IGluZm87XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGV4dFJlbmRlcmVyID0gZ2FtZS5nZXRSZW5kZXJpbmdTeXN0ZW0oKS5nZXRUZXh0UmVuZGVyZXIoKTtcbiAgICAgICAgdGV4dFJlbmRlcmVyLmFkZFRleHRUb1JlbmRlcihudW1TcHJpdGVzVGV4dCk7XG4gICAgICAgIHRleHRSZW5kZXJlci5hZGRUZXh0VG9SZW5kZXIoc3ByaXRlSW5mbyk7XG4gICAgfVxufVxuXG4vLyBUSElTIElTIFRIRSBFTlRSWSBQT0lOVCBJTlRPIE9VUiBBUFBMSUNBVElPTiwgV0UgTUFLRVxuLy8gVEhFIEdhbWUgT0JKRUNUIEFORCBJTklUSUFMSVpFIElUIFdJVEggVEhFIENBTlZBU0VTXG5sZXQgZ2FtZSA9IG5ldyBHYW1lKCk7XG5nYW1lLmluaXQoXCJnYW1lX2NhbnZhc1wiLCBcInRleHRfY2FudmFzXCIpO1xuXG4vLyBCVUlMRCBUSEUgR0FNRSBTQ0VORVxubGV0IGRlbW8gPSBuZXcgQW5pbWF0ZWRTcHJpdGVEZW1vKCk7XG5kZW1vLmJ1aWxkVGVzdFNjZW5lKGdhbWUsIGZ1bmN0aW9uKCkge1xuICAgIC8vIEFORCBTVEFSVCBUSEUgR0FNRSBMT09QXG4gICAgZ2FtZS5zdGFydCgpO1xufSk7IiwiLypcbiAqIEdhbWUgaXMgdGhlIGZvY2FsIHBvaW50IG9mIHRoZSBhcHBsaWNhdGlvbiwgaXQgaGFzIDQgc3Vic3lzdGVtcyxcbiAqIHRoZSByZXNvdXJjZSBtYW5hZ2VyLCB0aGUgc2NlbmUgZ3JhcGgsIHRoZSByZW5kZXJpbmcgc3lzdGVtLCBhbmRcbiAqIHRoZSBVSSBjb250cm9sbGVyLiBJbiBhZGRpdGlvbiBpdCBzZXJ2ZXMgYXMgdGhlIGdhbWUgbG9vcCwgcHJvdmlkaW5nXG4gKiBib3RoIGFuIHVwZGF0ZSBhbmQgZHJhdyBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBvbiBhIHNjaGVkdWxlLlxuICovXG5pbXBvcnQge0dhbWVMb29wVGVtcGxhdGV9IGZyb20gJy4vbG9vcC9HYW1lTG9vcFRlbXBsYXRlJ1xuaW1wb3J0IHtXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW19IGZyb20gJy4vcmVuZGVyaW5nL1dlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSdcbmltcG9ydCB7U2NlbmVHcmFwaH0gZnJvbSAnLi9zY2VuZS9TY2VuZUdyYXBoJ1xuaW1wb3J0IHtBbmltYXRlZFNwcml0ZX0gZnJvbSAnLi9zY2VuZS9zcHJpdGUvQW5pbWF0ZWRTcHJpdGUnXG5pbXBvcnQge1Jlc291cmNlTWFuYWdlcn0gZnJvbSAnLi9maWxlcy9SZXNvdXJjZU1hbmFnZXInXG5pbXBvcnQge1VJQ29udHJvbGxlcn0gZnJvbSAnLi91aS9VSUNvbnRyb2xsZXInXG5pbXBvcnQgeyBDaXJjbGVTcHJpdGUgfSBmcm9tICcuL3NjZW5lL3Nwcml0ZS9DaXJjbGVTcHJpdGUnXG5cbmV4cG9ydCBjbGFzcyBHYW1lIGV4dGVuZHMgR2FtZUxvb3BUZW1wbGF0ZSB7XG4gICAgcHJpdmF0ZSByZXNvdXJjZU1hbmFnZXIgOiBSZXNvdXJjZU1hbmFnZXIgPSBuZXcgUmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgcHJpdmF0ZSBzY2VuZUdyYXBoIDogU2NlbmVHcmFwaCA9IG5ldyBTY2VuZUdyYXBoKCk7XG4gICAgcHJpdmF0ZSByZW5kZXJpbmdTeXN0ZW0gOiBXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0gPSBuZXcgV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtKCk7XG4gICAgcHJpdmF0ZSB1aUNvbnRyb2xsZXIgOiBVSUNvbnRyb2xsZXIgPSBuZXcgVUlDb250cm9sbGVyKCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlbmRlcmluZ1N5c3RlbSgpIDogV2ViR0xHYW1lUmVuZGVyaW5nU3lzdGVtIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyaW5nU3lzdGVtO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZXNvdXJjZU1hbmFnZXIoKSA6IFJlc291cmNlTWFuYWdlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc291cmNlTWFuYWdlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2NlbmVHcmFwaCgpIDogU2NlbmVHcmFwaCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjZW5lR3JhcGg7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQoZ2FtZUNhbnZhc0lkIDogc3RyaW5nLCB0ZXh0Q2FudmFzSWQgOiBzdHJpbmcpIDogdm9pZCB7XG4gICAgICAgIHRoaXMucmVuZGVyaW5nU3lzdGVtLmluaXQoZ2FtZUNhbnZhc0lkLCB0ZXh0Q2FudmFzSWQpO1xuICAgICAgICB0aGlzLnVpQ29udHJvbGxlci5pbml0KGdhbWVDYW52YXNJZCwgdGhpcy5zY2VuZUdyYXBoLCB0aGlzLnJlc291cmNlTWFuYWdlcik7XG4gICAgfVxuXG4gICAgcHVibGljIGJlZ2luKCkgOiB2b2lkIHtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFRoaXMgZHJhd3MgdGhlIGdhbWUuIE5vdGUgdGhhdCB3ZSBhcmUgbm90IGN1cnJlbnRseSB1c2luZyB0aGUgXG4gICAgICogaW50ZXJwb2xhdGlvbiB2YWx1ZSwgYnV0IGNvdWxkIG9uY2UgcGh5c2ljcyBpcyBpbnZvbHZlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHJhdyhpbnRlcnBvbGF0aW9uUGVyY2VudGFnZSA6IG51bWJlcikgOiB2b2lkIHtcbiAgICAgICAgLy8gR0VUIFRIRSBWSVNJQkxFIFNFVCBGUk9NIFRIRSBTQ0VORSBHUkFQSFxuICAgICAgICBsZXQgdmlzaWJsZVNwcml0ZXMgOiBBcnJheTxBbmltYXRlZFNwcml0ZT47XG4gICAgICAgIHZpc2libGVTcHJpdGVzID0gPEFycmF5PEFuaW1hdGVkU3ByaXRlPj50aGlzLnNjZW5lR3JhcGguc2NvcGUoKTtcbiAgICAgICAgbGV0IHZpc2libGVDaXJjbGVzIDogQXJyYXk8Q2lyY2xlU3ByaXRlPjtcbiAgICAgICAgdmlzaWJsZUNpcmNsZXMgPSA8QXJyYXk8Q2lyY2xlU3ByaXRlPj50aGlzLnNjZW5lR3JhcGguY2lyY2xlU2NvcGUoKTtcblxuICAgICAgICAvLyBSRU5ERVIgVEhFIFZJU0lCTEUgU0VULCBXSElDSCBTSE9VTEQgQUxMIEJFIFJFTkRFUkFCTEVcbiAgICAgICAgdGhpcy5yZW5kZXJpbmdTeXN0ZW0ucmVuZGVyKHZpc2libGVTcHJpdGVzLCB2aXNpYmxlQ2lyY2xlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc2NlbmUuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZShkZWx0YSA6IG51bWJlcikgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zY2VuZUdyYXBoLnVwZGF0ZShkZWx0YSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIEZQUyBjb3VudGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyBlbmQoZnBzIDogbnVtYmVyLCBwYW5pYyA6IGJvb2xlYW4pIDogdm9pZCB7XG4gICAgICAgIGlmIChwYW5pYykge1xuICAgICAgICAgICAgdmFyIGRpc2NhcmRlZFRpbWUgPSBNYXRoLnJvdW5kKHRoaXMucmVzZXRGcmFtZURlbHRhKCkpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdNYWluIGxvb3AgcGFuaWNrZWQsIHByb2JhYmx5IGJlY2F1c2UgdGhlIGJyb3dzZXIgdGFiIHdhcyBwdXQgaW4gdGhlIGJhY2tncm91bmQuIERpc2NhcmRpbmcgJyArIGRpc2NhcmRlZFRpbWUgKyAnbXMnKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvKlxuICogUmVzb3VyY2VNYW5hZ2VyLmpzXG4gKlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgYWxsIHNoYXJlZCByZXNvdXJjZXMuIFRoaXMgbWVhbnMgdGhpbmdzXG4gKiB0aGF0IG1heSBiZSBuZWVkZWQgYnkgbXVsdGlwbGUgZ2FtZSBvYmplY3RzLiBJbiB0aGlzIGFwcGxpY2F0aW9uIHRoaXMgbWVhbnNcbiAqIHRleHR1cmVzIGZvciB0aGUgcHVycG9zZSBvZiBHUFUgcmVuZGVyaW5nIGFuZCBhbmltYXRlZCBzcHJpdGUgdHlwZXMuXG4gKi9cbmltcG9ydCB7U3ByaXRlVHlwZURhdGEsIEFuaW1hdGlvblN0YXRlRGF0YSwgQW5pbWF0aW9uRnJhbWVEYXRhfSBmcm9tICcuL1Nwcml0ZVR5cGVEYXRhJ1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4uL2RhdGEvSGFzaFRhYmxlJ1xuaW1wb3J0IHtXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW19IGZyb20gJy4uL3JlbmRlcmluZy9XZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0nXG5pbXBvcnQge1dlYkdMR2FtZVRleHR1cmV9IGZyb20gJy4uL3JlbmRlcmluZy9XZWJHTEdhbWVUZXh0dXJlJ1xuaW1wb3J0IHtBbmltYXRlZFNwcml0ZVR5cGV9IGZyb20gJy4uL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZVR5cGUnXG5cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1hbmFnZXIge1xuICAgIC8vIEdBTUUgVEVYVFVSRVMgXG4gICAgcHJpdmF0ZSBnYW1lVGV4dHVyZXMgOiBBcnJheTxXZWJHTEdhbWVUZXh0dXJlPiA9IG5ldyBBcnJheSgpO1xuICAgIHByaXZhdGUgZ2FtZVRleHR1cmVJZHMgOiBIYXNoVGFibGU8bnVtYmVyPiA9IHt9O1xuICAgIHByaXZhdGUgbnVtVGV4dHVyZXNUb0xvYWQgOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBudW1UZXh0dXJlc0xvYWRlZCA6IG51bWJlcjtcblxuICAgIC8vIEFOSU1BVEVEIFNQUklURSBUWVBFU1xuICAgIHByaXZhdGUgZ2FtZVNwcml0ZVR5cGVzIDogQXJyYXk8QW5pbWF0ZWRTcHJpdGVUeXBlPiA9IG5ldyBBcnJheSgpO1xuICAgIHByaXZhdGUgZ2FtZVNwcml0ZVR5cGVJZHMgOiBIYXNoVGFibGU8bnVtYmVyPiA9IHt9O1xuICAgIHByaXZhdGUgbnVtU3ByaXRlVHlwZXNUb0xvYWQgOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBudW1TcHJpdGVUeXBlc0xvYWRlZCA6IG51bWJlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICAvLyBBQ0NFU1NPUiBNRVRIT0RTXG5cbiAgICBwdWJsaWMgZ2V0QW5pbWF0ZWRTcHJpdGVUeXBlQnlJbmRleCh0eXBlSW5kZXggOiBudW1iZXIpIDogQW5pbWF0ZWRTcHJpdGVUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZVNwcml0ZVR5cGVzW3R5cGVJbmRleF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFuaW1hdGVkU3ByaXRlVHlwZUJ5SWQodHlwZUlkIDogc3RyaW5nKSA6IEFuaW1hdGVkU3ByaXRlVHlwZSB7XG4gICAgICAgIGxldCB0eXBlSW5kZXggOiBudW1iZXIgPSB0aGlzLmdhbWVTcHJpdGVUeXBlSWRzW3R5cGVJZF07XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1hdGVkU3ByaXRlVHlwZUJ5SW5kZXgodHlwZUluZGV4KTtcbiAgICB9XG4gICAgXG4gICAgLy8gQUREUyBBIE5FVyBTUFJJVEUgVFlQRSBcbiAgICBwdWJsaWMgYWRkQW5pbWF0ZWRTcHJpdGVUeXBlKHR5cGVJZCA6IG51bWJlciwgc3ByaXRlVHlwZSA6IEFuaW1hdGVkU3ByaXRlVHlwZSkgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nYW1lU3ByaXRlVHlwZXNbdHlwZUlkXSA9IHNwcml0ZVR5cGU7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBMb2FkcyBhbGwgdGhlIHRleHR1cmVzIGxpc3RlZCBpbiB0aGUgdGV4dHVyZVBhdGhzIGFyZ3VtZW50IGFuZCBvbmNlXG4gICAgICogdGhhdCBpcyBkb25lIGl0IGNhbGxzIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFRleHR1cmVzKCAgICB0ZXh0dXJlUGF0aHMgOiBBcnJheTxzdHJpbmc+LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmdTeXN0ZW0gOiBXZWJHTEdhbWVSZW5kZXJpbmdTeXN0ZW0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIDogRnVuY3Rpb24pIDogdm9pZCB7XG4gICAgICAgIC8vIFRIRU4gTE9BRCBUSEUgVEVYVFVSRVMgV0UnTEwgQkUgVVNJTkdcbiAgICAgICAgdGhpcy5udW1UZXh0dXJlc1RvTG9hZCA9IHRleHR1cmVQYXRocy5sZW5ndGg7XG4gICAgICAgIHRoaXMubnVtVGV4dHVyZXNMb2FkZWQgPSAwO1xuICAgICAgICBsZXQgdGhpc1Jlc291cmNlTWFuYWdlciA9IHRoaXM7XG4gICAgICAgIGxldCBzdGFydE51bVRleHR1cmVzID0gdGhpcy5nYW1lVGV4dHVyZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpIDogbnVtYmVyID0gMDsgaSA8IHRoaXMubnVtVGV4dHVyZXNUb0xvYWQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHRleHR1cmVUb0xvYWQgOiBXZWJHTEdhbWVUZXh0dXJlID0gbmV3IFdlYkdMR2FtZVRleHR1cmUoKTtcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlSWQgPSBzdGFydE51bVRleHR1cmVzICsgaTtcbiAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIuZ2FtZVRleHR1cmVzW3RleHR1cmVJZF0gPSB0ZXh0dXJlVG9Mb2FkO1xuICAgICAgICAgICAgdGhpc1Jlc291cmNlTWFuYWdlci5nYW1lVGV4dHVyZUlkc1t0ZXh0dXJlUGF0aHNbaV1dID0gdGV4dHVyZUlkO1xuICAgICAgICAgICAgdGhpc1Jlc291cmNlTWFuYWdlci5sb2FkSW1hZ2UodGV4dHVyZVBhdGhzW2ldLCB0ZXh0dXJlSWQsIGZ1bmN0aW9uKGlkIDogbnVtYmVyLCBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJpbmdTeXN0ZW0uaW5pdFdlYkdMVGV4dHVyZSh0ZXh0dXJlVG9Mb2FkLCBpZCwgaW1hZ2UsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmNvbXBsZXRlTG9hZGluZ1RleHR1cmUoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgICAqIExvYWRzIGFsbCB0aGUgc3ByaXRlIHR5cGVzIGxpc3RlZCBpbiB0aGUgc3ByaXRlVHlwZVBhdGhzIGFyZ3VtZW50IGFuZCBvbmNlXG4gICAgICogdGhhdCBpcyBkb25lIGl0IGNhbGxzIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFNwcml0ZVR5cGVzKHNwcml0ZVR5cGVQYXRocyA6IEFycmF5PHN0cmluZz4sIFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA6IEZ1bmN0aW9uKSA6IHZvaWQge1xuICAgICAgICAvLyBUSEVOIExPQUQgVEhFIFRFWFRVUkVTIFdFJ0xMIEJFIFVTSU5HXG4gICAgICAgIHRoaXMubnVtU3ByaXRlVHlwZXNUb0xvYWQgPSBzcHJpdGVUeXBlUGF0aHMubGVuZ3RoO1xuICAgICAgICB0aGlzLm51bVNwcml0ZVR5cGVzTG9hZGVkID0gMDtcbiAgICAgICAgbGV0IHRoaXNSZXNvdXJjZU1hbmFnZXIgPSB0aGlzO1xuICAgICAgICBsZXQgc3RhcnROdW1TcHJpdGVUeXBlcyA9IHRoaXMuZ2FtZVNwcml0ZVR5cGVzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA6IG51bWJlciA9IDA7IGkgPCB0aGlzLm51bVNwcml0ZVR5cGVzVG9Mb2FkOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzcHJpdGVUeXBlSWQgPSBzdGFydE51bVNwcml0ZVR5cGVzICsgaTtcbiAgICAgICAgICAgIHRoaXMubG9hZFNwcml0ZVR5cGUoc3ByaXRlVHlwZVBhdGhzW2ldLCBzcHJpdGVUeXBlSWQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIuY29tcGxldGVMb2FkaW5nU3ByaXRlVHlwZShjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBSSVZBVEUgSEVMUEVSIE1FVEhPRFNcblxuICAgIC8vIExPQURTIEEgTkVXIEpTT04gRklMRSBBTkQgVVBPTiBDT01QTEVUSU9OIENBTExTIFRIRSBjYWxsYmFjayBGVU5DVElPTlxuICAgIHByaXZhdGUgbG9hZEpzb25GaWxlKHRlc3RGaWxlUGF0aCA6IHN0cmluZywgY2FsbGJhY2sgOiBGdW5jdGlvbikgOiB2b2lkIHtcbiAgICAgICAgbGV0IHhvYmogOiBYTUxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4b2JqLm92ZXJyaWRlTWltZVR5cGUoXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICB4b2JqLm9wZW4oJ0dFVCcsIHRlc3RGaWxlUGF0aCwgdHJ1ZSk7XG4gICAgICAgIHhvYmoub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCh4b2JqLnJlYWR5U3RhdGUgPT0gNCkgJiYgKHhvYmouc3RhdHVzID09IDIwMCkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh4b2JqLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhvYmouc2VuZChudWxsKTtcbiAgICB9XG5cbiAgICAvLyBDSEVDS1MgVE8gU0VFIElGIEFMTCBURVhUVVJFIExPQURJTkcgSVMgQ09NUExFVEUsIElGIFlFUywgY2FsbGJhY2sgSVMgSU5WT0tFRFxuICAgIHByaXZhdGUgY29tcGxldGVMb2FkaW5nVGV4dHVyZShjYWxsYmFjayA6IEZ1bmN0aW9uKSA6IHZvaWQge1xuICAgICAgICB0aGlzLm51bVRleHR1cmVzTG9hZGVkKys7XG4gICAgICAgIGlmICh0aGlzLm51bVRleHR1cmVzTG9hZGVkID09PSB0aGlzLm51bVRleHR1cmVzVG9Mb2FkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgYW4gSW1hZ2UgaW50byBSQU0gYW5kIG9uY2UgdGhhdCBwcm9jZXNzIGlzIGNvbXBsZXRlIGl0XG4gICAgICogY2FsbHMgdGhlIGNhbGxiYWNrIG1ldGhvZCBhcmd1bWVudCwgcHJlc3VtYWJseSB0byB0aGVuIGxvYWRcbiAgICAgKiBpdCBpbnRvIEdQVSBtZW1vcnkuXG4gICAgICovXG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2UocGF0aCA6IHN0cmluZywgaWQgOiBudW1iZXIsIGNhbGxiYWNrIDogRnVuY3Rpb24pIDogdm9pZCB7XG4gICAgICAgIC8vIE1BS0UgVEhFIElNQUdFXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgIC8vIE9OQ0UgVEhFIElNQUdFIExPQURJTkcgSVMgQ09NUExFVEVELCBUSEUgQ0FMTEJBQ0sgV0lMTCBHRVQgQ0FMTEVEXG4gICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsgXG4gICAgICAgICAgICBjYWxsYmFjayhpZCwgaW1hZ2UpOyBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNUQVJUIElNQUdFIExPQURJTkdcbiAgICAgICAgaW1hZ2Uuc3JjID0gcGF0aDtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gbG9hZHMgYSBzaW5nbGUgc3ByaXRlIHR5cGUgcmVzb3VyY2UgZnJvbSBhIEpTT04gZmlsZSBhbmQgdXBvblxuICAgICAqIGNvbXBsZXRpb24gY2FsbHMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHByaXZhdGUgbG9hZFNwcml0ZVR5cGUoanNvbkZpbGVQYXRoIDogc3RyaW5nLCBzcHJpdGVUeXBlSWQgOiBudW1iZXIsIGNhbGxiYWNrIDogRnVuY3Rpb24pIDogdm9pZCB7XG4gICAgICAgIGxldCB0aGlzUmVzb3VyY2VNYW5hZ2VyIDogUmVzb3VyY2VNYW5hZ2VyID0gdGhpcztcbiAgICAgICAgdGhpcy5sb2FkSnNvbkZpbGUoanNvbkZpbGVQYXRoLCBmdW5jdGlvbihqc29uVGV4dCA6IHN0cmluZykge1xuICAgICAgICAgICAgbGV0IHNwcml0ZVR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGUgPSB0aGlzUmVzb3VyY2VNYW5hZ2VyLmxvYWRTcHJpdGVUeXBlRGF0YShqc29uVGV4dCk7XG4gICAgICAgICAgICB0aGlzUmVzb3VyY2VNYW5hZ2VyLmdhbWVTcHJpdGVUeXBlc1tzcHJpdGVUeXBlSWRdID0gc3ByaXRlVHlwZTtcbiAgICAgICAgICAgIHRoaXNSZXNvdXJjZU1hbmFnZXIuZ2FtZVNwcml0ZVR5cGVJZHNbanNvbkZpbGVQYXRoXSA9IHNwcml0ZVR5cGVJZDtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogVGhpcyBoZWxwZXIgZnVuY3Rpb24gbG9hZHMgYWxsIHRoZSBqc29uIHRleHQgaW50byBhbiBBbmltYXRlZFNwcml0ZVR5cGVcbiAgICAgKiBvYmplY3QgYW5kIHJldHVybnMgaXQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBsb2FkU3ByaXRlVHlwZURhdGEgPSAoanNvblRleHQgOiBzdHJpbmcpIDogQW5pbWF0ZWRTcHJpdGVUeXBlID0+IHtcbiAgICAgICAgbGV0IGpzb25EYXRhIDogU3ByaXRlVHlwZURhdGEgPSA8U3ByaXRlVHlwZURhdGE+SlNPTi5wYXJzZShqc29uVGV4dCk7XG4gICAgICAgIGxldCB0ZXh0dXJlUGF0aCA9IGpzb25EYXRhLnNwcml0ZVNoZWV0SW1hZ2U7XG4gICAgICAgIGxldCB0ZXh0dXJlSWQgPSB0aGlzLmdhbWVUZXh0dXJlSWRzW3RleHR1cmVQYXRoXTtcbiAgICAgICAgbGV0IHRleHR1cmUgOiBXZWJHTEdhbWVUZXh0dXJlID0gdGhpcy5nYW1lVGV4dHVyZXNbdGV4dHVyZUlkXTtcbiAgICAgICAgbGV0IHNwcml0ZVdpZHRoIDogbnVtYmVyID0ganNvbkRhdGEuc3ByaXRlV2lkdGg7XG4gICAgICAgIGxldCBzcHJpdGVIZWlnaHQgOiBudW1iZXIgPSBqc29uRGF0YS5zcHJpdGVIZWlnaHQ7XG4gICAgICAgIGxldCBhbmltYXRlZFNwcml0ZVR5cGUgPSBuZXcgQW5pbWF0ZWRTcHJpdGVUeXBlKHRleHR1cmUsIHNwcml0ZVdpZHRoLCBzcHJpdGVIZWlnaHQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGpzb25EYXRhLmFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBhbmltYXRpb24gPSA8QW5pbWF0aW9uU3RhdGVEYXRhPmpzb25EYXRhLmFuaW1hdGlvbnNbaV07XG4gICAgICAgICAgICBhbmltYXRlZFNwcml0ZVR5cGUuYWRkQW5pbWF0aW9uKGFuaW1hdGlvbi5uYW1lKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYW5pbWF0aW9uLmZyYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IGFuaW1hdGlvbi5mcmFtZXNbal07XG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRTcHJpdGVUeXBlLmFkZEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbi5uYW1lLCBmcmFtZS5pbmRleCwgZnJhbWUuZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRlZFNwcml0ZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gQ0hFQ0tTIFRPIFNFRSBJRiBBTEwgU1BSSVRFIFRZUEUgTE9BRElORyBJUyBDT01QTEVURSwgSUYgWUVTLCBjYWxsYmFjayBJUyBJTlZPS0VEXG4gICAgcHJpdmF0ZSBjb21wbGV0ZUxvYWRpbmdTcHJpdGVUeXBlKGNhbGxiYWNrIDogRnVuY3Rpb24pIDogdm9pZCB7XG4gICAgICAgIHRoaXMubnVtU3ByaXRlVHlwZXNMb2FkZWQrKztcbiAgICAgICAgaWYgKHRoaXMubnVtU3ByaXRlVHlwZXNMb2FkZWQgPT09IHRoaXMubnVtU3ByaXRlVHlwZXNUb0xvYWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9ICAgIFxufSIsImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHYW1lTG9vcFRlbXBsYXRlIHtcbiAgICAvLyBBTEwgSU5TVEFOQ0UgVkFSSUFCTEVTIFdJTEwgQkUgSU5JVElBTElaRUQgVklBIFRIRSBDT05TVFJVQ1RPUlxuICAgIHByaXZhdGUgZnBzOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzaW11bGF0aW9uVGltZXN0ZXA6IG51bWJlcjtcbiAgICBwcml2YXRlIGZyYW1lRGVsdGE6IG51bWJlcjtcbiAgICBwcml2YXRlIGxhc3RGcmFtZVRpbWVNczogbnVtYmVyO1xuICAgIHByaXZhdGUgZnBzQWxwaGE6IG51bWJlcjtcbiAgICBwcml2YXRlIGZwc1VwZGF0ZUludGVydmFsOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBsYXN0RnBzVXBkYXRlOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBmcmFtZXNTaW5jZUxhc3RGcHNVcGRhdGU6IG51bWJlcjtcbiAgICBwcml2YXRlIG51bVVwZGF0ZVN0ZXBzOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBtaW5GcmFtZURlbGF5OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBydW5uaW5nOiBib29sZWFuO1xuICAgIHByaXZhdGUgc3RhcnRlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIHBhbmljOiBib29sZWFuO1xuICAgIHByaXZhdGUgcmFmOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQW4gZXhwb25lbnRpYWwgbW92aW5nIGF2ZXJhZ2Ugb2YgdGhlIGZyYW1lcyBwZXIgc2Vjb25kLlxuICAgICAgICB0aGlzLmZwcyA9IDYwO1xuXG4gICAgICAgIC8vIFRoZSBhbW91bnQgb2YgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0byBzaW11bGF0ZSBlYWNoIHRpbWUgdXBkYXRlKCkgcnVucy5cbiAgICAgICAgLy8gU2VlIGBNYWluTG9vcC5zZXRTaW11bGF0aW9uVGltZXN0ZXAoKWAgZm9yIGRldGFpbHMuXG4gICAgICAgIHRoaXMuc2ltdWxhdGlvblRpbWVzdGVwID0gMTAwMCAvIHRoaXMuZnBzO1xuXG4gICAgICAgIC8vIFRoZSBjdW11bGF0aXZlIGFtb3VudCBvZiBpbi1hcHAgdGltZSB0aGF0IGhhc24ndCBiZWVuIHNpbXVsYXRlZCB5ZXQuXG4gICAgICAgIC8vIFNlZSB0aGUgY29tbWVudHMgaW5zaWRlIGFuaW1hdGUoKSBmb3IgZGV0YWlscy5cbiAgICAgICAgdGhpcy5mcmFtZURlbHRhID0gMDtcblxuICAgICAgICAvLyBUaGUgdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyBvZiB0aGUgbGFzdCB0aW1lIHRoZSBtYWluIGxvb3Agd2FzIHJ1bi5cbiAgICAgICAgLy8gVXNlZCB0byBjb21wdXRlIHRoZSB0aW1lIGVsYXBzZWQgYmV0d2VlbiBmcmFtZXMuXG4gICAgICAgIHRoaXMubGFzdEZyYW1lVGltZU1zID0gMDtcblxuICAgICAgICAvLyBBIGZhY3RvciB0aGF0IGFmZmVjdHMgaG93IGhlYXZpbHkgdG8gd2VpZ2h0IG1vcmUgcmVjZW50IHNlY29uZHMnXG4gICAgICAgIC8vIHBlcmZvcm1hbmNlIHdoZW4gY2FsY3VsYXRpbmcgdGhlIGF2ZXJhZ2UgZnJhbWVzIHBlciBzZWNvbmQuIFZhbGlkIHZhbHVlc1xuICAgICAgICAvLyByYW5nZSBmcm9tIHplcm8gdG8gb25lIGluY2x1c2l2ZS4gSGlnaGVyIHZhbHVlcyByZXN1bHQgaW4gd2VpZ2h0aW5nIG1vcmVcbiAgICAgICAgLy8gcmVjZW50IHNlY29uZHMgbW9yZSBoZWF2aWx5LlxuICAgICAgICB0aGlzLmZwc0FscGhhID0gMC45O1xuXG4gICAgICAgIC8vIFRoZSBtaW5pbXVtIGR1cmF0aW9uIGJldHdlZW4gdXBkYXRlcyB0byB0aGUgZnJhbWVzLXBlci1zZWNvbmQgZXN0aW1hdGUuXG4gICAgICAgIC8vIEhpZ2hlciB2YWx1ZXMgaW5jcmVhc2UgYWNjdXJhY3ksIGJ1dCByZXN1bHQgaW4gc2xvd2VyIHVwZGF0ZXMuXG4gICAgICAgIHRoaXMuZnBzVXBkYXRlSW50ZXJ2YWwgPSAxMDAwO1xuXG4gICAgICAgIC8vIFRoZSB0aW1lc3RhbXAgKGluIG1pbGxpc2Vjb25kcykgb2YgdGhlIGxhc3QgdGltZSB0aGUgYGZwc2AgbW92aW5nXG4gICAgICAgIC8vIGF2ZXJhZ2Ugd2FzIHVwZGF0ZWQuXG4gICAgICAgIHRoaXMubGFzdEZwc1VwZGF0ZSA9IDA7XG5cbiAgICAgICAgLy8gVGhlIG51bWJlciBvZiBmcmFtZXMgZGVsaXZlcmVkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGBmcHNgIG1vdmluZ1xuICAgICAgICAvLyBhdmVyYWdlIHdhcyB1cGRhdGVkIChpLmUuIHNpbmNlIGBsYXN0RnBzVXBkYXRlYCkuXG4gICAgICAgIHRoaXMuZnJhbWVzU2luY2VMYXN0RnBzVXBkYXRlID0gMDtcblxuICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHRpbWVzIHVwZGF0ZSgpIGlzIGNhbGxlZCBpbiBhIGdpdmVuIGZyYW1lLiBUaGlzIGlzIG9ubHlcbiAgICAgICAgLy8gcmVsZXZhbnQgaW5zaWRlIG9mIGFuaW1hdGUoKSwgYnV0IGEgcmVmZXJlbmNlIGlzIGhlbGQgZXh0ZXJuYWxseSBzbyB0aGF0XG4gICAgICAgIC8vIHRoaXMgdmFyaWFibGUgaXMgbm90IG1hcmtlZCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uIGV2ZXJ5IHRpbWUgdGhlIG1haW5cbiAgICAgICAgLy8gbG9vcCBydW5zLlxuICAgICAgICB0aGlzLm51bVVwZGF0ZVN0ZXBzID0gMDtcblxuICAgICAgICAvLyBUaGUgbWluaW11bSBhbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCBtdXN0IHBhc3Mgc2luY2UgdGhlIGxhc3RcbiAgICAgICAgLy8gZnJhbWUgd2FzIGV4ZWN1dGVkIGJlZm9yZSBhbm90aGVyIGZyYW1lIGNhbiBiZSBleGVjdXRlZC4gVGhlXG4gICAgICAgIC8vIG11bHRpcGxpY2F0aXZlIGludmVyc2UgY2FwcyB0aGUgRlBTICh0aGUgZGVmYXVsdCBvZiB6ZXJvIG1lYW5zIHRoZXJlIGlzXG4gICAgICAgIC8vIG5vIGNhcCkuXG4gICAgICAgIHRoaXMubWluRnJhbWVEZWxheSA9IDA7XG5cbiAgICAgICAgLy8gV2hldGhlciB0aGUgbWFpbiBsb29wIGlzIHJ1bm5pbmcuXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGB0cnVlYCBpZiBgTWFpbkxvb3Auc3RhcnQoKWAgaGFzIGJlZW4gY2FsbGVkIGFuZCB0aGUgbW9zdCByZWNlbnQgdGltZSBpdFxuICAgICAgICAvLyB3YXMgY2FsbGVkIGhhcyBub3QgYmVlbiBmb2xsb3dlZCBieSBhIGNhbGwgdG8gYE1haW5Mb29wLnN0b3AoKWAuIFRoaXMgaXNcbiAgICAgICAgLy8gZGlmZmVyZW50IHRoYW4gYHJ1bm5pbmdgIGJlY2F1c2UgdGhlcmUgaXMgYSBkZWxheSBvZiBhIGZldyBtaWxsaXNlY29uZHNcbiAgICAgICAgLy8gYWZ0ZXIgYE1haW5Mb29wLnN0YXJ0KClgIGlzIGNhbGxlZCBiZWZvcmUgdGhlIGFwcGxpY2F0aW9uIGlzIGNvbnNpZGVyZWRcbiAgICAgICAgLy8gXCJydW5uaW5nLlwiIFRoaXMgZGVsYXkgaXMgZHVlIHRvIHdhaXRpbmcgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBXaGV0aGVyIHRoZSBzaW11bGF0aW9uIGhhcyBmYWxsZW4gdG9vIGZhciBiZWhpbmQgcmVhbCB0aW1lLlxuICAgICAgICAvLyBTcGVjaWZpY2FsbHksIGBwYW5pY2Agd2lsbCBiZSBzZXQgdG8gYHRydWVgIGlmIHRvbyBtYW55IHVwZGF0ZXMgb2NjdXIgaW5cbiAgICAgICAgLy8gb25lIGZyYW1lLiBUaGlzIGlzIG9ubHkgcmVsZXZhbnQgaW5zaWRlIG9mIGFuaW1hdGUoKSwgYnV0IGEgcmVmZXJlbmNlIGlzXG4gICAgICAgIC8vIGhlbGQgZXh0ZXJuYWxseSBzbyB0aGF0IHRoaXMgdmFyaWFibGUgaXMgbm90IG1hcmtlZCBmb3IgZ2FyYmFnZVxuICAgICAgICAvLyBjb2xsZWN0aW9uIGV2ZXJ5IHRpbWUgdGhlIG1haW4gbG9vcCBydW5zLlxuICAgICAgICB0aGlzLnBhbmljID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBob3cgbWFueSBtaWxsaXNlY29uZHMgc2hvdWxkIGJlIHNpbXVsYXRlZCBieSBldmVyeSBydW4gb2YgdXBkYXRlKCkuXG4gICAgICpcbiAgICAgKiBTZWUgYE1haW5Mb29wLnNldFNpbXVsYXRpb25UaW1lc3RlcCgpYCBmb3IgZGV0YWlscyBvbiB0aGlzIHZhbHVlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBzaG91bGQgYmUgc2ltdWxhdGVkIGJ5IGV2ZXJ5IHJ1biBvZlxuICAgICAqICAge0BsaW5rICNzZXRVcGRhdGUgdXBkYXRlfSgpLlxuICAgICAqL1xuICAgIGdldFNpbXVsYXRpb25UaW1lc3RlcCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zaW11bGF0aW9uVGltZXN0ZXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBob3cgbWFueSBtaWxsaXNlY29uZHMgc2hvdWxkIGJlIHNpbXVsYXRlZCBieSBldmVyeSBydW4gb2YgdXBkYXRlKCkuXG4gICAgICpcbiAgICAgKiBUaGUgcGVyY2VpdmVkIGZyYW1lcyBwZXIgc2Vjb25kIChGUFMpIGlzIGVmZmVjdGl2ZWx5IGNhcHBlZCBhdCB0aGVcbiAgICAgKiBtdWx0aXBsaWNhdGl2ZSBpbnZlcnNlIG9mIHRoZSBzaW11bGF0aW9uIHRpbWVzdGVwLiBUaGF0IGlzLCBpZiB0aGVcbiAgICAgKiB0aW1lc3RlcCBpcyAxMDAwIC8gNjAgKHdoaWNoIGlzIHRoZSBkZWZhdWx0KSwgdGhlbiB0aGUgbWF4aW11bSBwZXJjZWl2ZWRcbiAgICAgKiBGUFMgaXMgZWZmZWN0aXZlbHkgNjAuIERlY3JlYXNpbmcgdGhlIHRpbWVzdGVwIGluY3JlYXNlcyB0aGUgbWF4aW11bVxuICAgICAqIHBlcmNlaXZlZCBGUFMgYXQgdGhlIGNvc3Qgb2YgcnVubmluZyB7QGxpbmsgI3NldFVwZGF0ZSB1cGRhdGV9KCkgbW9yZVxuICAgICAqIHRpbWVzIHBlciBmcmFtZSBhdCBsb3dlciBmcmFtZSByYXRlcy4gU2luY2UgcnVubmluZyB1cGRhdGUoKSBtb3JlIHRpbWVzXG4gICAgICogdGFrZXMgbW9yZSB0aW1lIHRvIHByb2Nlc3MsIHRoaXMgY2FuIGFjdHVhbGx5IHNsb3cgZG93biB0aGUgZnJhbWUgcmF0ZS5cbiAgICAgKiBBZGRpdGlvbmFsbHksIGlmIHRoZSBhbW91bnQgb2YgdGltZSBpdCB0YWtlcyB0byBydW4gdXBkYXRlKCkgZXhjZWVkcyBvclxuICAgICAqIHZlcnkgbmVhcmx5IGV4Y2VlZHMgdGhlIHRpbWVzdGVwLCB0aGUgYXBwbGljYXRpb24gd2lsbCBmcmVlemUgYW5kIGNyYXNoXG4gICAgICogaW4gYSBzcGlyYWwgb2YgZGVhdGggKHVubGVzcyBpdCBpcyByZXNjdWVkOyBzZWUgYE1haW5Mb29wLnNldEVuZCgpYCBmb3JcbiAgICAgKiBhbiBleHBsYW5hdGlvbiBvZiB3aGF0IGNhbiBiZSBkb25lIGlmIGEgc3BpcmFsIG9mIGRlYXRoIGlzIG9jY3VycmluZykuXG4gICAgICpcbiAgICAgKiBUaGUgZXhjZXB0aW9uIHRvIHRoaXMgaXMgdGhhdCBpbnRlcnBvbGF0aW5nIGJldHdlZW4gdXBkYXRlcyBmb3IgZWFjaFxuICAgICAqIHJlbmRlciBjYW4gaW5jcmVhc2UgdGhlIHBlcmNlaXZlZCBmcmFtZSByYXRlIGFuZCByZWR1Y2UgdmlzdWFsXG4gICAgICogc3R1dHRlcmluZy4gU2VlIGBNYWluTG9vcC5zZXREcmF3KClgIGZvciBhbiBleHBsYW5hdGlvbiBvZiBob3cgdG8gZG9cbiAgICAgKiB0aGlzLlxuICAgICAqXG4gICAgICogSWYgeW91IGFyZSBjb25zaWRlcmluZyBkZWNyZWFzaW5nIHRoZSBzaW11bGF0aW9uIHRpbWVzdGVwIGluIG9yZGVyIHRvXG4gICAgICogcmFpc2UgdGhlIG1heGltdW0gcGVyY2VpdmVkIEZQUywga2VlcCBpbiBtaW5kIHRoYXQgbW9zdCBtb25pdG9ycyBjYW4ndFxuICAgICAqIGRpc3BsYXkgbW9yZSB0aGFuIDYwIEZQUy4gV2hldGhlciBodW1hbnMgY2FuIHRlbGwgdGhlIGRpZmZlcmVuY2UgYW1vbmdcbiAgICAgKiBoaWdoIGZyYW1lIHJhdGVzIGRlcGVuZHMgb24gdGhlIGFwcGxpY2F0aW9uLCBidXQgZm9yIHJlZmVyZW5jZSwgZmlsbSBpc1xuICAgICAqIHVzdWFsbHkgZGlzcGxheWVkIGF0IDI0IEZQUywgb3RoZXIgdmlkZW9zIGF0IDMwIEZQUywgbW9zdCBnYW1lcyBhcmVcbiAgICAgKiBhY2NlcHRhYmxlIGFib3ZlIDMwIEZQUywgYW5kIHZpcnR1YWwgcmVhbGl0eSBtaWdodCByZXF1aXJlIDc1IEZQUyB0b1xuICAgICAqIGZlZWwgbmF0dXJhbC4gU29tZSBnYW1pbmcgbW9uaXRvcnMgZ28gdXAgdG8gMTQ0IEZQUy4gU2V0dGluZyB0aGVcbiAgICAgKiB0aW1lc3RlcCBiZWxvdyAxMDAwIC8gMTQ0IGlzIGRpc2NvdXJhZ2VkIGFuZCBiZWxvdyAxMDAwIC8gMjQwIGlzXG4gICAgICogc3Ryb25nbHkgZGlzY291cmFnZWQuIFRoZSBkZWZhdWx0IG9mIDEwMDAgLyA2MCBpcyBnb29kIGluIG1vc3QgY2FzZXMuXG4gICAgICpcbiAgICAgKiBUaGUgc2ltdWxhdGlvbiB0aW1lc3RlcCBzaG91bGQgdHlwaWNhbGx5IG9ubHkgYmUgY2hhbmdlZCBhdFxuICAgICAqIGRldGVybWluaXN0aWMgdGltZXMgKGUuZy4gYmVmb3JlIHRoZSBtYWluIGxvb3Agc3RhcnRzIGZvciB0aGUgZmlyc3RcbiAgICAgKiB0aW1lLCBhbmQgbm90IGluIHJlc3BvbnNlIHRvIHVzZXIgaW5wdXQgb3Igc2xvdyBmcmFtZSByYXRlcykgdG8gYXZvaWRcbiAgICAgKiBpbnRyb2R1Y2luZyBub24tZGV0ZXJtaW5pc3RpYyBiZWhhdmlvci4gVGhlIHVwZGF0ZSB0aW1lc3RlcCBzaG91bGQgYmVcbiAgICAgKiB0aGUgc2FtZSBmb3IgYWxsIHBsYXllcnMvdXNlcnMgaW4gbXVsdGlwbGF5ZXIvbXVsdGktdXNlciBhcHBsaWNhdGlvbnMuXG4gICAgICpcbiAgICAgKiBTZWUgYWxzbyBgTWFpbkxvb3AuZ2V0U2ltdWxhdGlvblRpbWVzdGVwKClgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzdGVwXG4gICAgICogICBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IHNob3VsZCBiZSBzaW11bGF0ZWQgYnkgZXZlcnkgcnVuIG9mXG4gICAgICogICB7QGxpbmsgI3NldFVwZGF0ZSB1cGRhdGV9KCkuXG4gICAgICovXG4gICAgc2V0U2ltdWxhdGlvblRpbWVzdGVwKHRpbWVzdGVwOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zaW11bGF0aW9uVGltZXN0ZXAgPSB0aW1lc3RlcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBleHBvbmVudGlhbCBtb3ZpbmcgYXZlcmFnZSBvZiB0aGUgZnJhbWVzIHBlciBzZWNvbmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICogICBUaGUgZXhwb25lbnRpYWwgbW92aW5nIGF2ZXJhZ2Ugb2YgdGhlIGZyYW1lcyBwZXIgc2Vjb25kLlxuICAgICAqL1xuICAgIGdldEZQUygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5mcHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWF4aW11bSBmcmFtZSByYXRlLlxuICAgICAqXG4gICAgICogT3RoZXIgZmFjdG9ycyBhbHNvIGxpbWl0IHRoZSBGUFM7IHNlZSBgTWFpbkxvb3Auc2V0U2ltdWxhdGlvblRpbWVzdGVwYFxuICAgICAqIGZvciBkZXRhaWxzLlxuICAgICAqXG4gICAgICogU2VlIGFsc28gYE1haW5Mb29wLnNldE1heEFsbG93ZWRGUFMoKWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICogICBUaGUgbWF4aW11bSBudW1iZXIgb2YgZnJhbWVzIHBlciBzZWNvbmQgYWxsb3dlZC5cbiAgICAgKi9cbiAgICBnZXRNYXhBbGxvd2VkRlBTKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAxMDAwIC8gdGhpcy5taW5GcmFtZURlbGF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtYXhpbXVtIGZyYW1lIHJhdGUuXG4gICAgICpcbiAgICAgKiBTZWUgYWxzbyBgTWFpbkxvb3AuZ2V0TWF4QWxsb3dlZEZQUygpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZnBzPUluZmluaXR5XVxuICAgICAqICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kIHRvIGV4ZWN1dGUuIElmIEluZmluaXR5IG9yIG5vdFxuICAgICAqICAgcGFzc2VkLCB0aGVyZSB3aWxsIGJlIG5vIEZQUyBjYXAgKGFsdGhvdWdoIG90aGVyIGZhY3RvcnMgZG8gbGltaXQgdGhlXG4gICAgICogICBGUFM7IHNlZSBgTWFpbkxvb3Auc2V0U2ltdWxhdGlvblRpbWVzdGVwYCBmb3IgZGV0YWlscykuIElmIHplcm8sIHRoaXNcbiAgICAgKiAgIHdpbGwgc3RvcCB0aGUgbG9vcCwgYW5kIHdoZW4gdGhlIGxvb3AgaXMgbmV4dCBzdGFydGVkLCBpdCB3aWxsIHJldHVyblxuICAgICAqICAgdG8gdGhlIHByZXZpb3VzIG1heGltdW0gZnJhbWUgcmF0ZS4gUGFzc2luZyBuZWdhdGl2ZSB2YWx1ZXMgd2lsbCBzdGFsbFxuICAgICAqICAgdGhlIGxvb3AgdW50aWwgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gd2l0aCBhIHBvc2l0aXZlIHZhbHVlLlxuICAgICAqXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldE1heEFsbG93ZWRGUFMoZnBzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmcHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBmcHMgPSBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnBzID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIERpdmlkaW5nIGJ5IEluZmluaXR5IHJldHVybnMgemVyby5cbiAgICAgICAgICAgIHRoaXMubWluRnJhbWVEZWxheSA9IDEwMDAgLyBmcHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXMgbm90IHlldCBiZWVuIHNpbXVsYXRlZCB0byB6ZXJvLlxuICAgICAqXG4gICAgICogVGhpcyBpbnRyb2R1Y2VzIG5vbi1kZXRlcm1pbmlzdGljIGJlaGF2aW9yIGlmIGNhbGxlZCBhZnRlciB0aGVcbiAgICAgKiBhcHBsaWNhdGlvbiBoYXMgc3RhcnRlZCBydW5uaW5nICh1bmxlc3MgaXQgaXMgYmVpbmcgcmVzZXQsIGluIHdoaWNoIGNhc2VcbiAgICAgKiBpdCBkb2Vzbid0IG1hdHRlcikuIEhvd2V2ZXIsIHRoaXMgY2FuIGJlIHVzZWZ1bCBpbiBjYXNlcyB3aGVyZSB0aGVcbiAgICAgKiBhbW91bnQgb2YgdGltZSB0aGF0IGhhcyBub3QgeWV0IGJlZW4gc2ltdWxhdGVkIGhhcyBncm93biB2ZXJ5IGxhcmdlXG4gICAgICogKGZvciBleGFtcGxlLCB3aGVuIHRoZSBhcHBsaWNhdGlvbidzIHRhYiBnZXRzIHB1dCBpbiB0aGUgYmFja2dyb3VuZCBhbmRcbiAgICAgKiB0aGUgYnJvd3NlciB0aHJvdHRsZXMgdGhlIHRpbWVycyBhcyBhIHJlc3VsdCkuIEluIGFwcGxpY2F0aW9ucyB3aXRoXG4gICAgICogbG9ja3N0ZXAgdGhlIHBsYXllciB3b3VsZCBnZXQgZHJvcHBlZCwgYnV0IGluIG90aGVyIG5ldHdvcmtlZFxuICAgICAqIGFwcGxpY2F0aW9ucyBpdCBtYXkgYmUgbmVjZXNzYXJ5IHRvIHNuYXAgb3IgZWFzZSB0aGUgcGxheWVyL3VzZXIgdG8gdGhlXG4gICAgICogYXV0aG9yaXRhdGl2ZSBzdGF0ZSBhbmQgZGlzY2FyZCBwZW5kaW5nIHVwZGF0ZXMgaW4gdGhlIHByb2Nlc3MuIEluXG4gICAgICogbm9uLW5ldHdvcmtlZCBhcHBsaWNhdGlvbnMgaXQgbWF5IGFsc28gYmUgYWNjZXB0YWJsZSB0byBzaW1wbHkgcmVzdW1lXG4gICAgICogdGhlIGFwcGxpY2F0aW9uIHdoZXJlIGl0IGxhc3QgbGVmdCBvZmYgYW5kIGlnbm9yZSB0aGUgYWNjdW11bGF0ZWRcbiAgICAgKiB1bnNpbXVsYXRlZCB0aW1lLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqICAgVGhlIGN1bXVsYXRpdmUgYW1vdW50IG9mIGVsYXBzZWQgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCBoYXMgbm90IHlldFxuICAgICAqICAgYmVlbiBzaW11bGF0ZWQsIGJ1dCBpcyBiZWluZyBkaXNjYXJkZWQgYXMgYSByZXN1bHQgb2YgY2FsbGluZyB0aGlzXG4gICAgICogICBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICByZXNldEZyYW1lRGVsdGEoKSA6IG51bWJlciB7XG4gICAgICAgIHZhciBvbGRGcmFtZURlbHRhID0gdGhpcy5mcmFtZURlbHRhO1xuICAgICAgICB0aGlzLmZyYW1lRGVsdGEgPSAwO1xuICAgICAgICByZXR1cm4gb2xkRnJhbWVEZWx0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIG1haW4gbG9vcC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYXBwbGljYXRpb24gaXMgbm90IGNvbnNpZGVyZWQgXCJydW5uaW5nXCIgaW1tZWRpYXRlbHkgYWZ0ZXJcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnM7IHJhdGhlciwgaXQgaXMgY29uc2lkZXJlZCBcInJ1bm5pbmdcIiBhZnRlciB0aGVcbiAgICAgKiBhcHBsaWNhdGlvbiBkcmF3cyBpdHMgZmlyc3QgZnJhbWUuIFRoZSBkaXN0aW5jdGlvbiBpcyB0aGF0IGV2ZW50XG4gICAgICogaGFuZGxlcnMgc2hvdWxkIHJlbWFpbiBwYXVzZWQgdW50aWwgdGhlIGFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcsIGV2ZW5cbiAgICAgKiBhZnRlciBgTWFpbkxvb3Auc3RhcnQoKWAgaXMgY2FsbGVkLiBDaGVjayBgTWFpbkxvb3AuaXNSdW5uaW5nKClgIGZvciB0aGVcbiAgICAgKiBjdXJyZW50IHN0YXR1cy4gVG8gYWN0IGFmdGVyIHRoZSBhcHBsaWNhdGlvbiBzdGFydHMsIHJlZ2lzdGVyIGEgY2FsbGJhY2tcbiAgICAgKiB3aXRoIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIGFmdGVyIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBhbmQgZXhlY3V0ZSB0aGVcbiAgICAgKiBhY3Rpb24gaW4gdGhhdCBjYWxsYmFjay4gSXQgaXMgc2FmZSB0byBjYWxsIGBNYWluTG9vcC5zdGFydCgpYCBtdWx0aXBsZVxuICAgICAqIHRpbWVzIGV2ZW4gYmVmb3JlIHRoZSBhcHBsaWNhdGlvbiBzdGFydHMgcnVubmluZyBhbmQgd2l0aG91dCBjYWxsaW5nXG4gICAgICogYE1haW5Mb29wLnN0b3AoKWAgaW4gYmV0d2VlbiwgYWx0aG91Z2ggdGhlcmUgaXMgbm8gcmVhc29uIHRvIGRvIHRoaXM7XG4gICAgICogdGhlIG1haW4gbG9vcCB3aWxsIG9ubHkgc3RhcnQgaWYgaXQgaXMgbm90IGFscmVhZHkgc3RhcnRlZC5cbiAgICAgKlxuICAgICAqIFNlZSBhbHNvIGBNYWluTG9vcC5zdG9wKClgLlxuICAgICAqL1xuICAgIHN0YXJ0KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIGFwcGxpY2F0aW9uIGRvZXNuJ3Qgc3RhcnQgcnVubmluZyBpbW1lZGlhdGVseSwgdHJhY2tcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgdGhpcyBmdW5jdGlvbiB3YXMgY2FsbGVkIGFuZCB1c2UgdGhhdCB0byBrZWVwIGl0IGZyb21cbiAgICAgICAgICAgIC8vIHN0YXJ0aW5nIHRoZSBtYWluIGxvb3AgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBJbiB0aGUgbWFpbiBsb29wLCBkcmF3KCkgaXMgY2FsbGVkIGFmdGVyIHVwZGF0ZSgpLCBzbyBpZiB3ZVxuICAgICAgICAgICAgLy8gZW50ZXJlZCB0aGUgbWFpbiBsb29wIGltbWVkaWF0ZWx5LCB3ZSB3b3VsZCBuZXZlciByZW5kZXIgdGhlXG4gICAgICAgICAgICAvLyBpbml0aWFsIHN0YXRlIGJlZm9yZSBhbnkgdXBkYXRlcyBvY2N1ci4gSW5zdGVhZCwgd2UgcnVuIG9uZVxuICAgICAgICAgICAgLy8gZnJhbWUgd2hlcmUgYWxsIHdlIGRvIGlzIGRyYXcsIGFuZCB0aGVuIHN0YXJ0IHRoZSBtYWluIGxvb3Agd2l0aFxuICAgICAgICAgICAgLy8gdGhlIG5leHQgZnJhbWUuXG4gICAgICAgICAgICB0aGlzLnJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnN0YXJ0TG9vcC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0TG9vcCh0aW1lc3RhbXAgOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgLy8gUmVuZGVyIHRoZSBpbml0aWFsIHN0YXRlIGJlZm9yZSBhbnkgdXBkYXRlcyBvY2N1ci5cbiAgICAgICAgdGhpcy5kcmF3KDEpO1xuXG4gICAgICAgIC8vIFRoZSBhcHBsaWNhdGlvbiBpc24ndCBjb25zaWRlcmVkIFwicnVubmluZ1wiIHVudGlsIHRoZVxuICAgICAgICAvLyBhcHBsaWNhdGlvbiBzdGFydHMgZHJhd2luZy5cbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcblxuICAgICAgICAvLyBSZXNldCB2YXJpYWJsZXMgdGhhdCBhcmUgdXNlZCBmb3IgdHJhY2tpbmcgdGltZSBzbyB0aGF0IHdlXG4gICAgICAgIC8vIGRvbid0IHNpbXVsYXRlIHRpbWUgcGFzc2VkIHdoaWxlIHRoZSBhcHBsaWNhdGlvbiB3YXMgcGF1c2VkLlxuICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWVNcyA9IHRpbWVzdGFtcDtcbiAgICAgICAgdGhpcy5sYXN0RnBzVXBkYXRlID0gdGltZXN0YW1wO1xuICAgICAgICB0aGlzLmZyYW1lc1NpbmNlTGFzdEZwc1VwZGF0ZSA9IDA7XG5cbiAgICAgICAgLy8gU3RhcnQgdGhlIG1haW4gbG9vcC5cbiAgICAgICAgdGhpcy5yYWYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG1haW4gbG9vcCBpcyBjdXJyZW50bHkgcnVubmluZy5cbiAgICAgKlxuICAgICAqIFNlZSBhbHNvIGBNYWluTG9vcC5zdGFydCgpYCBhbmQgYE1haW5Mb29wLnN0b3AoKWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqICAgV2hldGhlciB0aGUgbWFpbiBsb29wIGlzIGN1cnJlbnRseSBydW5uaW5nLlxuICAgICAqL1xuICAgIGlzUnVubmluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVubmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wcyB0aGUgbWFpbiBsb29wLlxuICAgICAqXG4gICAgICogRXZlbnQgaGFuZGxpbmcgYW5kIG90aGVyIGJhY2tncm91bmQgdGFza3Mgc2hvdWxkIGFsc28gYmUgcGF1c2VkIHdoZW4gdGhlXG4gICAgICogbWFpbiBsb29wIGlzIHBhdXNlZC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBwYXVzaW5nIGluIG11bHRpcGxheWVyL211bHRpLXVzZXIgYXBwbGljYXRpb25zIHdpbGwgY2F1c2UgdGhlXG4gICAgICogcGxheWVyJ3MvdXNlcidzIGNsaWVudCB0byBiZWNvbWUgb3V0IG9mIHN5bmMuIEluIHRoaXMgY2FzZSB0aGVcbiAgICAgKiBzaW11bGF0aW9uIHNob3VsZCBleGl0LCBvciB0aGUgcGxheWVyL3VzZXIgbmVlZHMgdG8gYmUgc25hcHBlZCB0byB0aGVpclxuICAgICAqIHVwZGF0ZWQgcG9zaXRpb24gd2hlbiB0aGUgbWFpbiBsb29wIGlzIHN0YXJ0ZWQgYWdhaW4uXG4gICAgICpcbiAgICAgKiBTZWUgYWxzbyBgTWFpbkxvb3Auc3RhcnQoKWAgYW5kIGBNYWluTG9vcC5pc1J1bm5pbmcoKWAuXG4gICAgICovXG4gICAgc3RvcCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yYWYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBtYWluIGxvb3AgdGhhdCBydW5zIHVwZGF0ZXMgYW5kIHJlbmRlcmluZy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IHRpbWVzdGFtcFxuICAgICAqIFRoZSBjdXJyZW50IHRpbWVzdGFtcC4gSW4gcHJhY3RpY2UgdGhpcyBpcyBzdXBwbGllZCBieVxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhdCB0aGUgdGltZSB0aGF0IGl0IHN0YXJ0cyB0byBmaXJlIGNhbGxiYWNrcy4gVGhpc1xuICAgICAqIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNvbXBhcmlzb24gdG8gb3RoZXIgdGltZXN0YW1wcyBiZWNhdXNlIHRoZSBlcG9jaFxuICAgICAqIChpLmUuIHRoZSBcInplcm9cIiB0aW1lKSBkZXBlbmRzIG9uIHRoZSBlbmdpbmUgcnVubmluZyB0aGlzIGNvZGUuIEluIGVuZ2luZXNcbiAgICAgKiB0aGF0IHN1cHBvcnQgYERPTUhpZ2hSZXNUaW1lU3RhbXBgIChhbGwgbW9kZXJuIGJyb3dzZXJzIGV4Y2VwdCBpT1MgU2FmYXJpXG4gICAgICogOCkgdGhlIGVwb2NoIGlzIHRoZSB0aW1lIHRoZSBwYWdlIHN0YXJ0ZWQgbG9hZGluZywgc3BlY2lmaWNhbGx5XG4gICAgICogYHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnRgLiBFdmVyeXdoZXJlIGVsc2UsIGluY2x1ZGluZyBub2RlLmpzLFxuICAgICAqIHRoZSBlcG9jaCBpcyB0aGUgVW5peCBlcG9jaCAoMTk3MC0wMS0wMVQwMDowMDowMFopLlxuICAgICAqIFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBhbmltYXRlKHRpbWVzdGFtcCA6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAvLyBSdW4gdGhlIGxvb3AgYWdhaW4gdGhlIG5leHQgdGltZSB0aGUgYnJvd3NlciBpcyByZWFkeSB0byByZW5kZXIuXG4gICAgICAgIC8vIFdlIHNldCByYWZIYW5kbGUgaW1tZWRpYXRlbHkgc28gdGhhdCB0aGUgbmV4dCBmcmFtZSBjYW4gYmUgY2FuY2VsZWRcbiAgICAgICAgLy8gZHVyaW5nIHRoZSBjdXJyZW50IGZyYW1lLlxuICAgICAgICB0aGlzLnJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIFRocm90dGxlIHRoZSBmcmFtZSByYXRlIChpZiBtaW5GcmFtZURlbGF5IGlzIHNldCB0byBhIG5vbi16ZXJvIHZhbHVlIGJ5XG4gICAgICAgIC8vIGBNYWluTG9vcC5zZXRNYXhBbGxvd2VkRlBTKClgKS5cbiAgICAgICAgaWYgKHRpbWVzdGFtcCA8IHRoaXMubGFzdEZyYW1lVGltZU1zICsgdGhpcy5taW5GcmFtZURlbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmcmFtZURlbHRhIGlzIHRoZSBjdW11bGF0aXZlIGFtb3VudCBvZiBpbi1hcHAgdGltZSB0aGF0IGhhc24ndCBiZWVuXG4gICAgICAgIC8vIHNpbXVsYXRlZCB5ZXQuIEFkZCB0aGUgdGltZSBzaW5jZSB0aGUgbGFzdCBmcmFtZS4gV2UgbmVlZCB0byB0cmFjayB0b3RhbFxuICAgICAgICAvLyBub3QteWV0LXNpbXVsYXRlZCB0aW1lIChhcyBvcHBvc2VkIHRvIGp1c3QgdGhlIHRpbWUgZWxhcHNlZCBzaW5jZSB0aGVcbiAgICAgICAgLy8gbGFzdCBmcmFtZSkgYmVjYXVzZSBub3QgYWxsIGFjdHVhbGx5IGVsYXBzZWQgdGltZSBpcyBndWFyYW50ZWVkIHRvIGJlXG4gICAgICAgIC8vIHNpbXVsYXRlZCBlYWNoIGZyYW1lLiBTZWUgdGhlIGNvbW1lbnRzIGJlbG93IGZvciBkZXRhaWxzLlxuICAgICAgICB0aGlzLmZyYW1lRGVsdGEgKz0gdGltZXN0YW1wIC0gdGhpcy5sYXN0RnJhbWVUaW1lTXM7XG4gICAgICAgIHRoaXMubGFzdEZyYW1lVGltZU1zID0gdGltZXN0YW1wO1xuXG4gICAgICAgIC8vIFJ1biBhbnkgdXBkYXRlcyB0aGF0IGFyZSBub3QgZGVwZW5kZW50IG9uIHRpbWUgaW4gdGhlIHNpbXVsYXRpb24uIFNlZVxuICAgICAgICAvLyBgTWFpbkxvb3Auc2V0QmVnaW4oKWAgZm9yIGFkZGl0aW9uYWwgZGV0YWlscyBvbiBob3cgdG8gdXNlIHRoaXMuXG4gICAgICAgIHRoaXMuYmVnaW4odGltZXN0YW1wLCB0aGlzLmZyYW1lRGVsdGEpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgZXN0aW1hdGUgb2YgdGhlIGZyYW1lIHJhdGUsIGBmcHNgLiBBcHByb3hpbWF0ZWx5IGV2ZXJ5XG4gICAgICAgIC8vIHNlY29uZCwgdGhlIG51bWJlciBvZiBmcmFtZXMgdGhhdCBvY2N1cnJlZCBpbiB0aGF0IHNlY29uZCBhcmUgaW5jbHVkZWRcbiAgICAgICAgLy8gaW4gYW4gZXhwb25lbnRpYWwgbW92aW5nIGF2ZXJhZ2Ugb2YgYWxsIGZyYW1lcyBwZXIgc2Vjb25kLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIHRoYXQgbW9yZSByZWNlbnQgc2Vjb25kcyBhZmZlY3QgdGhlIGVzdGltYXRlZCBmcmFtZSByYXRlIG1vcmUgdGhhbiBvbGRlclxuICAgICAgICAvLyBzZWNvbmRzLlxuICAgICAgICBpZiAodGltZXN0YW1wID4gdGhpcy5sYXN0RnBzVXBkYXRlICsgdGhpcy5mcHNVcGRhdGVJbnRlcnZhbCkge1xuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgbmV3IGV4cG9uZW50aWFsIG1vdmluZyBhdmVyYWdlLlxuICAgICAgICAgICAgdGhpcy5mcHMgPVxuICAgICAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgbnVtYmVyIG9mIGZyYW1lcyBzaW5jZSB0aGUgbGFzdCBGUFMgdXBkYXRlIGJ5IHRoZVxuICAgICAgICAgICAgICAgIC8vIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzIHBhc3NlZCB0byBnZXQgdGhlIG1lYW4gZnJhbWVzIHBlciBzZWNvbmRcbiAgICAgICAgICAgICAgICAvLyBvdmVyIHRoYXQgcGVyaW9kLiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNsaWdodGx5IG1vcmUgdGhhbiBhXG4gICAgICAgICAgICAgICAgLy8gc2Vjb25kIGhhcyBsaWtlbHkgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZS5cbiAgICAgICAgICAgICAgICB0aGlzLmZwc0FscGhhICogdGhpcy5mcmFtZXNTaW5jZUxhc3RGcHNVcGRhdGUgKiAxMDAwIC8gKHRpbWVzdGFtcCAtIHRoaXMubGFzdEZwc1VwZGF0ZSkgK1xuICAgICAgICAgICAgICAgICgxIC0gdGhpcy5mcHNBbHBoYSkgKiB0aGlzLmZwcztcblxuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGZyYW1lIGNvdW50ZXIgYW5kIGxhc3QtdXBkYXRlZCB0aW1lc3RhbXAgc2luY2UgdGhlaXJcbiAgICAgICAgICAgIC8vIGxhdGVzdCB2YWx1ZXMgaGF2ZSBub3cgYmVlbiBpbmNvcnBvcmF0ZWQgaW50byB0aGUgRlBTIGVzdGltYXRlLlxuICAgICAgICAgICAgdGhpcy5sYXN0RnBzVXBkYXRlID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgdGhpcy5mcmFtZXNTaW5jZUxhc3RGcHNVcGRhdGUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvdW50IHRoZSBjdXJyZW50IGZyYW1lIGluIHRoZSBuZXh0IGZyYW1lcy1wZXItc2Vjb25kIHVwZGF0ZS4gVGhpc1xuICAgICAgICAvLyBoYXBwZW5zIGFmdGVyIHRoZSBwcmV2aW91cyBzZWN0aW9uIGJlY2F1c2UgdGhlIHByZXZpb3VzIHNlY3Rpb25cbiAgICAgICAgLy8gY2FsY3VsYXRlcyB0aGUgZnJhbWVzIHRoYXQgb2NjdXIgdXAgdW50aWwgYHRpbWVzdGFtcGAsIGFuZCBgdGltZXN0YW1wYFxuICAgICAgICAvLyByZWZlcnMgdG8gYSB0aW1lIGp1c3QgYmVmb3JlIHRoZSBjdXJyZW50IGZyYW1lIHdhcyBkZWxpdmVyZWQuXG4gICAgICAgIHRoaXMuZnJhbWVzU2luY2VMYXN0RnBzVXBkYXRlKys7XG5cbiAgICAgICAgLypcbiAgICAgICAgICogQSBuYWl2ZSB3YXkgdG8gbW92ZSBhbiBvYmplY3QgYWxvbmcgaXRzIFgtYXhpcyBtaWdodCBiZSB0byB3cml0ZSBhIG1haW5cbiAgICAgICAgICogbG9vcCBjb250YWluaW5nIHRoZSBzdGF0ZW1lbnQgYG9iai54ICs9IDEwO2Agd2hpY2ggd291bGQgbW92ZSB0aGUgb2JqZWN0XG4gICAgICAgICAqIDEwIHVuaXRzIHBlciBmcmFtZS4gVGhpcyBhcHByb2FjaCBzdWZmZXJzIGZyb20gdGhlIGlzc3VlIHRoYXQgaXQgaXNcbiAgICAgICAgICogZGVwZW5kZW50IG9uIHRoZSBmcmFtZSByYXRlLiBJbiBvdGhlciB3b3JkcywgaWYgeW91ciBhcHBsaWNhdGlvbiBpc1xuICAgICAgICAgKiBydW5uaW5nIHNsb3dseSAodGhhdCBpcywgZmV3ZXIgZnJhbWVzIHBlciBzZWNvbmQpLCB5b3VyIG9iamVjdCB3aWxsIGFsc29cbiAgICAgICAgICogYXBwZWFyIHRvIG1vdmUgc2xvd2x5LCB3aGVyZWFzIGlmIHlvdXIgYXBwbGljYXRpb24gaXMgcnVubmluZyBxdWlja2x5XG4gICAgICAgICAqICh0aGF0IGlzLCBtb3JlIGZyYW1lcyBwZXIgc2Vjb25kKSwgeW91ciBvYmplY3Qgd2lsbCBhcHBlYXIgdG8gbW92ZVxuICAgICAgICAgKiBxdWlja2x5LiBUaGlzIGlzIHVuZGVzaXJhYmxlLCBlc3BlY2lhbGx5IGluIG11bHRpcGxheWVyL211bHRpLXVzZXJcbiAgICAgICAgICogYXBwbGljYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBPbmUgc29sdXRpb24gaXMgdG8gbXVsdGlwbHkgdGhlIHNwZWVkIGJ5IHRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGhhc1xuICAgICAgICAgKiBwYXNzZWQgYmV0d2VlbiByZW5kZXJpbmcgZnJhbWVzLiBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgeW91ciBvYmplY3QgdG9cbiAgICAgICAgICogbW92ZSA2MDAgdW5pdHMgcGVyIHNlY29uZCwgeW91IG1pZ2h0IHdyaXRlIGBvYmoueCArPSA2MDAgKiBkZWx0YWAsIHdoZXJlXG4gICAgICAgICAqIGBkZWx0YWAgaXMgdGhlIHRpbWUgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IGZyYW1lLiAoRm9yIGNvbnZlbmllbmNlLCBsZXQnc1xuICAgICAgICAgKiBtb3ZlIHRoaXMgc3RhdGVtZW50IHRvIGFuIHVwZGF0ZSgpIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYGRlbHRhYCBhcyBhXG4gICAgICAgICAqIHBhcmFtZXRlci4pIFRoaXMgd2F5LCB5b3VyIG9iamVjdCB3aWxsIG1vdmUgYSBjb25zdGFudCBkaXN0YW5jZSBvdmVyXG4gICAgICAgICAqIHRpbWUuIEhvd2V2ZXIsIGF0IGxvdyBmcmFtZSByYXRlcyBhbmQgaGlnaCBzcGVlZHMsIHlvdXIgb2JqZWN0IHdpbGwgbW92ZVxuICAgICAgICAgKiBsYXJnZSBkaXN0YW5jZXMgZXZlcnkgZnJhbWUsIHdoaWNoIGNhbiBjYXVzZSBpdCB0byBkbyBzdHJhbmdlIHRoaW5nc1xuICAgICAgICAgKiBzdWNoIGFzIG1vdmUgdGhyb3VnaCB3YWxscy4gQWRkaXRpb25hbGx5LCB3ZSB3b3VsZCBsaWtlIG91ciBwcm9ncmFtIHRvXG4gICAgICAgICAqIGJlIGRldGVybWluaXN0aWMuIFRoYXQgaXMsIGV2ZXJ5IHRpbWUgd2UgcnVuIHRoZSBhcHBsaWNhdGlvbiB3aXRoIHRoZVxuICAgICAgICAgKiBzYW1lIGlucHV0LCB3ZSB3b3VsZCBsaWtlIGV4YWN0bHkgdGhlIHNhbWUgb3V0cHV0LiBJZiB0aGUgdGltZSBiZXR3ZWVuXG4gICAgICAgICAqIGZyYW1lcyAodGhlIGBkZWx0YWApIHZhcmllcywgb3VyIG91dHB1dCB3aWxsIGRpdmVyZ2UgdGhlIGxvbmdlciB0aGVcbiAgICAgICAgICogcHJvZ3JhbSBydW5zIGR1ZSB0byBhY2N1bXVsYXRlZCByb3VuZGluZyBlcnJvcnMsIGV2ZW4gYXQgbm9ybWFsIGZyYW1lXG4gICAgICAgICAqIHJhdGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBBIGJldHRlciBzb2x1dGlvbiBpcyB0byBzZXBhcmF0ZSB0aGUgYW1vdW50IG9mIHRpbWUgc2ltdWxhdGVkIGluIGVhY2hcbiAgICAgICAgICogdXBkYXRlKCkgZnJvbSB0aGUgYW1vdW50IG9mIHRpbWUgYmV0d2VlbiBmcmFtZXMuIE91ciB1cGRhdGUoKSBmdW5jdGlvblxuICAgICAgICAgKiBkb2Vzbid0IG5lZWQgdG8gY2hhbmdlOyB3ZSBqdXN0IG5lZWQgdG8gY2hhbmdlIHRoZSBkZWx0YSB3ZSBwYXNzIHRvIGl0XG4gICAgICAgICAqIHNvIHRoYXQgZWFjaCB1cGRhdGUoKSBzaW11bGF0ZXMgYSBmaXhlZCBhbW91bnQgb2YgdGltZSAodGhhdCBpcywgYGRlbHRhYFxuICAgICAgICAgKiBzaG91bGQgaGF2ZSB0aGUgc2FtZSB2YWx1ZSBlYWNoIHRpbWUgdXBkYXRlKCkgaXMgY2FsbGVkKS4gVGhlIHVwZGF0ZSgpXG4gICAgICAgICAqIGZ1bmN0aW9uIGNhbiBiZSBydW4gbXVsdGlwbGUgdGltZXMgcGVyIGZyYW1lIGlmIG5lZWRlZCB0byBzaW11bGF0ZSB0aGVcbiAgICAgICAgICogdG90YWwgYW1vdW50IG9mIHRpbWUgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IGZyYW1lLiAoSWYgdGhlIHRpbWUgdGhhdCBoYXNcbiAgICAgICAgICogcGFzc2VkIHNpbmNlIHRoZSBsYXN0IGZyYW1lIGlzIGxlc3MgdGhhbiB0aGUgZml4ZWQgc2ltdWxhdGlvbiB0aW1lLCB3ZVxuICAgICAgICAgKiBqdXN0IHdvbid0IHJ1biBhbiB1cGRhdGUoKSB1bnRpbCB0aGUgdGhlIG5leHQgZnJhbWUuIElmIHRoZXJlIGlzXG4gICAgICAgICAqIHVuc2ltdWxhdGVkIHRpbWUgbGVmdCBvdmVyIHRoYXQgaXMgbGVzcyB0aGFuIG91ciB0aW1lc3RlcCwgd2UnbGwganVzdFxuICAgICAgICAgKiBsZWF2ZSBpdCB0byBiZSBzaW11bGF0ZWQgZHVyaW5nIHRoZSBuZXh0IGZyYW1lLikgVGhpcyBhcHByb2FjaCBhdm9pZHNcbiAgICAgICAgICogaW5jb25zaXN0ZW50IHJvdW5kaW5nIGVycm9ycyBhbmQgZW5zdXJlcyB0aGF0IHRoZXJlIGFyZSBubyBnaWFudCBsZWFwc1xuICAgICAgICAgKiB0aHJvdWdoIHdhbGxzIGJldHdlZW4gZnJhbWVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGF0IGlzIHdoYXQgaXMgZG9uZSBiZWxvdy4gSXQgaW50cm9kdWNlcyBhIG5ldyBwcm9ibGVtLCBidXQgaXQgaXMgYVxuICAgICAgICAgKiBtYW5hZ2VhYmxlIG9uZTogaWYgdGhlIGFtb3VudCBvZiB0aW1lIHNwZW50IHNpbXVsYXRpbmcgaXMgY29uc2lzdGVudGx5XG4gICAgICAgICAqIGxvbmdlciB0aGFuIHRoZSBhbW91bnQgb2YgdGltZSBiZXR3ZWVuIGZyYW1lcywgdGhlIGFwcGxpY2F0aW9uIGNvdWxkXG4gICAgICAgICAqIGZyZWV6ZSBhbmQgY3Jhc2ggaW4gYSBzcGlyYWwgb2YgZGVhdGguIFRoaXMgd29uJ3QgaGFwcGVuIGFzIGxvbmcgYXMgdGhlXG4gICAgICAgICAqIGZpeGVkIHNpbXVsYXRpb24gdGltZSBpcyBzZXQgdG8gYSB2YWx1ZSB0aGF0IGlzIGhpZ2ggZW5vdWdoIHRoYXRcbiAgICAgICAgICogdXBkYXRlKCkgY2FsbHMgdXN1YWxseSB0YWtlIGxlc3MgdGltZSB0aGFuIHRoZSBhbW91bnQgb2YgdGltZSB0aGV5J3JlXG4gICAgICAgICAqIHNpbXVsYXRpbmcuIElmIGl0IGRvZXMgc3RhcnQgdG8gaGFwcGVuIGFueXdheSwgc2VlIGBNYWluTG9vcC5zZXRFbmQoKWBcbiAgICAgICAgICogZm9yIGEgZGlzY3Vzc2lvbiBvZiB3YXlzIHRvIHN0b3AgaXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEFkZGl0aW9uYWxseSwgc2VlIGBNYWluTG9vcC5zZXRVcGRhdGUoKWAgZm9yIGEgZGlzY3Vzc2lvbiBvZiBwZXJmb3JtYW5jZVxuICAgICAgICAgKiBjb25zaWRlcmF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogRnVydGhlciByZWFkaW5nIGZvciB0aG9zZSBpbnRlcmVzdGVkOlxuICAgICAgICAgKlxuICAgICAgICAgKiAtIGh0dHA6Ly9nYW1lcHJvZ3JhbW1pbmdwYXR0ZXJucy5jb20vZ2FtZS1sb29wLmh0bWxcbiAgICAgICAgICogLSBodHRwOi8vZ2FmZmVyb25nYW1lcy5jb20vZ2FtZS1waHlzaWNzL2ZpeC15b3VyLXRpbWVzdGVwL1xuICAgICAgICAgKiAtIGh0dHBzOi8vZ2FtZWFsY2hlbWlzdC53b3JkcHJlc3MuY29tLzIwMTMvMDMvMTYvdGhvdWdodHMtb24tdGhlLWphdmFzY3JpcHQtZ2FtZS1sb29wL1xuICAgICAgICAgKiAtIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2FtZXMvQW5hdG9teVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5udW1VcGRhdGVTdGVwcyA9IDA7XG4gICAgICAgIHdoaWxlICh0aGlzLmZyYW1lRGVsdGEgPj0gdGhpcy5zaW11bGF0aW9uVGltZXN0ZXApIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMuc2ltdWxhdGlvblRpbWVzdGVwKTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVEZWx0YSAtPSB0aGlzLnNpbXVsYXRpb25UaW1lc3RlcDtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIFNhbml0eSBjaGVjazogYmFpbCBpZiB3ZSBydW4gdGhlIGxvb3AgdG9vIG1hbnkgdGltZXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogT25lIHdheSB0aGlzIGNvdWxkIGhhcHBlbiBpcyBpZiB1cGRhdGUoKSB0YWtlcyBsb25nZXIgdG8gcnVuIHRoYW5cbiAgICAgICAgICAgICAqIHRoZSB0aW1lIGl0IHNpbXVsYXRlcywgdGhlcmVieSBjYXVzaW5nIGEgc3BpcmFsIG9mIGRlYXRoLiBGb3Igd2F5c1xuICAgICAgICAgICAgICogdG8gYXZvaWQgdGhpcywgc2VlIGBNYWluTG9vcC5zZXRFbmQoKWAuIEFub3RoZXIgd2F5IHRoaXMgY291bGRcbiAgICAgICAgICAgICAqIGhhcHBlbiBpcyBpZiB0aGUgYnJvd3NlciB0aHJvdHRsZXMgc2VydmluZyBmcmFtZXMsIHdoaWNoIHR5cGljYWxseVxuICAgICAgICAgICAgICogb2NjdXJzIHdoZW4gdGhlIHRhYiBpcyBpbiB0aGUgYmFja2dyb3VuZCBvciB0aGUgZGV2aWNlIGJhdHRlcnkgaXNcbiAgICAgICAgICAgICAqIGxvdy4gQW4gZXZlbnQgb3V0c2lkZSBvZiB0aGUgbWFpbiBsb29wIHN1Y2ggYXMgYXVkaW8gcHJvY2Vzc2luZyBvclxuICAgICAgICAgICAgICogc3luY2hyb25vdXMgcmVzb3VyY2UgcmVhZHMgY291bGQgYWxzbyBjYXVzZSB0aGUgYXBwbGljYXRpb24gdG8gaGFuZ1xuICAgICAgICAgICAgICogdGVtcG9yYXJpbHkgYW5kIGFjY3VtdWxhdGUgbm90LXlldC1zaW11bGF0ZWQgdGltZSBhcyBhIHJlc3VsdC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAyNDAgaXMgY2hvc2VuIGJlY2F1c2UsIGZvciBhbnkgc2FuZSB2YWx1ZSBvZiBzaW11bGF0aW9uVGltZXN0ZXAsIDI0MFxuICAgICAgICAgICAgICogdXBkYXRlcyB3aWxsIHNpbXVsYXRlIGF0IGxlYXN0IG9uZSBzZWNvbmQsIGFuZCBpdCB3aWxsIHNpbXVsYXRlIGZvdXJcbiAgICAgICAgICAgICAqIHNlY29uZHMgd2l0aCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBzaW11bGF0aW9uVGltZXN0ZXAuIChTYWZhcmlcbiAgICAgICAgICAgICAqIG5vdGlmaWVzIHVzZXJzIHRoYXQgdGhlIHNjcmlwdCBpcyB0YWtpbmcgdG9vIGxvbmcgdG8gcnVuIGlmIGl0IHRha2VzXG4gICAgICAgICAgICAgKiBtb3JlIHRoYW4gZml2ZSBzZWNvbmRzLilcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSBhcmUgbW9yZSB1cGRhdGVzIHRvIHJ1biBpbiBhIGZyYW1lIHRoYW4gdGhpcywgdGhlXG4gICAgICAgICAgICAgKiBhcHBsaWNhdGlvbiB3aWxsIGFwcGVhciB0byBzbG93IGRvd24gdG8gdGhlIHVzZXIgdW50aWwgaXQgY2F0Y2hlc1xuICAgICAgICAgICAgICogYmFjayB1cC4gSW4gbmV0d29ya2VkIGFwcGxpY2F0aW9ucyB0aGlzIHdpbGwgdXN1YWxseSBjYXVzZSB0aGUgdXNlclxuICAgICAgICAgICAgICogdG8gZ2V0IG91dCBvZiBzeW5jIHdpdGggdGhlaXIgcGVlcnMsIGJ1dCBpZiB0aGUgdXBkYXRlcyBhcmUgdGFraW5nXG4gICAgICAgICAgICAgKiB0aGlzIGxvbmcgYWxyZWFkeSwgdGhleSdyZSBwcm9iYWJseSBhbHJlYWR5IG91dCBvZiBzeW5jLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoKyt0aGlzLm51bVVwZGF0ZVN0ZXBzID49IDI0MCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFuaWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmVuZGVyIHRoZSBzY3JlZW4uIFdlIGRvIHRoaXMgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHVwZGF0ZSgpIGhhcyBydW5cbiAgICAgICAgICogZHVyaW5nIHRoaXMgZnJhbWUgYmVjYXVzZSBpdCBpcyBwb3NzaWJsZSB0byBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHVwZGF0ZXNcbiAgICAgICAgICogdG8gbWFrZSB0aGUgZnJhbWUgcmF0ZSBhcHBlYXIgZmFzdGVyIHRoYW4gdXBkYXRlcyBhcmUgYWN0dWFsbHlcbiAgICAgICAgICogaGFwcGVuaW5nLiBTZWUgYE1haW5Mb29wLnNldERyYXcoKWAgZm9yIGFuIGV4cGxhbmF0aW9uIG9mIGhvdyB0byBkb1xuICAgICAgICAgKiB0aGF0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBXZSBkcmF3IGFmdGVyIHVwZGF0aW5nIGJlY2F1c2Ugd2Ugd2FudCB0aGUgc2NyZWVuIHRvIHJlZmxlY3QgYSBzdGF0ZSBvZlxuICAgICAgICAgKiB0aGUgYXBwbGljYXRpb24gdGhhdCBpcyBhcyB1cC10by1kYXRlIGFzIHBvc3NpYmxlLiAoYE1haW5Mb29wLnN0YXJ0KClgXG4gICAgICAgICAqIGRyYXdzIHRoZSB2ZXJ5IGZpcnN0IGZyYW1lIGluIHRoZSBhcHBsaWNhdGlvbidzIGluaXRpYWwgc3RhdGUsIGJlZm9yZVxuICAgICAgICAgKiBhbnkgdXBkYXRlcyBoYXZlIG9jY3VycmVkLikgU29tZSBzb3VyY2VzIHNwZWN1bGF0ZSB0aGF0IHJlbmRlcmluZ1xuICAgICAgICAgKiBlYXJsaWVyIGluIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgY2FsbGJhY2sgY2FuIGdldCB0aGUgc2NyZWVuIHBhaW50ZWRcbiAgICAgICAgICogZmFzdGVyOyB0aGlzIGlzIG1vc3RseSBub3QgdHJ1ZSwgYW5kIGV2ZW4gd2hlbiBpdCBpcywgaXQncyB1c3VhbGx5IGp1c3RcbiAgICAgICAgICogYSB0cmFkZS1vZmYgYmV0d2VlbiByZW5kZXJpbmcgdGhlIGN1cnJlbnQgZnJhbWUgc29vbmVyIGFuZCByZW5kZXJpbmcgdGhlXG4gICAgICAgICAqIG5leHQgZnJhbWUgbGF0ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBgTWFpbkxvb3Auc2V0RHJhdygpYCBmb3IgZGV0YWlscyBhYm91dCBkcmF3KCkgaXRzZWxmLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMuZnJhbWVEZWx0YSAvIHRoaXMuc2ltdWxhdGlvblRpbWVzdGVwKTtcblxuICAgICAgICAvLyBSdW4gYW55IHVwZGF0ZXMgdGhhdCBhcmUgbm90IGRlcGVuZGVudCBvbiB0aW1lIGluIHRoZSBzaW11bGF0aW9uLiBTZWVcbiAgICAgICAgLy8gYE1haW5Mb29wLnNldEVuZCgpYCBmb3IgYWRkaXRpb25hbCBkZXRhaWxzIG9uIGhvdyB0byB1c2UgdGhpcy5cbiAgICAgICAgdGhpcy5lbmQodGhpcy5mcHMsIHRoaXMucGFuaWMpO1xuXG4gICAgICAgIHRoaXMucGFuaWMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTVUJDTEFTU0VTIE1VU1QgT1ZFUlJJREUgRk9VUiBSRVFVSVJFRCBNRVRIT0RTOlxuICAgICAgICAvLyBiZWdpblxuICAgICAgICAvLyB1cGRhdGVcbiAgICAgICAgLy8gZHJhd1xuICAgICAgICAvLyBlbmRcblxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBydW5zIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1haW4gbG9vcC5cbiAgICAgKlxuICAgICAqIFRoZSBiZWdpbigpIGZ1bmN0aW9uIGlzIHR5cGljYWxseSB1c2VkIHRvIHByb2Nlc3MgaW5wdXQgYmVmb3JlIHRoZVxuICAgICAqIHVwZGF0ZXMgcnVuLiBQcm9jZXNzaW5nIGlucHV0IGhlcmUgKGluIGNodW5rcykgY2FuIHJlZHVjZSB0aGUgcnVubmluZ1xuICAgICAqIHRpbWUgb2YgZXZlbnQgaGFuZGxlcnMsIHdoaWNoIGlzIHVzZWZ1bCBiZWNhdXNlIGxvbmctcnVubmluZyBldmVudFxuICAgICAqIGhhbmRsZXJzIGNhbiBzb21ldGltZXMgZGVsYXkgZnJhbWVzLlxuICAgICAqXG4gICAgICogVW5saWtlIHtAbGluayAjc2V0VXBkYXRlIHVwZGF0ZX0oKSwgd2hpY2ggY2FuIHJ1biB6ZXJvIG9yIG1vcmUgdGltZXMgcGVyXG4gICAgICogZnJhbWUsIGJlZ2luKCkgYWx3YXlzIHJ1bnMgZXhhY3RseSBvbmNlIHBlciBmcmFtZS4gVGhpcyBtYWtlcyBpdCB1c2VmdWxcbiAgICAgKiBmb3IgYW55IHVwZGF0ZXMgdGhhdCBhcmUgbm90IGRlcGVuZGVudCBvbiB0aW1lIGluIHRoZSBzaW11bGF0aW9uLlxuICAgICAqIEV4YW1wbGVzIGluY2x1ZGUgYWRqdXN0aW5nIEhVRCBjYWxjdWxhdGlvbnMgb3IgcGVyZm9ybWluZyBsb25nLXJ1bm5pbmdcbiAgICAgKiB1cGRhdGVzIGluY3JlbWVudGFsbHkuIENvbXBhcmVkIHRvIHtAbGluayAjc2V0RW5kIGVuZH0oKSwgZ2VuZXJhbGx5XG4gICAgICogYWN0aW9ucyBzaG91bGQgb2NjdXIgaW4gYmVnaW4oKSBpZiB0aGV5IGFmZmVjdCBhbnl0aGluZyB0aGF0XG4gICAgICoge0BsaW5rICNzZXRVcGRhdGUgdXBkYXRlfSgpIG9yIHtAbGluayAjc2V0RHJhdyBkcmF3fSgpIHVzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGJlZ2luXG4gICAgICogICBUaGUgYmVnaW4oKSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JlZ2luLnRpbWVzdGFtcF1cbiAgICAgKiAgIFRoZSBjdXJyZW50IHRpbWVzdGFtcCAod2hlbiB0aGUgZnJhbWUgc3RhcnRlZCksIGluIG1pbGxpc2Vjb25kcy4gVGhpc1xuICAgICAqICAgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY29tcGFyaXNvbiB0byBvdGhlciB0aW1lc3RhbXBzIGJlY2F1c2UgdGhlXG4gICAgICogICBlcG9jaCAoaS5lLiB0aGUgXCJ6ZXJvXCIgdGltZSkgZGVwZW5kcyBvbiB0aGUgZW5naW5lIHJ1bm5pbmcgdGhpcyBjb2RlLlxuICAgICAqICAgSW4gZW5naW5lcyB0aGF0IHN1cHBvcnQgYERPTUhpZ2hSZXNUaW1lU3RhbXBgIChhbGwgbW9kZXJuIGJyb3dzZXJzXG4gICAgICogICBleGNlcHQgaU9TIFNhZmFyaSA4KSB0aGUgZXBvY2ggaXMgdGhlIHRpbWUgdGhlIHBhZ2Ugc3RhcnRlZCBsb2FkaW5nLFxuICAgICAqICAgc3BlY2lmaWNhbGx5IGBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0YC4gRXZlcnl3aGVyZSBlbHNlLFxuICAgICAqICAgaW5jbHVkaW5nIG5vZGUuanMsIHRoZSBlcG9jaCBpcyB0aGUgVW5peCBlcG9jaCAoMTk3MC0wMS0wMVQwMDowMDowMFopLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYmVnaW4uZGVsdGFdXG4gICAgICogICBUaGUgdG90YWwgZWxhcHNlZCB0aW1lIHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBzaW11bGF0ZWQsIGluXG4gICAgICogICBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgYWJzdHJhY3QgYmVnaW4odGltZXN0YW1wIDogbnVtYmVyLCBkZWx0YSA6IG51bWJlcikgOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IHJ1bnMgdXBkYXRlcyAoaS5lLiBBSSBhbmQgcGh5c2ljcykuXG4gICAgICpcbiAgICAgKiBUaGUgdXBkYXRlKCkgZnVuY3Rpb24gc2hvdWxkIHNpbXVsYXRlIGFueXRoaW5nIHRoYXQgaXMgYWZmZWN0ZWQgYnkgdGltZS5cbiAgICAgKiBJdCBjYW4gYmUgY2FsbGVkIHplcm8gb3IgbW9yZSB0aW1lcyBwZXIgZnJhbWUgZGVwZW5kaW5nIG9uIHRoZSBmcmFtZVxuICAgICAqIHJhdGUuXG4gICAgICpcbiAgICAgKiBBcyB3aXRoIGV2ZXJ5dGhpbmcgaW4gdGhlIG1haW4gbG9vcCwgdGhlIHJ1bm5pbmcgdGltZSBvZiB1cGRhdGUoKVxuICAgICAqIGRpcmVjdGx5IGFmZmVjdHMgdGhlIGZyYW1lIHJhdGUuIElmIHVwZGF0ZSgpIHRha2VzIGxvbmcgZW5vdWdoIHRoYXQgdGhlXG4gICAgICogZnJhbWUgcmF0ZSBkcm9wcyBiZWxvdyB0aGUgdGFyZ2V0IChcImJ1ZGdldGVkXCIpIGZyYW1lIHJhdGUsIHBhcnRzIG9mIHRoZVxuICAgICAqIHVwZGF0ZSgpIGZ1bmN0aW9uIHRoYXQgZG8gbm90IG5lZWQgdG8gZXhlY3V0ZSBiZXR3ZWVuIGV2ZXJ5IGZyYW1lIGNhbiBiZVxuICAgICAqIG1vdmVkIGludG8gV2ViIFdvcmtlcnMuIChWYXJpb3VzIHNvdXJjZXMgb24gdGhlIGludGVybmV0IHNvbWV0aW1lc1xuICAgICAqIHN1Z2dlc3Qgb3RoZXIgc2NoZWR1bGluZyBwYXR0ZXJucyB1c2luZyBzZXRUaW1lb3V0KCkgb3Igc2V0SW50ZXJ2YWwoKS5cbiAgICAgKiBUaGVzZSBhcHByb2FjaGVzIHNvbWV0aW1lcyBvZmZlciBtb2Rlc3QgaW1wcm92ZW1lbnRzIHdpdGggbWluaW1hbFxuICAgICAqIGNoYW5nZXMgdG8gZXhpc3RpbmcgY29kZSwgYnV0IGJlY2F1c2UgSmF2YVNjcmlwdCBpcyBzaW5nbGUtdGhyZWFkZWQsIHRoZVxuICAgICAqIHVwZGF0ZXMgd2lsbCBzdGlsbCBibG9jayByZW5kZXJpbmcgYW5kIGRyYWcgZG93biB0aGUgZnJhbWUgcmF0ZS4gV2ViXG4gICAgICogV29ya2VycyBleGVjdXRlIGluIHNlcGFyYXRlIHRocmVhZHMsIHNvIHRoZXkgZnJlZSB1cCBtb3JlIHRpbWUgaW4gdGhlXG4gICAgICogbWFpbiBsb29wLilcbiAgICAgKlxuICAgICAqIFRoaXMgc2NyaXB0IGNhbiBiZSBpbXBvcnRlZCBpbnRvIGEgV2ViIFdvcmtlciB1c2luZyBpbXBvcnRTY3JpcHRzKCkgYW5kXG4gICAgICogdXNlZCB0byBydW4gYSBzZWNvbmQgbWFpbiBsb29wIGluIHRoZSB3b3JrZXIuIFNvbWUgY29uc2lkZXJhdGlvbnM6XG4gICAgICpcbiAgICAgKiAtIFByb2ZpbGUgeW91ciBjb2RlIGJlZm9yZSBkb2luZyB0aGUgd29yayB0byBtb3ZlIGl0IGludG8gV2ViIFdvcmtlcnMuXG4gICAgICogICBJdCBjb3VsZCBiZSB0aGUgcmVuZGVyaW5nIHRoYXQgaXMgdGhlIGJvdHRsZW5lY2ssIGluIHdoaWNoIGNhc2UgdGhlXG4gICAgICogICBzb2x1dGlvbiBpcyB0byBkZWNyZWFzZSB0aGUgdmlzdWFsIGNvbXBsZXhpdHkgb2YgdGhlIHNjZW5lLlxuICAgICAqIC0gSXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIG1vdmUgdGhlICplbnRpcmUqIGNvbnRlbnRzIG9mIHVwZGF0ZSgpIGludG9cbiAgICAgKiAgIHdvcmtlcnMgdW5sZXNzIHtAbGluayAjc2V0RHJhdyBkcmF3fSgpIGNhbiBpbnRlcnBvbGF0ZSBiZXR3ZWVuIGZyYW1lcy5cbiAgICAgKiAgIFRoZSBsb3dlc3QtaGFuZ2luZyBmcnVpdCBpcyBiYWNrZ3JvdW5kIHVwZGF0ZXMgKGxpa2UgY2FsY3VsYXRpbmdcbiAgICAgKiAgIGNpdGl6ZW5zJyBoYXBwaW5lc3MgaW4gYSBjaXR5LWJ1aWxkaW5nIGdhbWUpLCBwaHlzaWNzIHRoYXQgZG9lc24ndFxuICAgICAqICAgYWZmZWN0IHRoZSBzY2VuZSAobGlrZSBmbGFncyB3YXZpbmcgaW4gdGhlIHdpbmQpLCBhbmQgYW55dGhpbmcgdGhhdCBpc1xuICAgICAqICAgb2NjbHVkZWQgb3IgaGFwcGVuaW5nIGZhciBvZmYgc2NyZWVuLlxuICAgICAqIC0gSWYgZHJhdygpIG5lZWRzIHRvIGludGVycG9sYXRlIHBoeXNpY3MgYmFzZWQgb24gYWN0aXZpdHkgdGhhdCBvY2N1cnNcbiAgICAgKiAgIGluIGEgd29ya2VyLCB0aGUgd29ya2VyIG5lZWRzIHRvIHBhc3MgdGhlIGludGVycG9sYXRpb24gdmFsdWUgYmFjayB0b1xuICAgICAqICAgdGhlIG1haW4gdGhyZWFkIHNvIHRoYXQgaXMgaXMgYXZhaWxhYmxlIHRvIGRyYXcoKS5cbiAgICAgKiAtIFdlYiBXb3JrZXJzIGNhbid0IGFjY2VzcyB0aGUgc3RhdGUgb2YgdGhlIG1haW4gdGhyZWFkLCBzbyB0aGV5IGNhbid0XG4gICAgICogICBkaXJlY3RseSBtb2RpZnkgb2JqZWN0cyBpbiB5b3VyIHNjZW5lLiBNb3ZpbmcgZGF0YSB0byBhbmQgZnJvbSBXZWJcbiAgICAgKiAgIFdvcmtlcnMgaXMgYSBwYWluLiBUaGUgZmFzdGVzdCB3YXkgdG8gZG8gaXQgaXMgd2l0aCBUcmFuc2ZlcmFibGVcbiAgICAgKiAgIE9iamVjdHM6IGJhc2ljYWxseSwgeW91IGNhbiBwYXNzIGFuIEFycmF5QnVmZmVyIHRvIGEgd29ya2VyLFxuICAgICAqICAgZGVzdHJveWluZyB0aGUgb3JpZ2luYWwgcmVmZXJlbmNlIGluIHRoZSBwcm9jZXNzLlxuICAgICAqXG4gICAgICogWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgV2ViIFdvcmtlcnMgYW5kIFRyYW5zZmVyYWJsZSBPYmplY3RzIGF0XG4gICAgICogW0hUTUw1IFJvY2tzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93b3JrZXJzL2Jhc2ljcy8pLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlXG4gICAgICogICBUaGUgdXBkYXRlKCkgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt1cGRhdGUuZGVsdGFdXG4gICAgICogICBUaGUgYW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIHNpbXVsYXRlIGluIHRoZSB1cGRhdGUuIEluIG1vc3RcbiAgICAgKiAgIGNhc2VzIHRoaXMgdGltZXN0ZXAgbmV2ZXIgY2hhbmdlcyBpbiBvcmRlciB0byBlbnN1cmUgZGV0ZXJtaW5pc3RpY1xuICAgICAqICAgdXBkYXRlcy4gVGhlIHRpbWVzdGVwIGlzIHRoZSBzYW1lIGFzIHRoYXQgcmV0dXJuZWQgYnlcbiAgICAgKiAgIGBNYWluTG9vcC5nZXRTaW11bGF0aW9uVGltZXN0ZXAoKWAuXG4gICAgICovXG4gICAgYWJzdHJhY3QgdXBkYXRlKHRpbWVTdGVwIDogbnVtYmVyKSA6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgZHJhd3MgdGhpbmdzIG9uIHRoZSBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBUaGUgZHJhdygpIGZ1bmN0aW9uIGdldHMgcGFzc2VkIHRoZSBwZXJjZW50IG9mIHRpbWUgdGhhdCB0aGUgbmV4dCBydW4gb2ZcbiAgICAgKiB7QGxpbmsgI3NldFVwZGF0ZSB1cGRhdGV9KCkgd2lsbCBzaW11bGF0ZSB0aGF0IGhhcyBhY3R1YWxseSBlbGFwc2VkLCBhc1xuICAgICAqIGEgZGVjaW1hbC4gSW4gb3RoZXIgd29yZHMsIGRyYXcoKSBnZXRzIHBhc3NlZCBob3cgZmFyIGJldHdlZW4gdXBkYXRlKClcbiAgICAgKiBjYWxscyBpdCBpcy4gVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSB0aGUgdGltZSBzaW11bGF0ZWQgYnkgdXBkYXRlKCkgYW5kXG4gICAgICogdGhlIHRpbWUgYmV0d2VlbiBkcmF3KCkgY2FsbHMgaXMgdXN1YWxseSBkaWZmZXJlbnQsIHNvIHRoZSBwYXJhbWV0ZXIgdG9cbiAgICAgKiBkcmF3KCkgY2FuIGJlIHVzZWQgdG8gaW50ZXJwb2xhdGUgbW90aW9uIGJldHdlZW4gZnJhbWVzIHRvIG1ha2VcbiAgICAgKiByZW5kZXJpbmcgYXBwZWFyIHNtb290aGVyLiBUbyBpbGx1c3RyYXRlLCBpZiB1cGRhdGUoKSBhZHZhbmNlcyB0aGVcbiAgICAgKiBzaW11bGF0aW9uIGF0IGVhY2ggdmVydGljYWwgYmFyIGluIHRoZSBmaXJzdCByb3cgYmVsb3csIGFuZCBkcmF3KCkgY2FsbHNcbiAgICAgKiBoYXBwZW4gYXQgZWFjaCB2ZXJ0aWNhbCBiYXIgaW4gdGhlIHNlY29uZCByb3cgYmVsb3csIHRoZW4gc29tZSBmcmFtZXNcbiAgICAgKiB3aWxsIGhhdmUgdGltZSBsZWZ0IG92ZXIgdGhhdCBpcyBub3QgeWV0IHNpbXVsYXRlZCBieSB1cGRhdGUoKSB3aGVuXG4gICAgICogcmVuZGVyaW5nIG9jY3VycyBpbiBkcmF3KCk6XG4gICAgICpcbiAgICAgKiAgICAgdXBkYXRlKCkgdGltZXN0ZXBzOiAgfCAgfCAgfCAgfCAgfCAgfCAgfCAgfCAgfFxuICAgICAqICAgICBkcmF3KCkgY2FsbHM6ICAgICAgICB8ICAgfCAgIHwgICB8ICAgfCAgIHwgICB8XG4gICAgICpcbiAgICAgKiBUbyBpbnRlcnBvbGF0ZSBtb3Rpb24gZm9yIHJlbmRlcmluZyBwdXJwb3Nlcywgb2JqZWN0cycgc3RhdGUgYWZ0ZXIgdGhlXG4gICAgICogbGFzdCB1cGRhdGUoKSBtdXN0IGJlIHJldGFpbmVkIGFuZCB1c2VkIHRvIGNhbGN1bGF0ZSBhbiBpbnRlcm1lZGlhdGVcbiAgICAgKiBzdGF0ZS4gTm90ZSB0aGF0IHRoaXMgbWVhbnMgcmVuZGVycyB3aWxsIGJlIHVwIHRvIG9uZSB1cGRhdGUoKSBiZWhpbmQuXG4gICAgICogVGhpcyBpcyBzdGlsbCBiZXR0ZXIgdGhhbiBleHRyYXBvbGF0aW5nIChwcm9qZWN0aW5nIG9iamVjdHMnIHN0YXRlIGFmdGVyXG4gICAgICogYSBmdXR1cmUgdXBkYXRlKCkpIHdoaWNoIGNhbiBwcm9kdWNlIGJpemFycmUgcmVzdWx0cy4gU3RvcmluZyBtdWx0aXBsZVxuICAgICAqIHN0YXRlcyBjYW4gYmUgZGlmZmljdWx0IHRvIHNldCB1cCwgYW5kIGtlZXAgaW4gbWluZCB0aGF0IHJ1bm5pbmcgdGhpc1xuICAgICAqIHByb2Nlc3MgdGFrZXMgdGltZSB0aGF0IGNvdWxkIHB1c2ggdGhlIGZyYW1lIHJhdGUgZG93biwgc28gaXQncyBvZnRlblxuICAgICAqIG5vdCB3b3J0aHdoaWxlIHVubGVzcyBzdHV0dGVyaW5nIGlzIHZpc2libGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmF3XG4gICAgICogICBUaGUgZHJhdygpIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZHJhdy5pbnRlcnBvbGF0aW9uUGVyY2VudGFnZV1cbiAgICAgKiAgIFRoZSBjdW11bGF0aXZlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzbid0IGJlZW4gc2ltdWxhdGVkIHlldCwgZGl2aWRlZFxuICAgICAqICAgYnkgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgd2lsbCBiZSBzaW11bGF0ZWQgdGhlIG5leHQgdGltZSB1cGRhdGUoKVxuICAgICAqICAgcnVucy4gVXNlZnVsIGZvciBpbnRlcnBvbGF0aW5nIGZyYW1lcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZHJhdyhpbnRlcnBvbGF0aW9uUGVyY2VudGFnZSA6IG51bWJlcikgOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IHJ1bnMgYXQgdGhlIGVuZCBvZiB0aGUgbWFpbiBsb29wLlxuICAgICAqXG4gICAgICogVW5saWtlIHtAbGluayAjc2V0VXBkYXRlIHVwZGF0ZX0oKSwgd2hpY2ggY2FuIHJ1biB6ZXJvIG9yIG1vcmUgdGltZXMgcGVyXG4gICAgICogZnJhbWUsIGVuZCgpIGFsd2F5cyBydW5zIGV4YWN0bHkgb25jZSBwZXIgZnJhbWUuIFRoaXMgbWFrZXMgaXQgdXNlZnVsXG4gICAgICogZm9yIGFueSB1cGRhdGVzIHRoYXQgYXJlIG5vdCBkZXBlbmRlbnQgb24gdGltZSBpbiB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKiBFeGFtcGxlcyBpbmNsdWRlIGNsZWFuaW5nIHVwIGFueSB0ZW1wb3Jhcnkgc3RhdGUgc2V0IHVwIGJ5XG4gICAgICoge0BsaW5rICNzZXRCZWdpbiBiZWdpbn0oKSwgbG93ZXJpbmcgdGhlIHZpc3VhbCBxdWFsaXR5IGlmIHRoZSBmcmFtZSByYXRlXG4gICAgICogaXMgdG9vIGxvdywgb3IgcGVyZm9ybWluZyBsb25nLXJ1bm5pbmcgdXBkYXRlcyBpbmNyZW1lbnRhbGx5LiBDb21wYXJlZFxuICAgICAqIHRvIGJlZ2luKCksIGdlbmVyYWxseSBhY3Rpb25zIHNob3VsZCBvY2N1ciBpbiBlbmQoKSBpZiB0aGV5IHVzZSBhbnl0aGluZ1xuICAgICAqIHRoYXQgdXBkYXRlKCkgb3Ige0BsaW5rICNzZXREcmF3IGRyYXd9KCkgYWZmZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kXG4gICAgICogICBUaGUgZW5kKCkgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtlbmQuZnBzXVxuICAgICAqICAgVGhlIGV4cG9uZW50aWFsIG1vdmluZyBhdmVyYWdlIG9mIHRoZSBmcmFtZXMgcGVyIHNlY29uZC4gVGhpcyBpcyB0aGVcbiAgICAgKiAgIHNhbWUgdmFsdWUgcmV0dXJuZWQgYnkgYE1haW5Mb29wLmdldEZQUygpYC4gSXQgY2FuIGJlIHVzZWQgdG8gdGFrZVxuICAgICAqICAgYWN0aW9uIHdoZW4gdGhlIEZQUyBpcyB0b28gbG93IChvciB0byByZXN0b3JlIHRvIG5vcm1hbGN5IGlmIHRoZSBGUFNcbiAgICAgKiAgIG1vdmVzIGJhY2sgdXApLiBFeGFtcGxlcyBvZiBhY3Rpb25zIHRvIHRha2UgaWYgdGhlIEZQUyBpcyB0b28gbG93XG4gICAgICogICBpbmNsdWRlIGV4aXRpbmcgdGhlIGFwcGxpY2F0aW9uLCBsb3dlcmluZyB0aGUgdmlzdWFsIHF1YWxpdHksIHN0b3BwaW5nXG4gICAgICogICBvciByZWR1Y2luZyBhY3Rpdml0aWVzIG91dHNpZGUgb2YgdGhlIG1haW4gbG9vcCBsaWtlIGV2ZW50IGhhbmRsZXJzIG9yXG4gICAgICogICBhdWRpbyBwbGF5YmFjaywgcGVyZm9ybWluZyBub24tY3JpdGljYWwgdXBkYXRlcyBsZXNzIGZyZXF1ZW50bHksIG9yXG4gICAgICogICBpbmNyZWFzaW5nIHRoZSBzaW11bGF0aW9uIHRpbWVzdGVwIChieSBjYWxsaW5nXG4gICAgICogICBgTWFpbkxvb3Auc2V0U2ltdWxhdGlvblRpbWVzdGVwKClgKS4gTm90ZSB0aGF0IHRoaXMgbGFzdCBvcHRpb25cbiAgICAgKiAgIHJlc3VsdHMgaW4gbW9yZSB0aW1lIGJlaW5nIHNpbXVsYXRlZCBwZXIgdXBkYXRlKCkgY2FsbCwgd2hpY2ggY2F1c2VzXG4gICAgICogICB0aGUgYXBwbGljYXRpb24gdG8gYmVoYXZlIG5vbi1kZXRlcm1pbmlzdGljYWxseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtlbmQucGFuaWM9ZmFsc2VdXG4gICAgICogICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc2ltdWxhdGlvbiBoYXMgZmFsbGVuIHRvbyBmYXIgYmVoaW5kIHJlYWwgdGltZS5cbiAgICAgKiAgIFNwZWNpZmljYWxseSwgYHBhbmljYCB3aWxsIGJlIGB0cnVlYCBpZiB0b28gbWFueSB1cGRhdGVzIG9jY3VycmVkIGluXG4gICAgICogICBvbmUgZnJhbWUuIEluIG5ldHdvcmtlZCBsb2Nrc3RlcCBhcHBsaWNhdGlvbnMsIHRoZSBhcHBsaWNhdGlvbiBzaG91bGRcbiAgICAgKiAgIHdhaXQgZm9yIHNvbWUgYW1vdW50IG9mIHRpbWUgdG8gc2VlIGlmIHRoZSB1c2VyIGNhbiBjYXRjaCB1cCBiZWZvcmVcbiAgICAgKiAgIGRyb3BwaW5nIHRoZSB1c2VyLiBJbiBuZXR3b3JrZWQgYnV0IG5vbi1sb2Nrc3RlcCBhcHBsaWNhdGlvbnMsIHRoaXNcbiAgICAgKiAgIHR5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCB0aGUgdXNlciBuZWVkcyB0byBiZSBzbmFwcGVkIG9yIGVhc2VkIHRvIHRoZVxuICAgICAqICAgY3VycmVudCBhdXRob3JpdGF0aXZlIHN0YXRlLiBXaGVuIHRoaXMgaGFwcGVucywgaXQgbWF5IGJlIGNvbnZlbmllbnRcbiAgICAgKiAgIHRvIGNhbGwgYE1haW5Mb29wLnJlc2V0RnJhbWVEZWx0YSgpYCB0byBkaXNjYXJkIGFjY3VtdWxhdGVkIHBlbmRpbmdcbiAgICAgKiAgIHVwZGF0ZXMuIEluIG5vbi1uZXR3b3JrZWQgYXBwbGljYXRpb25zLCBpdCBtYXkgYmUgYWNjZXB0YWJsZSB0byBhbGxvd1xuICAgICAqICAgdGhlIGFwcGxpY2F0aW9uIHRvIGtlZXAgcnVubmluZyBmb3IgYXdoaWxlIHRvIHNlZSBpZiBpdCB3aWxsIGNhdGNoIHVwLlxuICAgICAqICAgSG93ZXZlciwgdGhpcyBjb3VsZCBhbHNvIGNhdXNlIHRoZSBhcHBsaWNhdGlvbiB0byBsb29rIGxpa2UgaXQgaXNcbiAgICAgKiAgIHJ1bm5pbmcgdmVyeSBxdWlja2x5IGZvciBhIGZldyBmcmFtZXMgYXMgaXQgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGVcbiAgICAgKiAgIGludGVybWVkaWF0ZSBzdGF0ZXMuIEFuIGFsdGVybmF0aXZlIHRoYXQgbWF5IGJlIGFjY2VwdGFibGUgaXMgdG9cbiAgICAgKiAgIHNpbXBseSBpZ25vcmUgdGhlIHVuc2ltdWxhdGVkIGVsYXBzZWQgdGltZSBieSBjYWxsaW5nXG4gICAgICogICBgTWFpbkxvb3AucmVzZXRGcmFtZURlbHRhKClgIGV2ZW4gdGhvdWdoIHRoaXMgaW50cm9kdWNlc1xuICAgICAqICAgbm9uLWRldGVybWluaXN0aWMgYmVoYXZpb3IuIEluIGFsbCBjYXNlcywgaWYgdGhlIGFwcGxpY2F0aW9uIHBhbmljc1xuICAgICAqICAgZnJlcXVlbnRseSwgdGhpcyBpcyBhbiBpbmRpY2F0aW9uIHRoYXQgdGhlIG1haW4gbG9vcCBpcyBydW5uaW5nIHRvb1xuICAgICAqICAgc2xvd2x5LiBIb3dldmVyLCBtb3N0IG9mIHRoZSB0aW1lIHRoZSBkcm9wIGluIGZyYW1lIHJhdGUgd2lsbCBwcm9iYWJseVxuICAgICAqICAgYmUgbm90aWNlYWJsZSBiZWZvcmUgYSBwYW5pYyBvY2N1cnMuIFRvIGhlbHAgdGhlIGFwcGxpY2F0aW9uIGNhdGNoIHVwXG4gICAgICogICBhZnRlciBhIHBhbmljIGNhdXNlZCBieSBhIHNwaXJhbCBvZiBkZWF0aCwgdGhlIHNhbWUgc3RlcHMgY2FuIGJlIHRha2VuXG4gICAgICogICB0aGF0IGFyZSBzdWdnZXN0ZWQgYWJvdmUgaWYgdGhlIEZQUyBkcm9wcyB0b28gbG93LlxuICAgICAqL1xuICAgIGFic3RyYWN0IGVuZChmcHMgOiBudW1iZXIsIHBhbmljIDogYm9vbGVhbikgOiB2b2lkO1xufSIsIi8qXG4gKiBNYXRoVXRpbGl0aWVzIHByb3ZpZGVzIGEgbnVtYmVyIG9mIHNlcnZpY2VzIGZvciByZW5kZXJpbmcgdXNpbmcgNHg0IG1hdHJpY2VzLCBsaWtlXG4gKiB0cmFuc2Zvcm10aW5nIChpLmUuIHRyYW5zbGF0aW9uLCByb3RhdGlvbiwgYW5kIHNjYWxpbmcpIDNkIG9yIDJkIHBvaW50cyBmcm9tIHdvcmxkXG4gKiBjb29yZGluYXRlIHN5c3RlbXMgdG8gc2NyZWVuIGNvb3JkaW5hdGUgc3lzdGVtcy5cbiAqL1xuaW1wb3J0IHtNYXRyaXh9IGZyb20gJy4vTWF0cml4J1xuaW1wb3J0IHtWZWN0b3IzfSBmcm9tICcuL1ZlY3RvcjMnXG5cbmV4cG9ydCBuYW1lc3BhY2UgTWF0aFV0aWxpdGllcyB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50NHg0KHJlc3VsdCA6IE1hdHJpeCkgOiBudW1iZXIge1xuICAgICAgICBsZXQgZGV0MCA9IHJlc3VsdC5nZXQoMCwgMCkgKiAoXG4gICAgICAgICAgICAocmVzdWx0LmdldCgxLCAxKSAqICgocmVzdWx0LmdldCgyLCAyKSAqIHJlc3VsdC5nZXQoMywgMykpIC0gKHJlc3VsdC5nZXQoMiwgMykgKiByZXN1bHQuZ2V0KDMsIDIpKSkpXG4gICAgICAgICAgICAtIChyZXN1bHQuZ2V0KDEsIDIpICogKChyZXN1bHQuZ2V0KDIsIDEpICogcmVzdWx0LmdldCgzLCAzKSkgLSAocmVzdWx0LmdldCgyLCAzKSAqIHJlc3VsdC5nZXQoMywgMSkpKSlcbiAgICAgICAgICAgICsgKHJlc3VsdC5nZXQoMSwgMykgKiAoKHJlc3VsdC5nZXQoMiwgMSkgKiByZXN1bHQuZ2V0KDMsIDIpKSAtIChyZXN1bHQuZ2V0KDMsIDEpICogcmVzdWx0LmdldCgyLCAyKSkpKSk7XG4gICAgICAgIGxldCBkZXQxID0gcmVzdWx0LmdldCgwLCAxKSAqIChcbiAgICAgICAgICAgIChyZXN1bHQuZ2V0KDEsIDApICogKChyZXN1bHQuZ2V0KDIsIDIpICogcmVzdWx0LmdldCgzLCAzKSkgLSAocmVzdWx0LmdldCgyLCAzKSAqIHJlc3VsdC5nZXQoMywgMikpKSlcbiAgICAgICAgICAgIC0gKHJlc3VsdC5nZXQoMSwgMikgKiAoKHJlc3VsdC5nZXQoMiwgMCkgKiByZXN1bHQuZ2V0KDMsIDMpKSAtIChyZXN1bHQuZ2V0KDMsIDApICogcmVzdWx0LmdldCgyLCAzKSkpKVxuICAgICAgICAgICAgKyAocmVzdWx0LmdldCgxLCAzKSAqICgocmVzdWx0LmdldCgyLCAwKSAqIHJlc3VsdC5nZXQoMywgMikpIC0gKHJlc3VsdC5nZXQoMywgMCkgKiByZXN1bHQuZ2V0KDIsIDIpKSkpKTtcbiAgICAgICAgbGV0IGRldDIgPSByZXN1bHQuZ2V0KDAsIDIpICogKFxuICAgICAgICAgICAgKHJlc3VsdC5nZXQoMSwgMCkgKiAoKHJlc3VsdC5nZXQoMiwgMSkgKiByZXN1bHQuZ2V0KDMsIDMpKSAtIChyZXN1bHQuZ2V0KDIsIDMpICogcmVzdWx0LmdldCgzLCAxKSkpKVxuICAgICAgICAgICAgLSAocmVzdWx0LmdldCgxLCAxKSAqICgocmVzdWx0LmdldCgyLCAwKSAqIHJlc3VsdC5nZXQoMywgMykpIC0gKHJlc3VsdC5nZXQoMiwgMykgKiByZXN1bHQuZ2V0KDMsIDApKSkpXG4gICAgICAgICAgICArIChyZXN1bHQuZ2V0KDEsIDMpICogKChyZXN1bHQuZ2V0KDIsIDApICogcmVzdWx0LmdldCgzLCAxKSkgLSAocmVzdWx0LmdldCgyLCAxKSAqIHJlc3VsdC5nZXQoMywgMCkpKSkpO1xuICAgICAgICBsZXQgZGV0MyA9IHJlc3VsdC5nZXQoMCwgMykgKiAoXG4gICAgICAgICAgICAocmVzdWx0LmdldCgxLCAwKSAqICgocmVzdWx0LmdldCgyLCAxKSAqIHJlc3VsdC5nZXQoMywgMikpIC0gKHJlc3VsdC5nZXQoMiwgMikgKiByZXN1bHQuZ2V0KDMsIDEpKSkpXG4gICAgICAgICAgICAtIChyZXN1bHQuZ2V0KDEsIDEpICogKChyZXN1bHQuZ2V0KDIsIDApICogcmVzdWx0LmdldCgzLCAyKSkgLSAocmVzdWx0LmdldCgyLCAyKSAqIHJlc3VsdC5nZXQoMywgMCkpKSlcbiAgICAgICAgICAgICsgKHJlc3VsdC5nZXQoMSwgMikgKiAoKHJlc3VsdC5nZXQoMiwgMCkgKiByZXN1bHQuZ2V0KDMsIDEpKSAtIChyZXN1bHQuZ2V0KDIsIDEpICogcmVzdWx0LmdldCgzLCAwKSkpKSk7XG4gICAgICAgIGxldCBkZXQgPSBkZXQwIC0gZGV0MSArIGRldDIgLSBkZXQzO1xuICAgICAgICBjb25zb2xlLmxvZyhcImRldCA9IFwiICsgZGV0MCArIFwiICsgXCIgKyBkZXQxICsgXCIgKyBcIiArIGRldDIgKyBcIiArIFwiICsgZGV0Myk7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShyZXN1bHQgOiBNYXRyaXgpIDogdm9pZCB7XG4gICAgICAgIGlmIChyZXN1bHQuZ2V0Um93cygpID09PSByZXN1bHQuZ2V0Q29sdW1ucygpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5nZXRSb3dzKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVzdWx0LmdldENvbHVtbnMoKTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBqKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldCgxLjAsIGksIGopO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KDAuMCwgaSwgaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHJlc3VsdCA6IE1hdHJpeCwgbWF0IDogTWF0cml4KSA6IHZvaWQge1xuICAgICAgICBsZXQgZGV0ID0gdGhpcy5kZXRlcm1pbmFudChtYXQpO1xuICAgICAgICBsZXQgbTAwID0gbWF0LmdldCgwLCAwKTsgbGV0IG0wMSA9IG1hdC5nZXQoMCwgMSk7IGxldCBtMDIgPSBtYXQuZ2V0KDAsIDIpOyBsZXQgbTAzID0gbWF0LmdldCgwLCAzKTtcbiAgICAgICAgbGV0IG0xMCA9IG1hdC5nZXQoMSwgMCk7IGxldCBtMTEgPSBtYXQuZ2V0KDEsIDEpOyBsZXQgbTEyID0gbWF0LmdldCgxLCAyKTsgbGV0IG0xMyA9IG1hdC5nZXQoMSwgMyk7XG4gICAgICAgIGxldCBtMjAgPSBtYXQuZ2V0KDIsIDApOyBsZXQgbTIxID0gbWF0LmdldCgyLCAxKTsgbGV0IG0yMiA9IG1hdC5nZXQoMiwgMik7IGxldCBtMjMgPSBtYXQuZ2V0KDIsIDMpO1xuICAgICAgICBsZXQgbTMwID0gbWF0LmdldCgzLCAwKTsgbGV0IG0zMSA9IG1hdC5nZXQoMywgMSk7IGxldCBtMzIgPSBtYXQuZ2V0KDMsIDIpOyBsZXQgbTMzID0gbWF0LmdldCgzLCAzKTtcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgTWF0cml4KDQsIDQpO1xuICAgICAgICB0ZW1wLnNldCgobTEyICogbTIzICogbTMxKSAtIChtMTMgKiBtMjIgKiBtMzEpICsgKG0xMyAqIG0yMSAqIG0zMikgLSAobTExICogbTIzICogbTMyKSAtIChtMTIgKiBtMjEgKiBtMzMpICsgKG0xMSAqIG0yMiAqIG0zMyksIDAsIDApO1xuICAgICAgICB0ZW1wLnNldCgobTAzICogbTIyICogbTMxKSAtIChtMDIgKiBtMjMgKiBtMzEpIC0gKG0wMyAqIG0yMSAqIG0zMikgKyAobTAxICogbTIzICogbTMyKSArIChtMDIgKiBtMjEgKiBtMzMpIC0gKG0wMSAqIG0yMiAqIG0zMyksIDAsIDEpO1xuICAgICAgICB0ZW1wLnNldCgobTAyICogbTEzICogbTMxKSAtIChtMDMgKiBtMTIgKiBtMzEpICsgKG0wMyAqIG0xMSAqIG0zMikgLSAobTAxICogbTEzICogbTMyKSAtIChtMDIgKiBtMTEgKiBtMzMpICsgKG0wMSAqIG0xMiAqIG0zMyksIDAsIDIpO1xuICAgICAgICB0ZW1wLnNldCgobTAzICogbTEyICogbTIxKSAtIChtMDIgKiBtMTMgKiBtMjEpIC0gKG0wMyAqIG0xMSAqIG0yMikgKyAobTAxICogbTEzICogbTIyKSArIChtMDIgKiBtMTEgKiBtMjMpIC0gKG0wMSAqIG0xMiAqIG0yMyksIDAsIDMpO1xuICAgICAgICB0ZW1wLnNldCgobTEzICogbTIyICogbTMwKSAtIChtMTIgKiBtMjMgKiBtMzApIC0gKG0xMyAqIG0yMCAqIG0zMikgKyAobTEwICogbTIzICogbTMyKSArIChtMTIgKiBtMjAgKiBtMzMpIC0gKG0xMCAqIG0yMiAqIG0zMyksIDEsIDApO1xuICAgICAgICB0ZW1wLnNldCgobTAyICogbTIzICogbTMwKSAtIChtMDMgKiBtMjIgKiBtMzApICsgKG0wMyAqIG0yMCAqIG0zMikgLSAobTAwICogbTIzICogbTMyKSAtIChtMDIgKiBtMjAgKiBtMzMpICsgKG0wMCAqIG0yMiAqIG0zMyksIDEsIDEpO1xuICAgICAgICB0ZW1wLnNldCgobTAzICogbTEyICogbTMwKSAtIChtMDIgKiBtMTMgKiBtMzApIC0gKG0wMyAqIG0xMCAqIG0zMikgKyAobTAwICogbTEzICogbTMyKSArIChtMDIgKiBtMTAgKiBtMzMpIC0gKG0wMCAqIG0xMiAqIG0zMyksIDEsIDIpO1xuICAgICAgICB0ZW1wLnNldCgobTAyICogbTEzICogbTIwKSAtIChtMDMgKiBtMTIgKiBtMjApICsgKG0wMyAqIG0xMCAqIG0yMikgLSAobTAwICogbTEzICogbTIyKSAtIChtMDIgKiBtMTAgKiBtMjMpICsgKG0wMCAqIG0xMiAqIG0yMyksIDEsIDMpO1xuICAgICAgICB0ZW1wLnNldCgobTExICogbTIzICogbTMwKSAtIChtMTMgKiBtMjEgKiBtMzApICsgKG0xMyAqIG0yMCAqIG0zMSkgLSAobTEwICogbTIzICogbTMxKSAtIChtMTEgKiBtMjAgKiBtMzMpICsgKG0xMCAqIG0yMSAqIG0zMyksIDIsIDApO1xuICAgICAgICB0ZW1wLnNldCgobTAzICogbTIxICogbTMwKSAtIChtMDEgKiBtMjMgKiBtMzApIC0gKG0wMyAqIG0yMCAqIG0zMSkgKyAobTAwICogbTIzICogbTMxKSArIChtMDEgKiBtMjAgKiBtMzMpIC0gKG0wMCAqIG0yMSAqIG0zMyksIDIsIDEpO1xuICAgICAgICB0ZW1wLnNldCgobTAxICogbTEzICogbTMwKSAtIChtMDMgKiBtMTEgKiBtMzApICsgKG0wMyAqIG0xMCAqIG0zMSkgLSAobTAwICogbTEzICogbTMxKSAtIChtMDEgKiBtMTAgKiBtMzMpICsgKG0wMCAqIG0xMSAqIG0zMyksIDIsIDIpO1xuICAgICAgICB0ZW1wLnNldCgobTAzICogbTExICogbTIwKSAtIChtMDEgKiBtMTMgKiBtMjApIC0gKG0wMyAqIG0xMCAqIG0yMSkgKyAobTAwICogbTEzICogbTIxKSArIChtMDEgKiBtMTAgKiBtMjMpIC0gKG0wMCAqIG0xMSAqIG0yMyksIDIsIDMpO1xuICAgICAgICB0ZW1wLnNldCgobTEyICogbTIxICogbTMwKSAtIChtMTEgKiBtMjIgKiBtMzApIC0gKG0xMiAqIG0yMCAqIG0zMSkgKyAobTEwICogbTIyICogbTMxKSArIChtMTEgKiBtMjAgKiBtMzIpIC0gKG0xMCAqIG0yMSAqIG0zMiksIDMsIDApO1xuICAgICAgICB0ZW1wLnNldCgobTAxICogbTIyICogbTMwKSAtIChtMDIgKiBtMjEgKiBtMzApICsgKG0wMiAqIG0yMCAqIG0zMSkgLSAobTAwICogbTIyICogbTMxKSAtIChtMDEgKiBtMjAgKiBtMzIpICsgKG0wMCAqIG0yMSAqIG0zMiksIDMsIDEpO1xuICAgICAgICB0ZW1wLnNldCgobTAyICogbTExICogbTMwKSAtIChtMDEgKiBtMTIgKiBtMzApIC0gKG0wMiAqIG0xMCAqIG0zMSkgKyAobTAwICogbTEyICogbTMxKSArIChtMDEgKiBtMTAgKiBtMzIpIC0gKG0wMCAqIG0xMSAqIG0zMiksIDMsIDIpO1xuICAgICAgICB0ZW1wLnNldCgobTAxICogbTEyICogbTIwKSAtIChtMDIgKiBtMTEgKiBtMjApICsgKG0wMiAqIG0xMCAqIG0yMSkgLSAobTAwICogbTEyICogbTIxKSAtIChtMDEgKiBtMTAgKiBtMjIpICsgKG0wMCAqIG0xMSAqIG0yMiksIDMsIDMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KHRlbXAuZ2V0KGksIGopIC8gZGV0LCBpLCBqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgZnVuY3Rpb24gbW9kZWwocmVzdWx0IDogTWF0cml4LCB0cmFuc2xhdGlvbiA6IFZlY3RvcjMsIHJvdGF0aW9uIDogVmVjdG9yMywgc2NhbGUgOiBWZWN0b3IzKSA6IHZvaWQge1xuICAgICAgICAvLyBUUkFOU0xBVElPTiBNQVRSSVhcdFxuICAgICAgICBsZXQgdHJhbnNsYXRpb25NYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xuICAgICAgICB0aGlzLmlkZW50aXR5KHRyYW5zbGF0aW9uTWF0cml4KTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGUodHJhbnNsYXRpb25NYXRyaXgsIHRyYW5zbGF0aW9uKTtcblxuICAgICAgICAvLyBST1RBVElPTiBNQVRSSVhcbiAgICAgICAgbGV0IHJvdGF0aW9uTWF0cml4ID0gbmV3IE1hdHJpeCg0LCA0KTtcbiAgICAgICAgdGhpcy5pZGVudGl0eShyb3RhdGlvbk1hdHJpeCk7XG4gICAgICAgIHRoaXMucm90YXRlKHJvdGF0aW9uTWF0cml4LCByb3RhdGlvbik7XG5cbiAgICAgICAgLy8gU0NBTElORyBNQVRSSVhcbiAgICAgICAgbGV0IHNjYWxlTWF0cml4ID0gbmV3IE1hdHJpeCg0LCA0KTtcbiAgICAgICAgdGhpcy5pZGVudGl0eShzY2FsZU1hdHJpeCk7XG4gICAgICAgIHRoaXMuc2NhbGUoc2NhbGVNYXRyaXgsIHNjYWxlKTtcblxuICAgICAgICAvLyBBTkQgTk9XIE1VTFRJUExZIFRIRU0gVE9HRVRIRVIgSU4gVEhFIENPUlJFQ1QgT1JERVJcbiAgICAgICAgbGV0IHRlbXBNYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xuICAgICAgICB0aGlzLm11bHRpcGx5KHRlbXBNYXRyaXgsIHRyYW5zbGF0aW9uTWF0cml4LCByb3RhdGlvbk1hdHJpeCk7XG4gICAgICAgIHRoaXMubXVsdGlwbHkocmVzdWx0LCB0ZW1wTWF0cml4LCBzY2FsZU1hdHJpeCk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KHJlc3VsdCA6IE1hdHJpeCwgbWF0MCA6IE1hdHJpeCwgbWF0MSA6IE1hdHJpeCkgOiB2b2lkIHtcbiAgICAgICAgLy8gcmVzdWx0IE1JR0hUIEJFIG1hdDAgT1IgbWF0MSBTTyBJVCdTIEJFU1QgSUYgV0VcbiAgICAgICAgLy8gQ0FMQ1VMQVRFIFRFTVAgVkFMVUVTIEZJUlNUIEJFRk9SRSBBU1NJR05NRU5UXG4gICAgICAgIGxldCByMDAgPSAobWF0MC5nZXQoMCwgMCkgKiBtYXQxLmdldCgwLCAwKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDEpICogbWF0MS5nZXQoMSwgMCkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAyKSAqIG1hdDEuZ2V0KDIsIDApKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMykgKiBtYXQxLmdldCgzLCAwKSk7XG4gICAgICAgIGxldCByMTAgPSAobWF0MC5nZXQoMSwgMCkgKiBtYXQxLmdldCgwLCAwKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDEpICogbWF0MS5nZXQoMSwgMCkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAyKSAqIG1hdDEuZ2V0KDIsIDApKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMykgKiBtYXQxLmdldCgzLCAwKSk7XG4gICAgICAgIGxldCByMjAgPSAobWF0MC5nZXQoMiwgMCkgKiBtYXQxLmdldCgwLCAwKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDEpICogbWF0MS5nZXQoMSwgMCkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAyKSAqIG1hdDEuZ2V0KDIsIDApKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMykgKiBtYXQxLmdldCgzLCAwKSk7XG4gICAgICAgIGxldCByMzAgPSAobWF0MC5nZXQoMywgMCkgKiBtYXQxLmdldCgwLCAwKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDEpICogbWF0MS5nZXQoMSwgMCkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAyKSAqIG1hdDEuZ2V0KDIsIDApKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMykgKiBtYXQxLmdldCgzLCAwKSk7XG4gICAgICAgIGxldCByMDEgPSAobWF0MC5nZXQoMCwgMCkgKiBtYXQxLmdldCgwLCAxKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDEpICogbWF0MS5nZXQoMSwgMSkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAyKSAqIG1hdDEuZ2V0KDIsIDEpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMykgKiBtYXQxLmdldCgzLCAxKSk7XG4gICAgICAgIGxldCByMTEgPSAobWF0MC5nZXQoMSwgMCkgKiBtYXQxLmdldCgwLCAxKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDEpICogbWF0MS5nZXQoMSwgMSkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAyKSAqIG1hdDEuZ2V0KDIsIDEpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMykgKiBtYXQxLmdldCgzLCAxKSk7XG4gICAgICAgIGxldCByMjEgPSAobWF0MC5nZXQoMiwgMCkgKiBtYXQxLmdldCgwLCAxKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDEpICogbWF0MS5nZXQoMSwgMSkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAyKSAqIG1hdDEuZ2V0KDIsIDEpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMykgKiBtYXQxLmdldCgzLCAxKSk7XG4gICAgICAgIGxldCByMzEgPSAobWF0MC5nZXQoMywgMCkgKiBtYXQxLmdldCgwLCAxKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDEpICogbWF0MS5nZXQoMSwgMSkpXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAyKSAqIG1hdDEuZ2V0KDIsIDEpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMykgKiBtYXQxLmdldCgzLCAxKSk7XG4gICAgICAgIGxldCByMDIgPSAobWF0MC5nZXQoMCwgMCkgKiBtYXQxLmdldCgwLCAyKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDEpICogbWF0MS5nZXQoMSwgMikpXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAyKSAqIG1hdDEuZ2V0KDIsIDIpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMykgKiBtYXQxLmdldCgzLCAyKSk7XG4gICAgICAgIGxldCByMTIgPSAobWF0MC5nZXQoMSwgMCkgKiBtYXQxLmdldCgwLCAyKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDEpICogbWF0MS5nZXQoMSwgMikpXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAyKSAqIG1hdDEuZ2V0KDIsIDIpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMykgKiBtYXQxLmdldCgzLCAyKSk7XG4gICAgICAgIGxldCByMjIgPSAobWF0MC5nZXQoMiwgMCkgKiBtYXQxLmdldCgwLCAyKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDEpICogbWF0MS5nZXQoMSwgMikpXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAyKSAqIG1hdDEuZ2V0KDIsIDIpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMykgKiBtYXQxLmdldCgzLCAyKSk7XG4gICAgICAgIGxldCByMzIgPSAobWF0MC5nZXQoMywgMCkgKiBtYXQxLmdldCgwLCAyKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDEpICogbWF0MS5nZXQoMSwgMikpXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAyKSAqIG1hdDEuZ2V0KDIsIDIpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMykgKiBtYXQxLmdldCgzLCAyKSk7XG4gICAgICAgIGxldCByMDMgPSAobWF0MC5nZXQoMCwgMCkgKiBtYXQxLmdldCgwLCAzKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDAsIDEpICogbWF0MS5nZXQoMSwgMykpXG4gICAgICAgICAgICArIChtYXQwLmdldCgwLCAyKSAqIG1hdDEuZ2V0KDIsIDMpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMCwgMykgKiBtYXQxLmdldCgzLCAzKSk7XG4gICAgICAgIGxldCByMTMgPSAobWF0MC5nZXQoMSwgMCkgKiBtYXQxLmdldCgwLCAzKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDEsIDEpICogbWF0MS5nZXQoMSwgMykpXG4gICAgICAgICAgICArIChtYXQwLmdldCgxLCAyKSAqIG1hdDEuZ2V0KDIsIDMpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMSwgMykgKiBtYXQxLmdldCgzLCAzKSk7XG4gICAgICAgIGxldCByMjMgPSAobWF0MC5nZXQoMiwgMCkgKiBtYXQxLmdldCgwLCAzKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDIsIDEpICogbWF0MS5nZXQoMSwgMykpXG4gICAgICAgICAgICArIChtYXQwLmdldCgyLCAyKSAqIG1hdDEuZ2V0KDIsIDMpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMiwgMykgKiBtYXQxLmdldCgzLCAzKSk7XG4gICAgICAgIGxldCByMzMgPSAobWF0MC5nZXQoMywgMCkgKiBtYXQxLmdldCgwLCAzKSlcbiAgICAgICAgICAgICsgKG1hdDAuZ2V0KDMsIDEpICogbWF0MS5nZXQoMSwgMykpXG4gICAgICAgICAgICArIChtYXQwLmdldCgzLCAyKSAqIG1hdDEuZ2V0KDIsIDMpKVxuICAgICAgICAgICAgKyAobWF0MC5nZXQoMywgMykgKiBtYXQxLmdldCgzLCAzKSk7XG5cbiAgICAgICAgLy8gTk9XIFBVVCBBTEwgVEhFIENBTENVTEFURUQgVkFMVUVTIElOIFRIRSByZXN1bHQgTUFUUklYXG4gICAgICAgIHJlc3VsdC5zZXQocjAwLCAwLCAwKTtcbiAgICAgICAgcmVzdWx0LnNldChyMTAsIDEsIDApO1xuICAgICAgICByZXN1bHQuc2V0KHIyMCwgMiwgMCk7XG4gICAgICAgIHJlc3VsdC5zZXQocjMwLCAzLCAwKTtcbiAgICAgICAgcmVzdWx0LnNldChyMDEsIDAsIDEpO1xuICAgICAgICByZXN1bHQuc2V0KHIxMSwgMSwgMSk7XG4gICAgICAgIHJlc3VsdC5zZXQocjIxLCAyLCAxKTtcbiAgICAgICAgcmVzdWx0LnNldChyMzEsIDMsIDEpO1xuICAgICAgICByZXN1bHQuc2V0KHIwMiwgMCwgMik7XG4gICAgICAgIHJlc3VsdC5zZXQocjEyLCAxLCAyKTtcbiAgICAgICAgcmVzdWx0LnNldChyMjIsIDIsIDIpO1xuICAgICAgICByZXN1bHQuc2V0KHIzMiwgMywgMik7XG4gICAgICAgIHJlc3VsdC5zZXQocjAzLCAwLCAzKTtcbiAgICAgICAgcmVzdWx0LnNldChyMTMsIDEsIDMpO1xuICAgICAgICByZXN1bHQuc2V0KHIyMywgMiwgMyk7XG4gICAgICAgIHJlc3VsdC5zZXQocjMzLCAzLCAzKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbihyZXN1bHQgOiBNYXRyaXgsIG5lYXJaIDogbnVtYmVyLCBmYXJaIDogbnVtYmVyLCB2aWV3cG9ydFdpZHRoIDogbnVtYmVyLCB2aWV3cG9ydEhlaWdodCA6IG51bWJlciwgZm92WSA6IG51bWJlcikgOiB2b2lkIHtcbiAgICAgICAgbGV0IGFzcGVjdFJhdGlvID0gdmlld3BvcnRXaWR0aCAvIHZpZXdwb3J0SGVpZ2h0O1xuICAgICAgICBsZXQgZmllbGRPZlZpZXdZID0gdGhpcy5tYXRoLmRlZ3JlZXNUb1JhZGlhbnMoZm92WSk7XG4gICAgICAgIGxldCBmaWVsZE9mVmlld1ggPSAyICogTWF0aC5hdGFuKE1hdGgudGFuKGZpZWxkT2ZWaWV3WSAvIDIpICogYXNwZWN0UmF0aW8pO1xuXG4gICAgICAgIC8vIFdFJ0xMIFVTRSBUSEVTRSBBUyBTSE9SVEhBTkQgRk9SIExPQURJTkcgT1VSIE1BVFJJWFxuICAgICAgICBsZXQgbiA9IG5lYXJaO1xuICAgICAgICBsZXQgZiA9IGZhclo7XG4gICAgICAgIGxldCByID0gTWF0aC50YW4oZmllbGRPZlZpZXdYIC8gMikgKiBuO1xuICAgICAgICBsZXQgdCA9IE1hdGgudGFuKGZpZWxkT2ZWaWV3WSAvIDIpICogbjtcblxuICAgICAgICAvLyAwLTNcbiAgICAgICAgcmVzdWx0LnNldChuIC8gciwgMCwgMCk7XG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAwLCAxKTtcbiAgICAgICAgcmVzdWx0LnNldCgwLjAsIDAsIDIpO1xuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMCwgMyk7XG4gICAgICAgIC8vIDQtN1xuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMSwgMCk7XG4gICAgICAgIHJlc3VsdC5zZXQobiAvIHQsIDEsIDEpO1xuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMSwgMik7XG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAxLCAzKTtcbiAgICAgICAgLy8gOC0xMVxuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMiwgMCk7XG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAyLCAxKTtcbiAgICAgICAgcmVzdWx0LnNldCgoLShmICsgbikpIC8gKGYgLSBuKSwgMiwgMik7XG4gICAgICAgIHJlc3VsdC5zZXQoKC0yICogZiAqIG4pIC8gKGYgLSBuKSwgMiwgMyk7XG4gICAgICAgIC8vIDEyLTE1IFxuICAgICAgICByZXN1bHQuc2V0KDAuMCwgMywgMCk7XG4gICAgICAgIHJlc3VsdC5zZXQoMC4wLCAzLCAxKTtcbiAgICAgICAgcmVzdWx0LnNldCgtMS4wLCAzLCAyKTtcbiAgICAgICAgcmVzdWx0LnNldCgwLjAsIDMsIDMpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiByb3RhdGUocmVzdWx0IDogTWF0cml4LCByb3RhdGlvblZlY3RvciA6IFZlY3RvcjMpIDogdm9pZCB7XG4gICAgICAgIC8vIFNUQVJUIFdJVEggVEhFIFgtQVhJUyBST1RBVElPTlxuICAgICAgICBsZXQgeFJvdGF0aW9uTWF0cml4ID0gbmV3IE1hdHJpeCg0LCA0KTtcbiAgICAgICAgdGhpcy5pZGVudGl0eSh4Um90YXRpb25NYXRyaXgpO1xuICAgICAgICBsZXQgdGhldGFYID0gcm90YXRpb25WZWN0b3IuZ2V0VGhldGFYKCk7XG4gICAgICAgIHhSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5jb3ModGhldGFYKSwgMSwgMSk7XG4gICAgICAgIHhSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5zaW4odGhldGFYKSwgMiwgMSk7XG4gICAgICAgIHhSb3RhdGlvbk1hdHJpeC5zZXQoLTEgKiBNYXRoLnNpbih0aGV0YVgpLCAxLCAyKTtcbiAgICAgICAgeFJvdGF0aW9uTWF0cml4LnNldChNYXRoLmNvcyh0aGV0YVgpLCAyLCAyKTtcblxuICAgICAgICAvLyBTVEFSVCBXSVRIIFRIRSBZLUFYSVMgUk9UQVRJT05cbiAgICAgICAgbGV0IHlSb3RhdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXgoNCwgNCk7XG4gICAgICAgIHRoaXMuaWRlbnRpdHkoeVJvdGF0aW9uTWF0cml4KTtcbiAgICAgICAgbGV0IHRoZXRhWSA9IHJvdGF0aW9uVmVjdG9yLmdldFRoZXRhWSgpO1xuICAgICAgICB5Um90YXRpb25NYXRyaXguc2V0KE1hdGguY29zKHRoZXRhWSksIDAsIDApO1xuICAgICAgICB5Um90YXRpb25NYXRyaXguc2V0KC0xICogTWF0aC5zaW4odGhldGFZKSwgMiwgMCk7XG4gICAgICAgIHlSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5zaW4odGhldGFZKSwgMCwgMik7XG4gICAgICAgIHlSb3RhdGlvbk1hdHJpeC5zZXQoTWF0aC5jb3ModGhldGFZKSwgMiwgMik7XG5cbiAgICAgICAgLy8gU1RBUlQgV0lUSCBUSEUgWi1BWElTIFJPVEFUSU9OXG4gICAgICAgIGxldCB6Um90YXRpb25NYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xuICAgICAgICB0aGlzLmlkZW50aXR5KHpSb3RhdGlvbk1hdHJpeCk7XG4gICAgICAgIGxldCB0aGV0YVogPSByb3RhdGlvblZlY3Rvci5nZXRUaGV0YVooKTtcbiAgICAgICAgelJvdGF0aW9uTWF0cml4LnNldChNYXRoLmNvcyh0aGV0YVopLCAwLCAwKTtcbiAgICAgICAgelJvdGF0aW9uTWF0cml4LnNldChNYXRoLnNpbih0aGV0YVopLCAxLCAwKTtcbiAgICAgICAgelJvdGF0aW9uTWF0cml4LnNldCgtMSAqIE1hdGguc2luKHRoZXRhWiksIDAsIDEpO1xuICAgICAgICB6Um90YXRpb25NYXRyaXguc2V0KE1hdGguY29zKHRoZXRhWiksIDEsIDEpO1xuXG4gICAgICAgIC8vIFNUQVJUIFdJVEggVEhFIFgtQVhJUyBST1RBVElPTlxuICAgICAgICBsZXQgdGVtcE1hdHJpeCA9IG5ldyBNYXRyaXgoNCwgNCk7XG4gICAgICAgIHRoaXMuaWRlbnRpdHkodGVtcE1hdHJpeCk7XG4gICAgICAgIHRoaXMubXVsdGlwbHkodGVtcE1hdHJpeCwgeFJvdGF0aW9uTWF0cml4LCB5Um90YXRpb25NYXRyaXgpO1xuICAgICAgICB0aGlzLm11bHRpcGx5KHJlc3VsdCwgdGVtcE1hdHJpeCwgelJvdGF0aW9uTWF0cml4KTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2NhbGUocmVzdWx0IDogTWF0cml4LCBzY2FsZVZlY3RvciA6IFZlY3RvcjMpIDogdm9pZCB7XG4gICAgICAgIC8vIFNUQVJUIFdJVEggVEhFIElERU5USVRZIE1BVFJJWFxuICAgICAgICB0aGlzLmlkZW50aXR5KHJlc3VsdCwgc2NhbGVWZWN0b3IpO1xuXG4gICAgICAgIC8vIEFORCBUSEVOIExPQUQgSU4gVEhFIFRSQU5TTEFUSU9OIFZBTFVFU1xuICAgICAgICByZXN1bHQuc2V0KHNjYWxlVmVjdG9yLmdldFgoKSwgMCwgMCk7XG4gICAgICAgIHJlc3VsdC5zZXQoc2NhbGVWZWN0b3IuZ2V0WSgpLCAxLCAxKTtcbiAgICAgICAgcmVzdWx0LnNldChzY2FsZVZlY3Rvci5nZXRaKCksIDIsIDIpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm0ocmVzdWx0IDogVmVjdG9yMywgbWF0IDogTWF0cml4LCB2ZWMgOiBWZWN0b3IzKSA6IHZvaWQge1xuICAgICAgICByZXN1bHQuc2V0WCgobWF0LmdldCgwLCAwKSAqIHZlYy5nZXRYKCkpICsgKG1hdC5nZXQoMCwgMSkgKiB2ZWMuZ2V0WSgpKSArIChtYXQuZ2V0KDAsIDIpICogdmVjLmdldFooKSkgKyAobWF0LmdldCgwLCAzKSAqIHZlYy5nZXRXKCkpKTtcbiAgICAgICAgcmVzdWx0LnNldFkoKG1hdC5nZXQoMSwgMCkgKiB2ZWMuZ2V0WCgpKSArIChtYXQuZ2V0KDEsIDEpICogdmVjLmdldFkoKSkgKyAobWF0LmdldCgxLCAyKSAqIHZlYy5nZXRaKCkpICsgKG1hdC5nZXQoMSwgMykgKiB2ZWMuZ2V0VygpKSk7XG4gICAgICAgIHJlc3VsdC5zZXRaKChtYXQuZ2V0KDIsIDApICogdmVjLmdldFgoKSkgKyAobWF0LmdldCgyLCAxKSAqIHZlYy5nZXRZKCkpICsgKG1hdC5nZXQoMiwgMikgKiB2ZWMuZ2V0WigpKSArIChtYXQuZ2V0KDIsIDMpICogdmVjLmdldFcoKSkpO1xuICAgICAgICByZXN1bHQuc2V0VygobWF0LmdldCgzLCAwKSAqIHZlYy5nZXRYKCkpICsgKG1hdC5nZXQoMywgMSkgKiB2ZWMuZ2V0WSgpKSArIChtYXQuZ2V0KDMsIDIpICogdmVjLmdldFooKSkgKyAobWF0LmdldCgzLCAzKSAqIHZlYy5nZXRXKCkpKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKHJlc3VsdCA6IE1hdHJpeCwgdHJhbnNsYXRpb25WZWN0b3IgOiBWZWN0b3IzKSA6IHZvaWQge1xuICAgICAgICAvLyBTVEFSVCBXSVRIIFRIRSBJREVOVElUWSBNQVRSSVhcbiAgICAgICAgdGhpcy5pZGVudGl0eShyZXN1bHQpO1xuXG4gICAgICAgIC8vIEFORCBUSEVOIExPQUQgSU4gVEhFIFRSQU5TTEFUSU9OIFZBTFVFU1xuICAgICAgICByZXN1bHQuc2V0KHRyYW5zbGF0aW9uVmVjdG9yLmdldFgoKSwgMCwgMyk7XG4gICAgICAgIHJlc3VsdC5zZXQodHJhbnNsYXRpb25WZWN0b3IuZ2V0WSgpLCAxLCAzKTtcbiAgICAgICAgcmVzdWx0LnNldCh0cmFuc2xhdGlvblZlY3Rvci5nZXRaKCksIDIsIDMpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2UocmVzdWx0IDogTWF0cml4LCBtYXQgOiBNYXRyaXgpIDogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbWF0LmdldChpLCBqKTtcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KHRlbXAsIGosIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHZpZXcocmVzdWx0IDogTWF0cml4LCBjYW1lcmFQb3NpdGlvbiA6IFZlY3RvcjMsIGNhbWVyYU9yaWVudGF0aW9uIDogVmVjdG9yMykgOiB2b2lkIHtcbiAgICAgICAgbGV0IHBpdGNoID0gdGhpcy5tYXRoLmRlZ3JlZXNUb1JhZGlhbnMoY2FtZXJhT3JpZW50YXRpb24uZ2V0VGhldGFYKCkpO1xuICAgICAgICBsZXQgeWF3ID0gdGhpcy5tYXRoLmRlZ3JlZXNUb1JhZGlhbnMoY2FtZXJhT3JpZW50YXRpb24uZ2V0VGhldGFZKCkpO1xuICAgICAgICBsZXQgcm9sbCA9IHRoaXMubWF0aC5kZWdyZWVzVG9SYWRpYW5zKGNhbWVyYU9yaWVudGF0aW9uLmdldFRoZXRhWigpKTtcblxuICAgICAgICAvLyBUTyBUUkFOU0xBVEVcbiAgICAgICAgbGV0IHRyYW5zbGF0ZVZlY3RvciA9IHRoaXMubWF0aC52ZWN0b3JNYXRoLmNyZWF0ZVBvc2l0aW9uVmVjdG9yKCk7XG4gICAgICAgIHRyYW5zbGF0ZVZlY3Rvci5zZXQoLWNhbWVyYVBvc2l0aW9uLmdldFgoKSwgLWNhbWVyYVBvc2l0aW9uLmdldFkoKSwgLWNhbWVyYVBvc2l0aW9uLmdldFooKSk7XG4gICAgICAgIGxldCB0cmFuc2xhdGVNYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xuICAgICAgICB0aGlzLmlkZW50aXR5KHRyYW5zbGF0ZU1hdHJpeCk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRlKHRyYW5zbGF0ZU1hdHJpeCwgdHJhbnNsYXRlVmVjdG9yKTtcblxuICAgICAgICAvLyBUTyBST1RBVEVcbiAgICAgICAgbGV0IHJvdGF0ZVZlY3RvciA9IHRoaXMubWF0aC52ZWN0b3JNYXRoLmNyZWF0ZVJvdGF0aW9uVmVjdG9yKCk7XG4gICAgICAgIHJvdGF0ZVZlY3Rvci5zZXQoLXBpdGNoLCAteWF3LCAtcm9sbCk7XG4gICAgICAgIGxldCByb3RhdGVNYXRyaXggPSBuZXcgTWF0cml4KDQsIDQpO1xuICAgICAgICB0aGlzLnJvdGF0ZShyb3RhdGVNYXRyaXgsIHJvdGF0ZVZlY3Rvcik7XG5cbiAgICAgICAgLy8gTk9XIENPTUJJTkUgVEhFIDIgTUFUUklDRVNcbiAgICAgICAgdGhpcy5tdWx0aXBseShyZXN1bHQsIHJvdGF0ZU1hdHJpeCwgdHJhbnNsYXRlTWF0cml4KTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gYWRkVmVjdG9ycyhyZXN1bHQgOiBWZWN0b3IzLCB2ZWMwIDogVmVjdG9yMywgdmVjMSA6IFZlY3RvcjMpIDogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVjMC5nZXRTaXplKCk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gdmVjMC5nZXRBdChpKSArIHZlYzEuZ2V0QXQoaSk7XG4gICAgICAgICAgICByZXN1bHQuc2V0QXQoaSwgdG90YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyb3NzUHJvZHVjdChyZXN1bHQgOiBWZWN0b3IzLCB2ZWMwIDogVmVjdG9yMywgdmVjMSA6IFZlY3RvcjMpIDogdm9pZCB7XG4gICAgICAgIGxldCByZXN1bHQwID0gKHZlYzAuZ2V0WSgpICogdmVjMS5nZXRaKCkpXG4gICAgICAgICAgICAtICh2ZWMxLmdldFkoKSAqIHZlYzAuZ2V0WigpKTtcbiAgICAgICAgbGV0IHJlc3VsdDEgPSAodmVjMC5nZXRaKCkgKiB2ZWMxLmdldFgoKSlcbiAgICAgICAgICAgIC0gKHZlYzEuZ2V0WigpICogdmVjMC5nZXRYKCkpO1xuICAgICAgICBsZXQgcmVzdWx0MiA9ICh2ZWMwLmdldFgoKSAqIHZlYzEuZ2V0WSgpKVxuICAgICAgICAgICAgLSAodmVjMS5nZXRYKCkgKiB2ZWMwLmdldFkoKSk7XG4gICAgICAgIHJlc3VsdC5zZXRYKHJlc3VsdDApO1xuICAgICAgICByZXN1bHQuc2V0WShyZXN1bHQxKTtcbiAgICAgICAgcmVzdWx0LnNldFoocmVzdWx0Mik7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvdFByb2R1Y3QodmVjMCA6IFZlY3RvcjMsIHZlYzEgOiBWZWN0b3IzKSA6IG51bWJlciB7XG4gICAgICAgIGxldCByZXN1bHRYID0gdmVjMC5nZXRYKCkgKiB2ZWMxLmdldFgoKTtcbiAgICAgICAgbGV0IHJlc3VsdFkgPSB2ZWMwLmdldFkoKSAqIHZlYzEuZ2V0WSgpO1xuICAgICAgICBsZXQgcmVzdWx0WiA9IHZlYzAuZ2V0WigpICogdmVjMS5nZXRaKCk7XG4gICAgICAgIHJldHVybiByZXN1bHRYICsgcmVzdWx0WSArIHJlc3VsdFo7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5VmVjdG9ycyhyZXN1bHQgOiBWZWN0b3IzLCB2ZWMgOiBWZWN0b3IzLCBzY2FsYXIgOiBudW1iZXIpIDogdm9pZCB7XG4gICAgICAgIGxldCB2ZWNYID0gdmVjLmdldFgoKSAqIHNjYWxhcjtcbiAgICAgICAgbGV0IHZlY1kgPSB2ZWMuZ2V0WSgpICogc2NhbGFyO1xuICAgICAgICBsZXQgdmVjWiA9IHZlYy5nZXRaKCkgKiBzY2FsYXI7XG4gICAgICAgIHJlc3VsdC5zZXRYKHZlY1gpO1xuICAgICAgICByZXN1bHQuc2V0WSh2ZWNZKTtcbiAgICAgICAgcmVzdWx0LnNldFoodmVjWik7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShyZXN1bHQgOiBWZWN0b3IzLCB2ZWMgOiBWZWN0b3IzKSA6IHZvaWQge1xuICAgICAgICBsZXQgeFNxdWFyZWQgPSB2ZWMuZ2V0WCgpICogdmVjLmdldFgoKTtcbiAgICAgICAgbGV0IHlTcXVhcmVkID0gdmVjLmdldFkoKSAqIHZlYy5nZXRZKCk7XG4gICAgICAgIGxldCB6U3F1YXJlZCA9IHZlYy5nZXRaKCkgKiB2ZWMuZ2V0WigpO1xuICAgICAgICBsZXQgZGlzdGFuY2UgPSBNYXRoLnNxcnQoeFNxdWFyZWQgKyB5U3F1YXJlZCArIHpTcXVhcmVkKTtcbiAgICAgICAgcmVzdWx0LnNldFgodmVjLmdldFgoKSAvIGRpc3RhbmNlKTtcbiAgICAgICAgcmVzdWx0LnNldFkodmVjLmdldFkoKSAvIGRpc3RhbmNlKTtcbiAgICAgICAgcmVzdWx0LnNldFoodmVjLmdldFooKSAvIGRpc3RhbmNlKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc3VidHJhY3RWZWN0b3JzKHJlc3VsdCA6IFZlY3RvcjMsIHZlYzAgOiBWZWN0b3IzLCB2ZWMxIDogVmVjdG9yMykgOiB2b2lkIHtcbiAgICAgICAgbGV0IHJlc3VsdFggPSB2ZWMwLmdldFgoKSAtIHZlYzEuZ2V0WCgpO1xuICAgICAgICBsZXQgcmVzdWx0WSA9IHZlYzAuZ2V0WSgpIC0gdmVjMS5nZXRZKCk7XG4gICAgICAgIGxldCByZXN1bHRaID0gdmVjMC5nZXRaKCkgLSB2ZWMxLmdldFooKTtcbiAgICAgICAgcmVzdWx0LnNldFgocmVzdWx0WCk7XG4gICAgICAgIHJlc3VsdC5zZXRZKHJlc3VsdFkpO1xuICAgICAgICByZXN1bHQuc2V0WihyZXN1bHRaKTtcbiAgICB9XG59IiwiLypcbiAqIEEgTWF0cml4IGlzIHVzZWQgZm9yIHRyYW5zZm9ybWluZyBwb2ludHMgZnJvbSBsb2NhbFxuICogY29vcmRpbmF0ZXMgdG8gd29ybGQgY29vcmRpbmF0ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRyaXgge1xuICAgIHByaXZhdGUgbWF0IDogRmxvYXQzMkFycmF5O1xuICAgIHByaXZhdGUgcm93cyA6IG51bWJlcjtcbiAgICBwcml2YXRlIGNvbHVtbnMgOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iocm93cyA6IG51bWJlciwgY29sdW1ucyA6IG51bWJlcikge1xuICAgICAgICB0aGlzLnJvd3MgPSByb3dzO1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSBjb2x1bW5zO1xuICAgICAgICB0aGlzLm1hdCA9IG5ldyBGbG9hdDMyQXJyYXkocm93cyAqIGNvbHVtbnMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IChyb3dzICogY29sdW1ucyk7IGkrKylcbiAgICAgICAgICAgIHRoaXMubWF0W2ldID0gMC4wO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREYXRhKCkgOiBGbG9hdDMyQXJyYXkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJvd3MoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3M7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbHVtbnMoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbnM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEluZGV4IChyb3dzIDogbnVtYmVyLCBjb2x1bW5zIDogbnVtYmVyKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5yb3dzICogY29sdW1ucykgKyByb3dzO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IChyb3cgOiBudW1iZXIsIGNvbHVtbiA6IG51bWJlcikgOiBudW1iZXIge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmdldEluZGV4KHJvdywgY29sdW1uKTtcbiAgICAgICAgbGV0IHZhbHVlVG9SZXR1cm4gPSB0aGlzLm1hdFtpbmRleF07XG4gICAgICAgIHJldHVybiB2YWx1ZVRvUmV0dXJuO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgKHZhbHVlIDogbnVtYmVyLCByb3cgOiBudW1iZXIsIGNvbHVtbiA6IG51bWJlcikge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmdldEluZGV4KHJvdywgY29sdW1uKTtcbiAgICAgICAgdGhpcy5tYXRbaW5kZXhdID0gdmFsdWU7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBwcmludCAoKSA6IHZvaWQge1xuICAgICAgICBsZXQgbWF4V2lkdGggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdGVzdE51bSA9IHRoaXMuZ2V0KGosIGkpICsgXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAodGVzdE51bS5sZW5ndGggPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aCA9IHRlc3ROdW0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdGV4dCA9IFwiWyBcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHRleHQgKz0gXCIgIFwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBudW1UZXh0ID0gdGhpcy5nZXQoaSwgaikgKyBcIlwiO1xuICAgICAgICAgICAgICAgIHdoaWxlIChudW1UZXh0Lmxlbmd0aCA8IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bVRleHQgPSBcIiBcIiArIG51bVRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRleHQgKz0gbnVtVGV4dDtcbiAgICAgICAgICAgICAgICBpZiAoaiA8ICh0aGlzLmNvbHVtbnMgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IFwiLFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0ZXh0ICs9IFwiIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPCAodGhpcy5yb3dzIC0gMSkpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IFwiXFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ICs9IFwiXVwiO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLyoqXG4gKiBWZWN0b3IzXG4gKiBcbiAqIFRoZSBWZWN0b3IzIGNsYXNzIGNhbiBiZSB1c2VkIGZvciBhbnkgMmQgb3IgM2QgcG9pbnQsIHZlY3RvciwgXG4gKiBvciByb3RhdGlvbiAoaS5lLiBhbmdsZXMgb2Ygb3JpZW50YXRpb24pLlxuICovXG5leHBvcnQgY2xhc3MgVmVjdG9yMyB7XG4gICAgcHJpdmF0ZSB2ZWMgOiBGbG9hdDMyQXJyYXk7XG4gICAgcHJpdmF0ZSBzaXplIDogbnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZlYyA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKVxuICAgICAgICAgICAgdGhpcy52ZWNbaV0gPSAwLjA7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNpemUoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEF0KGluZGV4IDogbnVtYmVyKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY1tpbmRleF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldFgoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY1swXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0WSgpIDogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzFdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRaKCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy52ZWNbMl07XG4gICAgfVxuXG4gICAgcHVibGljIGdldFcoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY1szXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGhldGFYKCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy52ZWNbMF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRoZXRhWSgpIDogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjWzFdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaGV0YVooKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY1syXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0KGluaXQwIDogbnVtYmVyLCBpbml0MSA6IG51bWJlciwgaW5pdDIgOiBudW1iZXIsIGluaXQzIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnZlY1swXSA9IGluaXQwO1xuICAgICAgICB0aGlzLnZlY1sxXSA9IGluaXQxO1xuICAgICAgICB0aGlzLnZlY1syXSA9IGluaXQyO1xuICAgICAgICB0aGlzLnZlY1szXSA9IGluaXQzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBdChpbmRleCA6IG51bWJlciwgdmFsdWUgOiBudW1iZXIpIDogdm9pZCB7XG4gICAgICAgIHRoaXMudmVjW2luZGV4XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRYKGluaXRYIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnZlY1swXSA9IGluaXRYO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRZKGluaXRZIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnZlY1sxXSA9IGluaXRZO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRaKGluaXRaIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnZlY1syXSA9IGluaXRaO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRXKGluaXRXIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnZlY1szXSA9IGluaXRXO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUaGV0YVgoaW5pdFRoZXRhWCA6IG51bWJlcikgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRYKGluaXRUaGV0YVgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUaGV0YVkoaW5pdFRoZXRhWSA6IG51bWJlcikgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRZKGluaXRUaGV0YVkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUaGV0YVooaW5pdFRoZXRhWiA6IG51bWJlcikgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRaKGluaXRUaGV0YVopO1xuICAgIH1cblxuICAgIHB1YmxpYyBwcmludCgpIDogdm9pZCB7XG4gICAgICAgIGxldCB0ZXh0ID0gXCJbXCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcbiAgICAgICAgICAgIHRleHQgKz0gdGhpcy52ZWNbaV07XG4gICAgICAgICAgICBpZiAoaSA8ICh0aGlzLnNpemUgLSAxKSkge1xuICAgICAgICAgICAgICAgIHRleHQgKz0gXCIsIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRleHQgKz0gXCJdXCI7XG4gICAgICAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgIH1cbn0iLCJpbXBvcnQge1dlYkdMR2FtZVNoYWRlcn0gZnJvbSAnLi9XZWJHTEdhbWVTaGFkZXInXHJcbmltcG9ydCB7TWF0aFV0aWxpdGllc30gZnJvbSAnLi4vbWF0aC9NYXRoVXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9tYXRoL01hdHJpeCdcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMydcclxuaW1wb3J0IHtBbmltYXRlZFNwcml0ZX0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlJ1xyXG5pbXBvcnQge0FuaW1hdGVkU3ByaXRlVHlwZX0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZSdcclxuaW1wb3J0IHtXZWJHTEdhbWVUZXh0dXJlfSBmcm9tICcuL1dlYkdMR2FtZVRleHR1cmUnXHJcbmltcG9ydCB7SGFzaFRhYmxlfSBmcm9tICcuLi9kYXRhL0hhc2hUYWJsZSdcclxuaW1wb3J0IHsgQ2lyY2xlU3ByaXRlIH0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0NpcmNsZVNwcml0ZSdcclxuXHJcbnZhciBDaXJjbGVEZWZhdWx0cyA9IHtcclxuICAgIEFfUE9TSVRJT046IFwiYV9Qb3NpdGlvblwiLFxyXG4gICAgQV9WQUxVRV9UT19JTlRFUlBPTEFURTogXCJhX1ZhbHVlVG9JbnRlcnBvbGF0ZVwiLFxyXG4gICAgVV9TUFJJVEVfVFJBTlNGT1JNOiBcInVfU3ByaXRlVHJhbnNmb3JtXCIsXHJcbiAgICBVX1I6IFwidV9yXCIsXHJcbiAgICBVX0c6IFwidV9nXCIsXHJcbiAgICBVX0I6IFwidV9iXCIsXHJcbiAgICBOVU1fVkVSVElDRVM6IDQsXHJcbiAgICBGTE9BVFNfUEVSX1ZFUlRFWDogMixcclxuICAgIEZMT0FUU19QRVJfVEVYVFVSRV9DT09SRElOQVRFOiAyLFxyXG4gICAgVE9UQUxfQllURVM6IDE2LFxyXG4gICAgT0ZGU0VUOiAwLFxyXG4gICAgU1RSSURFOiAwLFxyXG4gICAgSU5ERVhfT0ZfRklSU1RfVkVSVEVYOiAwLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIENpcmNsZVJlbmRlcmVyIHtcclxuICAgIHByaXZhdGUgc2hhZGVyIDogV2ViR0xHYW1lU2hhZGVyO1xyXG4gICAgcHJpdmF0ZSB2ZXJ0ZXhUZXhDb29yZEJ1ZmZlciA6IFdlYkdMQnVmZmVyO1xyXG5cclxuICAgIHByaXZhdGUgc3ByaXRlVHJhbnNmb3JtIDogTWF0cml4O1xyXG4gICAgcHJpdmF0ZSBzcHJpdGVUcmFuc2xhdGUgOiBWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBzcHJpdGVSb3RhdGUgOiBWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBzcHJpdGVTY2FsZSA6IFZlY3RvcjM7ICAgIFxyXG5cclxuICAgIHByaXZhdGUgd2ViR0xBdHRyaWJ1dGVMb2NhdGlvbnMgOiBIYXNoVGFibGU8R0x1aW50PjtcclxuICAgIHByaXZhdGUgd2ViR0xVbmlmb3JtTG9jYXRpb25zIDogSGFzaFRhYmxlPFdlYkdMVW5pZm9ybUxvY2F0aW9uPjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHB1YmxpYyBpbml0KHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2hhZGVyID0gbmV3IFdlYkdMR2FtZVNoYWRlcigpO1xyXG4gICAgICAgIHZhciB2ZXJ0ZXhTaGFkZXJTb3VyY2UgPVxyXG4gICAgICAgICAgICAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicrXHJcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjNCAnICsgQ2lyY2xlRGVmYXVsdHMuQV9QT1NJVElPTiArICc7XFxuJytcclxuICAgICAgICAgICAgJ2F0dHJpYnV0ZSB2ZWMyICcgKyBDaXJjbGVEZWZhdWx0cy5BX1ZBTFVFX1RPX0lOVEVSUE9MQVRFICsgJztcXG4nK1xyXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMyIHZhbDtcXG4nK1xyXG4gICAgICAgICAgICAndW5pZm9ybSBtYXQ0ICcgKyBDaXJjbGVEZWZhdWx0cy5VX1NQUklURV9UUkFOU0ZPUk0gKyc7XFxuJytcclxuICAgICAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nK1xyXG4gICAgICAgICAgICAnICAgIHZhbCA9ICcgKyBDaXJjbGVEZWZhdWx0cy5BX1ZBTFVFX1RPX0lOVEVSUE9MQVRFICsnICogMi4wIDtcXG4nK1xyXG4gICAgICAgICAgICAnICBnbF9Qb3NpdGlvbiA9ICcgKyBDaXJjbGVEZWZhdWx0cy5VX1NQUklURV9UUkFOU0ZPUk0gKyAnICogJyArIENpcmNsZURlZmF1bHRzLkFfUE9TSVRJT04gKyAnO1xcbicgK1xyXG4gICAgICAgICAgICAnfVxcbidcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZnJhZ21lbnRTaGFkZXJTb3VyY2UgPVxyXG4gICAgICAgICAgICAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicrXHJcbiAgICAgICAgICAgICd2YXJ5aW5nIHZlYzIgdmFsO1xcbicrXHJcbiAgICAgICAgICAgICd1bmlmb3JtIGZsb2F0ICcgKyBDaXJjbGVEZWZhdWx0cy5VX1IgKyAnO1xcbicrXHJcbiAgICAgICAgICAgICd1bmlmb3JtIGZsb2F0ICcgKyBDaXJjbGVEZWZhdWx0cy5VX0cgKyAnO1xcbicrXHJcbiAgICAgICAgICAgICd1bmlmb3JtIGZsb2F0ICcgKyBDaXJjbGVEZWZhdWx0cy5VX0IgKyAnO1xcbicrXHJcbiAgICAgICAgICAgICd2b2lkIG1haW4oKSB7XFxuJytcclxuICAgICAgICAgICAgJyAgICBmbG9hdCBSID0gMS4wO1xcbicrXHJcbiAgICAgICAgICAgICcgICAgZmxvYXQgZGlzdCA9IHNxcnQoZG90KHZhbCx2YWwpKTtcXG4nK1xyXG4gICAgICAgICAgICAnICAgIGZsb2F0IGFscGhhID0gMS4wO1xcbicrXHJcbiAgICAgICAgICAgICcgICAgaWYgKGRpc3QgPiBSKSB7XFxuJytcclxuICAgICAgICAgICAgJyAgICAgICAgZGlzY2FyZDtcXG4nK1xyXG4gICAgICAgICAgICAnICAgIH1cXG4nK1xyXG4gICAgICAgICAgICAnICAgIGlmICh1X3IgPT0gMC4wKXtcXG4nK1xyXG4gICAgICAgICAgICAnICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGRpc3QsICcgKyBDaXJjbGVEZWZhdWx0cy5VX0cgKyAnICsgZGlzdCwgJyArIENpcmNsZURlZmF1bHRzLlVfQiArICcgKyBkaXN0LCBhbHBoYSk7XFxuJytcclxuICAgICAgICAgICAgJyAgICB9XFxuJytcclxuICAgICAgICAgICAgJyAgICBpZih1X2cgPT0gMC4wKXtcXG4nK1xyXG4gICAgICAgICAgICAnICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCAnICsgQ2lyY2xlRGVmYXVsdHMuVV9SICsgJywgZGlzdCwgJyArIENpcmNsZURlZmF1bHRzLlVfQiArJywgYWxwaGEpO1xcbicrXHJcbiAgICAgICAgICAgICcgICAgfVxcbicrXHJcbiAgICAgICAgICAgICcgICAgaWYodV9iID09IDAuMCl7XFxuJytcclxuICAgICAgICAgICAgJyAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgnK0NpcmNsZURlZmF1bHRzLlVfUiArJywgJyArIENpcmNsZURlZmF1bHRzLlVfRyArICcsIGRpc3QsIGFscGhhKTtcXG4nK1xyXG4gICAgICAgICAgICAnICAgIH1cXG4nK1xyXG4gICAgICAgICAgICAnfVxcbidcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNoYWRlci5pbml0KHdlYkdMLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlKTtcclxuICAgICAgICAvLyBHRVQgVEhFIHdlYkdMIE9CSkVDVCBUTyBVU0VcclxuICAgICAgICB2YXIgdmVydGljZXNUZXhDb29yZHMgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICAgICAgICAgLTAuNSwgIDAuNSxcclxuICAgICAgICAgICAgLTAuNSwgLTAuNSxcclxuICAgICAgICAgICAgIDAuNSwgIDAuNSxcclxuICAgICAgICAgICAgIDAuNSwgLTAuNSxcclxuICAgICAgICBdKTtcclxuICAgICAgICAvLyBDUkVBVEUgVEhFIEJVRkZFUiBPTiBUSEUgR1BVXHJcbiAgICAgICAgdGhpcy52ZXJ0ZXhUZXhDb29yZEJ1ZmZlciA9IHdlYkdMLmNyZWF0ZUJ1ZmZlcigpO1xyXG5cclxuICAgICAgICAvLyBCSU5EIFRIRSBCVUZGRVIgVE8gQkUgVkVSVEVYIERBVEFcclxuICAgICAgICB3ZWJHTC5iaW5kQnVmZmVyKHdlYkdMLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhUZXhDb29yZEJ1ZmZlcik7XHJcblxyXG4gICAgICAgIC8vIEFORCBTRU5EIFRIRSBEQVRBIFRPIFRIRSBCVUZGRVIgV0UgQ1JFQVRFRCBPTiBUSEUgR1BVXHJcbiAgICAgICAgd2ViR0wuYnVmZmVyRGF0YSh3ZWJHTC5BUlJBWV9CVUZGRVIsIHZlcnRpY2VzVGV4Q29vcmRzLCB3ZWJHTC5TVEFUSUNfRFJBVyk7XHJcblxyXG4gICAgICAgIC8vIFNFVFVQIFRIRSBTSEFERVIgQVRUUklCVVRFUyBBTkQgVU5JRk9STVNcclxuICAgICAgICB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zID0ge307XHJcbiAgICAgICAgdGhpcy53ZWJHTFVuaWZvcm1Mb2NhdGlvbnMgPSB7fTtcclxuICAgICAgICB0aGlzLmxvYWRBdHRyaWJ1dGVMb2NhdGlvbnMod2ViR0wsIFtcImFfUG9zaXRpb25cIiwgXCJhX1ZhbHVlVG9JbnRlcnBvbGF0ZVwiXSk7XHJcbiAgICAgICAgdGhpcy5sb2FkVW5pZm9ybUxvY2F0aW9ucyh3ZWJHTCwgW1widV9TcHJpdGVUcmFuc2Zvcm1cIiwgXCJ1X3JcIiwgXCJ1X2dcIiwgXCJ1X2JcIl0pO1xyXG5cclxuICAgICAgICAvLyBXRSdMTCBVU0UgVEhFU0UgRk9SIFRSQU5TT0ZNUklORyBPQkpFQ1RTIFdIRU4gV0UgRFJBVyBUSEVNXHJcbiAgICAgICAgdGhpcy5zcHJpdGVUcmFuc2Zvcm0gPSBuZXcgTWF0cml4KDQsIDQpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlVHJhbnNsYXRlID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgICB0aGlzLnNwcml0ZVJvdGF0ZSA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVTY2FsZSA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGxvYWRBdHRyaWJ1dGVMb2NhdGlvbnMod2ViR0wgOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGF0dHJpYnV0ZUxvY2F0aW9uTmFtZXMgOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVMb2NhdGlvbk5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbk5hbWUgOiBzdHJpbmcgPSBhdHRyaWJ1dGVMb2NhdGlvbk5hbWVzW2ldO1xyXG4gICAgICAgICAgICBsZXQgbG9jYXRpb24gOiBHTHVpbnQgPSB3ZWJHTC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnNoYWRlci5nZXRQcm9ncmFtKCksIGxvY2F0aW9uTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViR0xBdHRyaWJ1dGVMb2NhdGlvbnNbbG9jYXRpb25OYW1lXSA9IGxvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGxvYWRVbmlmb3JtTG9jYXRpb25zKHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB1bmlmb3JtTG9jYXRpb25OYW1lcyA6IEFycmF5PHN0cmluZz4pIHtcclxuICAgICAgICBmb3IgKGxldCBpIDogbnVtYmVyID0gMDsgaSA8IHVuaWZvcm1Mb2NhdGlvbk5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbk5hbWUgOiBzdHJpbmcgPSB1bmlmb3JtTG9jYXRpb25OYW1lc1tpXTtcclxuICAgICAgICAgICAgbGV0IGxvY2F0aW9uIDogV2ViR0xVbmlmb3JtTG9jYXRpb24gPSB3ZWJHTC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXIuZ2V0UHJvZ3JhbSgpLCBsb2NhdGlvbk5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLndlYkdMVW5pZm9ybUxvY2F0aW9uc1tsb2NhdGlvbk5hbWVdID0gbG9jYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIHJlbmRlckNpY2xlKHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjYW52YXNXaWR0aCA6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXNIZWlnaHQgOiBudW1iZXIsIGNpcmNsZSA6IENpcmNsZVNwcml0ZSl7XHJcbiAgICAgICAgbGV0IGNpcmNsZVdpZHRoIDogbnVtYmVyID0gY2lyY2xlLmdldFdpZHRoKCk7XHJcbiAgICAgICAgbGV0IGNpcmNsZUhlaWdodCA6IG51bWJlciA9IGNpcmNsZS5nZXRIZWlnaHQoKTtcclxuICAgICAgICBsZXQgY2lyY2xlWEluUGl4ZWxzIDogbnVtYmVyID0gY2lyY2xlLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgKGNpcmNsZVdpZHRoLzIpO1xyXG4gICAgICAgIGxldCBjaXJjbGVZSW5QaXhlbHMgOiBudW1iZXIgPSBjaXJjbGUuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyAoY2lyY2xlSGVpZ2h0LzIpO1xyXG4gICAgICAgIGxldCBjaXJjbGVYVHJhbnNsYXRlIDogbnVtYmVyID0gKGNpcmNsZVhJblBpeGVscyAtIChjYW52YXNXaWR0aC8yKSkvKGNhbnZhc1dpZHRoLzIpO1xyXG4gICAgICAgIGxldCBjaXJjbGVZVHJhbnNsYXRlIDogbnVtYmVyID0gKGNpcmNsZVlJblBpeGVscyAtIChjYW52YXNIZWlnaHQvMikpLyhjYW52YXNIZWlnaHQvMik7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVUcmFuc2xhdGUuc2V0WChjaXJjbGVYVHJhbnNsYXRlKTtcclxuICAgICAgICB0aGlzLnNwcml0ZVRyYW5zbGF0ZS5zZXRZKC1jaXJjbGVZVHJhbnNsYXRlKTtcclxuXHJcbiAgICAgICAgbGV0IGRlZmF1bHRXaWR0aCA6IG51bWJlciA9IGNhbnZhc1dpZHRoLzI7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRIZWlnaHQgOiBudW1iZXIgPSBjYW52YXNIZWlnaHQvMjtcclxuICAgICAgICBsZXQgc2NhbGVYIDogbnVtYmVyID0gY2lyY2xlV2lkdGgvZGVmYXVsdFdpZHRoO1xyXG4gICAgICAgIGxldCBzY2FsZVkgOiBudW1iZXIgPSBjaXJjbGVIZWlnaHQvZGVmYXVsdEhlaWdodDtcclxuICAgICAgICB0aGlzLnNwcml0ZVNjYWxlLnNldFgoc2NhbGVYKTtcclxuICAgICAgICB0aGlzLnNwcml0ZVNjYWxlLnNldFkoc2NhbGVZKTtcclxuXHJcbiAgICAgICAgTWF0aFV0aWxpdGllcy5pZGVudGl0eSh0aGlzLnNwcml0ZVRyYW5zZm9ybSk7XHJcbiAgICAgICAgTWF0aFV0aWxpdGllcy5tb2RlbCh0aGlzLnNwcml0ZVRyYW5zZm9ybSwgdGhpcy5zcHJpdGVUcmFuc2xhdGUsIHRoaXMuc3ByaXRlUm90YXRlLCB0aGlzLnNwcml0ZVNjYWxlKTtcclxuICAgICAgICBcclxuICAgICAgICB3ZWJHTC5iaW5kQnVmZmVyKHdlYkdMLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhUZXhDb29yZEJ1ZmZlcik7XHJcblxyXG4gICAgICAgIGxldCBhX1Bvc2l0aW9uTG9jYXRpb24gOiBHTHVpbnQgPSB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zW1wiYV9Qb3NpdGlvblwiXTtcclxuICAgICAgICB3ZWJHTC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGFfUG9zaXRpb25Mb2NhdGlvbiwgMiwgd2ViR0wuRkxPQVQsIGZhbHNlLCBDaXJjbGVEZWZhdWx0cy5TVFJJREUsIENpcmNsZURlZmF1bHRzLk9GRlNFVCk7XHJcbiAgICAgICAgd2ViR0wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYV9Qb3NpdGlvbkxvY2F0aW9uKTtcclxuICAgICAgICBsZXQgYV9WYWx1ZVRvSW50ZXJwb2xhdGUgOiBHTHVpbnQgPSB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zW1wiYV9WYWx1ZVRvSW50ZXJwb2xhdGVcIl07XHJcbiAgICAgICAgd2ViR0wudmVydGV4QXR0cmliUG9pbnRlcihhX1ZhbHVlVG9JbnRlcnBvbGF0ZSwgMiwgd2ViR0wuRkxPQVQsIGZhbHNlLCAwLCBDaXJjbGVEZWZhdWx0cy5PRkZTRVQpO1xyXG4gICAgICAgIHdlYkdMLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGFfVmFsdWVUb0ludGVycG9sYXRlKTtcclxuXHJcbiAgICAgICAgbGV0IHVfU3ByaXRlVHJhbnNmb3JtIDogV2ViR0xVbmlmb3JtTG9jYXRpb24gPSB0aGlzLndlYkdMVW5pZm9ybUxvY2F0aW9uc1tcInVfU3ByaXRlVHJhbnNmb3JtXCJdO1xyXG4gICAgICAgIHdlYkdMLnVuaWZvcm1NYXRyaXg0ZnYodV9TcHJpdGVUcmFuc2Zvcm0sIGZhbHNlLCB0aGlzLnNwcml0ZVRyYW5zZm9ybS5nZXREYXRhKCkpO1xyXG4gICAgICAgIGxldCB1X3IgOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zW1widV9yXCJdO1xyXG4gICAgICAgIHdlYkdMLnVuaWZvcm0xZih1X3IsIGNpcmNsZS5nZXRSKCkpO1xyXG4gICAgICAgIGxldCB1X2cgOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zW1widV9nXCJdO1xyXG4gICAgICAgIHdlYkdMLnVuaWZvcm0xZih1X2csIGNpcmNsZS5nZXRHKCkpO1xyXG4gICAgICAgIGxldCB1X2IgOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zW1widV9iXCJdO1xyXG4gICAgICAgIHdlYkdMLnVuaWZvcm0xZih1X2IsIGNpcmNsZS5nZXRCKCkpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gRFJBVyBUSEUgU1BSSVRFIEFTIEEgVFJJQU5HTEUgU1RSSVAgVVNJTkcgNCBWRVJUSUNFUywgU1RBUlRJTkcgQVQgVEhFIFNUQVJUIE9GIFRIRSBBUlJBWSAoaW5kZXggMClcclxuICAgICAgICB3ZWJHTC5kcmF3QXJyYXlzKHdlYkdMLlRSSUFOR0xFX1NUUklQLCBDaXJjbGVEZWZhdWx0cy5JTkRFWF9PRl9GSVJTVF9WRVJURVgsIENpcmNsZURlZmF1bHRzLk5VTV9WRVJUSUNFUyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlckNpcmNsZVNwcml0ZXMod2ViR0wgOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIFxyXG4gICAgICAgIGNhbnZhc1dpZHRoIDogbnVtYmVyLCBcclxuICAgICAgICBjYW52YXNIZWlnaHQgOiBudW1iZXIsIFxyXG4gICAgICAgIHZpc2libGVTZXQgOiBBcnJheTxDaXJjbGVTcHJpdGU+KSA6IHZvaWR7XHJcbiAgICAgICAgICAgIGxldCBzaGFkZXJQcm9ncmFtVG9Vc2UgPSB0aGlzLnNoYWRlci5nZXRQcm9ncmFtKCk7XHJcbiAgICAgICAgICAgIHdlYkdMLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbVRvVXNlKTtcclxuICAgICAgICAgICAgZm9yKGxldCBjaXJjbGUgb2YgdmlzaWJsZVNldCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckNpY2xlKHdlYkdMLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBjaXJjbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG59IiwiLypcbiAqIFRoaXMgY2xhc3MgcmVuZGVycyB0ZXh0IHRvIGEgY2FudmFzLCB1cGRhdGVkIGVhY2ggZnJhbWUuXG4gKi9cbmltcG9ydCB7SGFzaFRhYmxlfSBmcm9tICcuLi9kYXRhL0hhc2hUYWJsZSdcblxuZXhwb3J0IGNsYXNzIFRleHRUb1JlbmRlciB7XG4gICAgcHVibGljIGlkIDogc3RyaW5nO1xuICAgIHB1YmxpYyB0ZXh0IDogc3RyaW5nO1xuICAgIHB1YmxpYyB4IDogbnVtYmVyO1xuICAgIHB1YmxpYyB5IDogbnVtYmVyO1xuICAgIHB1YmxpYyB1cGRhdGUgOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgZm9udEZhbWlseSA6IHN0cmluZztcbiAgICBwdWJsaWMgZm9udFNpemUgOiBudW1iZXI7XG4gICAgcHVibGljIGZvbnRDb2xvciA6IHN0cmluZztcbiAgICBwdWJsaWMgcHJvcGVydGllcyA6IEhhc2hUYWJsZTxvYmplY3Q+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGluaXRJZCA6IHN0cmluZywgaW5pdFRleHQgOiBzdHJpbmcsIGluaXRYIDogbnVtYmVyLCBpbml0WSA6IG51bWJlciwgaW5pdFVwZGF0ZSA6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpbml0SWQ7XG4gICAgICAgIHRoaXMudGV4dCA9IGluaXRUZXh0O1xuICAgICAgICB0aGlzLnggPSBpbml0WDtcbiAgICAgICAgdGhpcy55ID0gaW5pdFk7XG4gICAgICAgIHRoaXMudXBkYXRlID0gaW5pdFVwZGF0ZTtcbiAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gXCJcIjtcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuZm9udENvbG9yID0gXCJcIjtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0ge307XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGV4dFJlbmRlcmVyIHtcbiAgICBwcml2YXRlIHRleHRUb1JlbmRlciA6IEFycmF5PFRleHRUb1JlbmRlcj47XG4gICAgcHJpdmF0ZSB0ZXh0Q2FudmFzIDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0ZXh0Q2FudmFzV2lkdGggOiBudW1iZXI7XG4gICAgcHJpdmF0ZSB0ZXh0Q2FudmFzSGVpZ2h0IDogbnVtYmVyO1xuICAgIHByaXZhdGUgdGV4dEN0eCA6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwcml2YXRlIGRlZmF1bHRGb250RmFtaWx5IDogc3RyaW5nO1xuICAgIHByaXZhdGUgZGVmYXVsdEZvbnRTaXplIDogbnVtYmVyO1xuICAgIHByaXZhdGUgZGVmYXVsdEZvbnRDb2xvciA6IHN0cmluZztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXh0Q2FudmFzSWQgOiBzdHJpbmcsIGluaXRGb250RmFtaWx5IDogc3RyaW5nLCBpbml0Rm9udFNpemUgOiBudW1iZXIsIGluaXRGb250Q29sb3IgOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50ZXh0VG9SZW5kZXIgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy50ZXh0Q2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRleHRDYW52YXNJZCk7XG4gICAgICAgIHRoaXMudGV4dENhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICB0aGlzLnRleHRDYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICB0aGlzLnRleHRDYW52YXNXaWR0aCA9IHRoaXMudGV4dENhbnZhcy53aWR0aDtcbiAgICAgICAgdGhpcy50ZXh0Q2FudmFzSGVpZ2h0ID0gdGhpcy50ZXh0Q2FudmFzLmhlaWdodDtcbiAgICAgICAgdGhpcy50ZXh0Q3R4ID0gdGhpcy50ZXh0Q2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0Rm9udEZhbWlseSA9IGluaXRGb250RmFtaWx5O1xuICAgICAgICB0aGlzLmRlZmF1bHRGb250U2l6ZSA9IGluaXRGb250U2l6ZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0Rm9udENvbG9yID0gaW5pdEZvbnRDb2xvcjtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGFkZFRleHRUb1JlbmRlcih0ZXh0VG9BZGQgOiBUZXh0VG9SZW5kZXIpIDogdm9pZCB7XG4gICAgICAgIHRleHRUb0FkZC5mb250RmFtaWx5ID0gdGhpcy5kZWZhdWx0Rm9udEZhbWlseTtcbiAgICAgICAgdGV4dFRvQWRkLmZvbnRTaXplID0gdGhpcy5kZWZhdWx0Rm9udFNpemU7XG4gICAgICAgIHRleHRUb0FkZC5mb250Q29sb3IgPSB0aGlzLmRlZmF1bHRGb250Q29sb3I7XG4gICAgICAgIHRoaXMudGV4dFRvUmVuZGVyLnB1c2godGV4dFRvQWRkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXIoKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnRleHRUb1JlbmRlciA9IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDYW52YXNXaWR0aCgpIDogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dENhbnZhc1dpZHRoO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDYW52YXNIZWlnaHQoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRDYW52YXNIZWlnaHQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIDogdm9pZCB7XG4gICAgICAgIHRoaXMudGV4dEN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy50ZXh0Q2FudmFzLndpZHRoLCB0aGlzLnRleHRDYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRleHRUb1JlbmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRleHRUb1JlbmRlciA9IHRoaXMudGV4dFRvUmVuZGVyW2ldO1xuICAgICAgICAgICAgdGV4dFRvUmVuZGVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy50ZXh0Q3R4LmZvbnQgPSBcIlwiICsgdGV4dFRvUmVuZGVyLmZvbnRTaXplICsgXCJweCBcIiArIHRleHRUb1JlbmRlci5mb250RmFtaWx5O1xuICAgICAgICAgICAgdGhpcy50ZXh0Q3R4LmZpbGxTdHlsZSA9IHRleHRUb1JlbmRlci5mb250Q29sb3I7XG4gICAgICAgICAgICB0aGlzLnRleHRDdHguZmlsbFRleHQodGV4dFRvUmVuZGVyLnRleHQsIHRleHRUb1JlbmRlci54LCB0ZXh0VG9SZW5kZXIueSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLypcbiAqIFRoaXMgc2VydmVzIGFzIHRoZSBzdWJzeXN0ZW0gdGhhdCBtYW5hZ2VzIGFsbCBnYW1lIHJlbmRlcmluZy5cbiAqL1xuaW1wb3J0IHtUZXh0UmVuZGVyZXJ9IGZyb20gJy4vVGV4dFJlbmRlcmVyJ1xuaW1wb3J0IHtXZWJHTEdhbWVTcHJpdGVSZW5kZXJlcn0gZnJvbSAnLi9XZWJHTEdhbWVTcHJpdGVSZW5kZXJlcidcbmltcG9ydCB7QW5pbWF0ZWRTcHJpdGV9IGZyb20gJy4uL3NjZW5lL3Nwcml0ZS9BbmltYXRlZFNwcml0ZSdcbmltcG9ydCB7V2ViR0xHYW1lVGV4dHVyZSB9IGZyb20gJy4vV2ViR0xHYW1lVGV4dHVyZSc7XG5pbXBvcnQgeyBDaXJjbGVSZW5kZXJlciB9IGZyb20gJy4vQ2lyY2xlUmVuZGVyZXInO1xuaW1wb3J0IHsgQ2lyY2xlU3ByaXRlIH0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0NpcmNsZVNwcml0ZSc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzJztcblxuZXhwb3J0IGNsYXNzIFdlYkdMR2FtZVJlbmRlcmluZ1N5c3RlbSB7XG4gICAgcHJpdmF0ZSByZW5kZXJpbmdDYW52YXMgOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBwcml2YXRlIHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAgIHByaXZhdGUgc3ByaXRlUmVuZGVyZXIgOiBXZWJHTEdhbWVTcHJpdGVSZW5kZXJlcjtcbiAgICBwcml2YXRlIGNpcmNsZVJlbmRlcmVyIDogQ2lyY2xlUmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB0ZXh0UmVuZGVyZXIgOiBUZXh0UmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBjYW52YXNXaWR0aCA6IG51bWJlcjtcbiAgICBwcml2YXRlIGNhbnZhc0hlaWdodCA6IG51bWJlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBwdWJsaWMgZ2V0VGV4dHVyZUNvbnN0YW50KGlkIDogbnVtYmVyKSA6IG51bWJlciB7XG4gICAgICAgIC8vIFdFIE9OTFkgSEFWRSA0IEhFUkUsIFdFIFNIT1VMRCBIQVZFIEEgQkVUVEVSIFdBWSBPRiBET0lORyBUSElTXG4gICAgICAgIHN3aXRjaChpZCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gdGhpcy53ZWJHTC5URVhUVVJFMDtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTE7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiB0aGlzLndlYkdMLlRFWFRVUkUzO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIHRoaXMud2ViR0wuVEVYVFVSRTQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0V2ViR0woKSA6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB7XG4gICAgICAgIHJldHVybiB0aGlzLndlYkdMO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTcHJpdGVSZW5kZXJlcigpIDogV2ViR0xHYW1lU3ByaXRlUmVuZGVyZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGVSZW5kZXJlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGV4dFJlbmRlcmVyKCkgOiBUZXh0UmVuZGVyZXIge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0UmVuZGVyZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQocmVuZGVyaW5nQ2FudmFzSWQgOiBzdHJpbmcsIHRleHRDYW52YXNJZCA6IHN0cmluZykgOiB2b2lkIHtcbiAgICAgICAgLy8gRklSU1QgU0VUVVAgd2ViR0xcbiAgICAgICAgdGhpcy5yZW5kZXJpbmdDYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVuZGVyaW5nQ2FudmFzSWQpO1xuICAgICAgICB0aGlzLnJlbmRlcmluZ0NhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICB0aGlzLnJlbmRlcmluZ0NhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FudmFzV2lkdGggPSB0aGlzLnJlbmRlcmluZ0NhbnZhcy53aWR0aDtcbiAgICAgICAgdGhpcy5jYW52YXNIZWlnaHQgPSB0aGlzLnJlbmRlcmluZ0NhbnZhcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMud2ViR0wgPSB0aGlzLnJlbmRlcmluZ0NhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7XG5cbiAgICAgICAgLy8gSUYgVEhFIFVTRVInUyBNQUNISU5FL0JST1dTRVIgRE9FU04nVCBTVVBQT1JUXG4gICAgICAgIC8vIFdlYkdMIFRIRU4gVEhFUkUnUyBOTyBQT0lOVCBPRiBHT0lORyBPTlxuICAgICAgICBpZiAoIXRoaXMud2ViR0wpIHtcbiAgICAgICAgICAgIC8vIFBST1ZJREUgU09NRSBGRUVEQkFDSyBUSEFUIFdlYkdMIFdPTidUIFdPUksgQkVDQVVTRVxuICAgICAgICAgICAgLy8gVEhFIFVTRVInUycgR1JBUEhJQ1MgQ0FSRCBJUyBGT1IgVEhFIEJJUkRTXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiV2ViR0wgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGRldmljZVwiKTtcblxuICAgICAgICAgICAgLy8gQU5EIEVORCBJTklUSUFMSVpBVElPTlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2ViR0wgSVMgU1VQUE9SVEVELCBTTyBJTklUIEVWRVJZVEhJTkcgVEhBVCBVU0VTIElUXG5cbiAgICAgICAgLy8gTUFLRSBUSEUgQ0xFQVIgQ09MT1IgQkxBQ0tcbiAgICAgICAgdGhpcy5zZXRDbGVhckNvbG9yKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG5cbiAgICAgICAgLy8gRU5BQkxFIERFUFRIIFRFU1RJTkdcbiAgICAgICAgdGhpcy53ZWJHTC5kaXNhYmxlKHRoaXMud2ViR0wuREVQVEhfVEVTVCk7XG4gICAgICAgIHRoaXMud2ViR0wuZW5hYmxlKHRoaXMud2ViR0wuQkxFTkQpO1xuICAgICAgICB0aGlzLndlYkdMLmJsZW5kRnVuYyh0aGlzLndlYkdMLlNSQ19BTFBIQSwgdGhpcy53ZWJHTC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgICAgICAvLyBUVVJOIE9OIEJBQ0tGQUNFIENVTExJTkdcbiAgICAgICAgdGhpcy53ZWJHTC5lbmFibGUodGhpcy53ZWJHTC5DVUxMX0ZBQ0UpO1xuXG4gICAgICAgIC8vIFRISVMgU1BFQ0lGSUVTIFRIQVQgV0UnUkUgVVNJTkcgVEhFIEVOVElSRSBDQU5WQVNcbiAgICAgICAgdGhpcy53ZWJHTC52aWV3cG9ydCgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCk7XG5cbiAgICAgICAgLy8gTk9XIE1BS0UgVEhFIFNIQURFUiBGT1IgRFJBV0lORyBUSElTIFRISU5HXG4gICAgICAgIHRoaXMuc3ByaXRlUmVuZGVyZXIgPSBuZXcgV2ViR0xHYW1lU3ByaXRlUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5zcHJpdGVSZW5kZXJlci5pbml0KHRoaXMud2ViR0wpO1xuICAgICAgICB0aGlzLmNpcmNsZVJlbmRlcmVyID0gbmV3IENpcmNsZVJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuY2lyY2xlUmVuZGVyZXIuaW5pdCh0aGlzLndlYkdMKTtcbiAgICAgICAgLy8gVEhJUyBXSUxMIFNUT1JFIE9VUiBURVhUXG4gICAgICAgIHRoaXMudGV4dFJlbmRlcmVyID0gbmV3IFRleHRSZW5kZXJlcih0ZXh0Q2FudmFzSWQsIFwic2VyaWZcIiwgMTgsIFwiI0ZGRkYwMFwiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdFdlYkdMVGV4dHVyZSh0ZXh0dXJlVG9Jbml0IDogV2ViR0xHYW1lVGV4dHVyZSwgdGV4dHVyZUlkIDogbnVtYmVyLCBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQsIGNhbGxiYWNrIDogRnVuY3Rpb24pIDogdm9pZCB7XG4gICAgICAgIHRleHR1cmVUb0luaXQud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICAgICAgdGV4dHVyZVRvSW5pdC5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cbiAgICAgICAgLy8gQ1JFQVRFIEEgV2ViR0wgVEVYVFVSRSBPTiBUSEUgR1BVXG4gICAgICAgIHRleHR1cmVUb0luaXQud2ViR0xUZXh0dXJlID0gdGhpcy53ZWJHTC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIHRleHR1cmVUb0luaXQud2ViR0xUZXh0dXJlSWQgPSB0ZXh0dXJlSWQ7XG5cbiAgICAgICAgLy8gRkxJUCBUSEUgSU1BR0UnUyB5LUFYSVNcbiAgICAgICAgLy93ZWJHTC5waXhlbFN0b3JlaSh3ZWJHTC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAxKTtcblxuICAgICAgICAvLyBBQ1RJVkFURSBUSEUgV2ViR0wgVEVYVFVSRSBPTiBUSEUgR1BVXG4gICAgICAgIC8vbGV0IHRleHR1cmVOdW1OYW1lIDogc3RyaW5nID0gXCJURVhUVVJFXCIgKyB0ZXh0dXJlSWQ7XG4gICAgICAgIGxldCB0ZXh0dXJlTmFtZUNvbnN0YW50IDogbnVtYmVyID0gdGhpcy5nZXRUZXh0dXJlQ29uc3RhbnQodGV4dHVyZUlkKTtcbiAgICAgICAgdGhpcy53ZWJHTC5hY3RpdmVUZXh0dXJlKHRleHR1cmVOYW1lQ29uc3RhbnQpO1xuXG4gICAgICAgIC8vIEJJTkQgVEhFIFRFWFRVUkUgVE8gQSAyRCBUWVBFXG4gICAgICAgIHRoaXMud2ViR0wuYmluZFRleHR1cmUodGhpcy53ZWJHTC5URVhUVVJFXzJELCB0ZXh0dXJlVG9Jbml0LndlYkdMVGV4dHVyZSk7XG5cbiAgICAgICAgLy8gU1BFQ0lGWSBSRU5ERVJJTkcgU0VUVElOR1NcbiAgICAgICAgdGhpcy53ZWJHTC50ZXhQYXJhbWV0ZXJpKHRoaXMud2ViR0wuVEVYVFVSRV8yRCwgdGhpcy53ZWJHTC5URVhUVVJFX01JTl9GSUxURVIsIHRoaXMud2ViR0wuTElORUFSKTtcblxuICAgICAgICAvLyBTRVQgVEhFIElNQUdFIEZPUiBUSEUgVEVYVFVSRVxuICAgICAgICB0aGlzLndlYkdMLnRleEltYWdlMkQodGhpcy53ZWJHTC5URVhUVVJFXzJELCAwLCB0aGlzLndlYkdMLlJHQkEsIHRoaXMud2ViR0wuUkdCQSwgdGhpcy53ZWJHTC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7XG5cbiAgICAgICAgLy8gS0VFUCBJVCBGT1IgV0hFTiBXRSBSRU5ERVJcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0Q2xlYXJDb2xvcihyIDogbnVtYmVyLCBnIDogbnVtYmVyLCBiIDogbnVtYmVyLCBhIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLndlYkdMLmNsZWFyQ29sb3IociwgZywgYiwgYSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcih2aXNpYmxlU2V0IDogQXJyYXk8QW5pbWF0ZWRTcHJpdGU+LCB2aXNpYmxlQ2lyY2xlcyA6IEFycmF5PENpcmNsZVNwcml0ZT4pIDogdm9pZCB7XG4gICAgICAgIC8vIENMRUFSIFRIRSBDQU5WQVNcbiAgICAgICAgdGhpcy53ZWJHTC5jbGVhcih0aGlzLndlYkdMLkNPTE9SX0JVRkZFUl9CSVQgfCB0aGlzLndlYkdMLkRFUFRIX0JVRkZFUl9CSVQpO1xuICAgICAgICBcbiAgICAgICAgLy8gUkVOREVSIFRIRSBTUFJJVEVTIE9OIE9ORSBDQU5WQVNcbiAgICAgICAgdGhpcy5zcHJpdGVSZW5kZXJlci5yZW5kZXJBbmltYXRlZFNwcml0ZXModGhpcy53ZWJHTCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQsIHZpc2libGVTZXQpO1xuICAgICAgICB0aGlzLmNpcmNsZVJlbmRlcmVyLnJlbmRlckNpcmNsZVNwcml0ZXModGhpcy53ZWJHTCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQsIHZpc2libGVDaXJjbGVzKTtcbiAgICAgICAgLy8gVEhFTiBUSEUgVEVYVCBPTiBBTk9USEVSIE9WRVJMQVBQSU5HIENBTlZBU1xuICAgICAgICB0aGlzLnRleHRSZW5kZXJlci5yZW5kZXIoKTtcbiAgICB9XG59IiwiLypcbiAqIFRoaXMgaXMgYSB3cmFwcGVyIGNsYXNzIGZvciBhIFdlYkdMUHJvZ3JhbSwgaS5lLiBhIHNoYWRlciBmb3IgY3VzdG9tIHJlbmRlcmluZ1xuICogdXNpbmcgV2ViR0wncyBwcm9ncmFtbWFibGUgcGlwZWxpbmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJHTEdhbWVTaGFkZXIge1xuICAgIHByaXZhdGUgcHJvZ3JhbSA6IFdlYkdMUHJvZ3JhbTtcbiAgICBwcml2YXRlIHZlcnRleFNoYWRlciA6IFdlYkdMU2hhZGVyO1xuICAgIHByaXZhdGUgZnJhZ21lbnRTaGFkZXIgOiBXZWJHTFNoYWRlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBwdWJsaWMgZ2V0UHJvZ3JhbSgpIDogV2ViR0xQcm9ncmFtIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ3JhbTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdCh3ZWJHTCA6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdlNvdXJjZSA6IHN0cmluZywgZlNvdXJjZSA6IHN0cmluZykgOiB2b2lkIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSA8V2ViR0xTaGFkZXI+dGhpcy5jcmVhdGVTaGFkZXIod2ViR0wsIHdlYkdMLlZFUlRFWF9TSEFERVIsIHZTb3VyY2UpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gPFdlYkdMU2hhZGVyPnRoaXMuY3JlYXRlU2hhZGVyKHdlYkdMLCB3ZWJHTC5GUkFHTUVOVF9TSEFERVIsIGZTb3VyY2UpO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSB0aGlzLmNyZWF0ZVNoYWRlclByb2dyYW0od2ViR0wsIHRoaXMudmVydGV4U2hhZGVyLCB0aGlzLmZyYWdtZW50U2hhZGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlU2hhZGVyKHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0eXBlIDogbnVtYmVyLCBzb3VyY2UgOiBzdHJpbmcpIDogV2ViR0xTaGFkZXIge1xuICAgICAgICAvLyBNQUtFIEEgTkVXIFNIQURFUiBPQkpFQ1QsIExPQUQgSVQnUyBTT1VSQ0UsIEFORCBDT01QSUxFIElUXG4gICAgICAgIHZhciBzaGFkZXIgPSB3ZWJHTC5jcmVhdGVTaGFkZXIodHlwZSk7XG4gICAgICAgIHdlYkdMLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgICAgIHdlYkdMLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgICAgICAvLyBESUQgSVQgQ09NUElMRT9cbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSB3ZWJHTC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCB3ZWJHTC5DT01QSUxFX1NUQVRVUyk7XG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hhZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRElTQVNURVJcbiAgICAgICAgY29uc29sZS5sb2cod2ViR0wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcbiAgICAgICAgd2ViR0wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVTaGFkZXJQcm9ncmFtKHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2U2hhZGVyIDogV2ViR0xTaGFkZXIsIGZTaGFkZXIgOiBXZWJHTFNoYWRlcikgOiBXZWJHTFByb2dyYW0ge1xuICAgICAgICAvLyBNQUtFIFRIRSBHTFNMIFNIQURFUiBQUk9HUkFNXG4gICAgICAgIGxldCBwcm9ncmFtVG9DcmVhdGUgPSB3ZWJHTC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICAgICAgLy8gTElOSyBUSEUgVkVSVCBBTkQgRlJBR1xuICAgICAgICB3ZWJHTC5hdHRhY2hTaGFkZXIocHJvZ3JhbVRvQ3JlYXRlLCB2U2hhZGVyKTtcbiAgICAgICAgd2ViR0wuYXR0YWNoU2hhZGVyKHByb2dyYW1Ub0NyZWF0ZSwgZlNoYWRlcik7XG5cbiAgICAgICAgLy8gTk9XIFdFIENBTiBMSU5LIFRIRSBTSEFERVIgUFJPR1JBTVxuICAgICAgICB3ZWJHTC5saW5rUHJvZ3JhbShwcm9ncmFtVG9DcmVhdGUpO1xuICAgICAgICBsZXQgbGlua2VkIDogYm9vbGVhbiA9IHdlYkdMLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbVRvQ3JlYXRlLCB3ZWJHTC5MSU5LX1NUQVRVUyk7XG5cbiAgICAgICAgLy8gSVMgSVQgTElOS0VEP1xuICAgICAgICBpZiAoIWxpbmtlZCkge1xuICAgICAgICAgICAgLy8gRElTQVNURVJcbiAgICAgICAgICAgIGxldCBlcnJvckZlZWRiYWNrIDogc3RyaW5nID0gd2ViR0wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbVRvQ3JlYXRlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yRmVlZGJhY2spO1xuXG4gICAgICAgICAgICAvLyBESVNBU1RFUlxuICAgICAgICAgICAgY29uc29sZS5sb2cod2ViR0wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbVRvQ3JlYXRlKSk7XG4gICAgICAgICAgICB3ZWJHTC5kZWxldGVQcm9ncmFtKHByb2dyYW1Ub0NyZWF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb2dyYW1Ub0NyZWF0ZTtcbiAgICB9XG59IiwiaW1wb3J0IHtXZWJHTEdhbWVTaGFkZXJ9IGZyb20gJy4vV2ViR0xHYW1lU2hhZGVyJ1xuaW1wb3J0IHtNYXRoVXRpbGl0aWVzfSBmcm9tICcuLi9tYXRoL01hdGhVdGlsaXRpZXMnXG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9tYXRoL01hdHJpeCdcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMnXG5pbXBvcnQge0FuaW1hdGVkU3ByaXRlfSBmcm9tICcuLi9zY2VuZS9zcHJpdGUvQW5pbWF0ZWRTcHJpdGUnXG5pbXBvcnQge0FuaW1hdGVkU3ByaXRlVHlwZX0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZSdcbmltcG9ydCB7V2ViR0xHYW1lVGV4dHVyZX0gZnJvbSAnLi9XZWJHTEdhbWVUZXh0dXJlJ1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4uL2RhdGEvSGFzaFRhYmxlJ1xuXG52YXIgU3ByaXRlRGVmYXVsdHMgPSB7XG4gICAgQV9QT1NJVElPTjogXCJhX1Bvc2l0aW9uXCIsXG4gICAgQV9URVhfQ09PUkQ6IFwiYV9UZXhDb29yZFwiLFxuICAgIFVfU1BSSVRFX1RSQU5TRk9STTogXCJ1X1Nwcml0ZVRyYW5zZm9ybVwiLFxuICAgIFVfVEVYX0NPT1JEX0ZBQ1RPUjogXCJ1X1RleENvb3JkRmFjdG9yXCIsXG4gICAgVV9URVhfQ09PUkRfU0hJRlQ6IFwidV9UZXhDb29yZFNoaWZ0XCIsXG4gICAgVV9TQU1QTEVSOiBcInVfU2FtcGxlclwiLFxuICAgIE5VTV9WRVJUSUNFUzogNCxcbiAgICBGTE9BVFNfUEVSX1ZFUlRFWDogMixcbiAgICBGTE9BVFNfUEVSX1RFWFRVUkVfQ09PUkRJTkFURTogMixcbiAgICBUT1RBTF9CWVRFUzogMTYsXG4gICAgVkVSVEVYX1BPU0lUSU9OX09GRlNFVDogMCxcbiAgICBURVhUVVJFX0NPT1JESU5BVEVfT0ZGU0VUOiA4LFxuICAgIElOREVYX09GX0ZJUlNUX1ZFUlRFWDogMFxufTtcblxuZXhwb3J0IGNsYXNzIFdlYkdMR2FtZVNwcml0ZVJlbmRlcmVyIHtcbiAgICBwcml2YXRlIHNoYWRlciA6IFdlYkdMR2FtZVNoYWRlcjtcbiAgICBwcml2YXRlIHZlcnRleFRleENvb3JkQnVmZmVyIDogV2ViR0xCdWZmZXI7XG5cbiAgICAvLyBXRSdMTCBVU0UgVEhFU0UgRk9SIFRSQU5TT0ZNUklORyBPQkpFQ1RTIFdIRU4gV0UgRFJBVyBUSEVNXG4gICAgcHJpdmF0ZSBzcHJpdGVUcmFuc2Zvcm0gOiBNYXRyaXg7XG4gICAgcHJpdmF0ZSBzcHJpdGVUcmFuc2xhdGUgOiBWZWN0b3IzO1xuICAgIHByaXZhdGUgc3ByaXRlUm90YXRlIDogVmVjdG9yMztcbiAgICBwcml2YXRlIHNwcml0ZVNjYWxlIDogVmVjdG9yMzsgICAgXG5cbiAgICBwcml2YXRlIHdlYkdMQXR0cmlidXRlTG9jYXRpb25zIDogSGFzaFRhYmxlPEdMdWludD47XG4gICAgcHJpdmF0ZSB3ZWJHTFVuaWZvcm1Mb2NhdGlvbnMgOiBIYXNoVGFibGU8V2ViR0xVbmlmb3JtTG9jYXRpb24+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cbiAgICBcbiAgICBwdWJsaWMgaW5pdCh3ZWJHTCA6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zaGFkZXIgPSBuZXcgV2ViR0xHYW1lU2hhZGVyKCk7XG4gICAgICAgIHZhciB2ZXJ0ZXhTaGFkZXJTb3VyY2UgPVxuICAgICAgICAgICAgJ3VuaWZvcm0gbWF0NCAnICsgU3ByaXRlRGVmYXVsdHMuVV9TUFJJVEVfVFJBTlNGT1JNICsgJztcXG4nICtcbiAgICAgICAgICAgICd1bmlmb3JtIHZlYzIgJyArIFNwcml0ZURlZmF1bHRzLlVfVEVYX0NPT1JEX0ZBQ1RPUiArICc7XFxuJyArXG4gICAgICAgICAgICAndW5pZm9ybSB2ZWMyICcgKyBTcHJpdGVEZWZhdWx0cy5VX1RFWF9DT09SRF9TSElGVCArICc7XFxuJyArXG4gICAgICAgICAgICAnYXR0cmlidXRlIHZlYzQgJyArIFNwcml0ZURlZmF1bHRzLkFfUE9TSVRJT04gKyAnO1xcbicgK1xuICAgICAgICAgICAgJ2F0dHJpYnV0ZSB2ZWMyICcgKyBTcHJpdGVEZWZhdWx0cy5BX1RFWF9DT09SRCArICc7XFxuJyArXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMyIHZfVGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICAgJyAgZ2xfUG9zaXRpb24gPSAnICsgU3ByaXRlRGVmYXVsdHMuVV9TUFJJVEVfVFJBTlNGT1JNICsgJyAqICcgKyBTcHJpdGVEZWZhdWx0cy5BX1BPU0lUSU9OICsgJztcXG4nICtcbiAgICAgICAgICAgICcgIHZlYzIgdGVtcFRleENvb3JkID0gJyArIFNwcml0ZURlZmF1bHRzLkFfVEVYX0NPT1JEICsgJyAqICcgKyBTcHJpdGVEZWZhdWx0cy5VX1RFWF9DT09SRF9GQUNUT1IgKyAnO1xcbicgK1xuICAgICAgICAgICAgJyAgdl9UZXhDb29yZCA9IHRlbXBUZXhDb29yZCArICcgKyBTcHJpdGVEZWZhdWx0cy5VX1RFWF9DT09SRF9TSElGVCArICc7XFxuJyArXG4gICAgICAgICAgICAnfVxcbic7XG4gICAgICAgIHZhciBmcmFnbWVudFNoYWRlclNvdXJjZSA9XG4gICAgICAgICAgICAnI2lmZGVmIEdMX0VTXFxuJyArXG4gICAgICAgICAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuJyArXG4gICAgICAgICAgICAnI2VuZGlmXFxuJyArXG4gICAgICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgJyArIFNwcml0ZURlZmF1bHRzLlVfU0FNUExFUiArICc7XFxuJyArXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMyIHZfVGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICAgJyAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCcgKyBTcHJpdGVEZWZhdWx0cy5VX1NBTVBMRVIgKyAnLCB2X1RleENvb3JkKTtcXG4nICtcbiAgICAgICAgICAgICd9XFxuJztcbiAgICAgICAgdGhpcy5zaGFkZXIuaW5pdCh3ZWJHTCwgdmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSk7XG5cbiAgICAgICAgLy8gR0VUIFRIRSB3ZWJHTCBPQkpFQ1QgVE8gVVNFXG4gICAgICAgIHZhciB2ZXJ0aWNlc1RleENvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgLTAuNSwgIDAuNSwgMC4wLCAwLjAsXG4gICAgICAgICAgICAtMC41LCAtMC41LCAwLjAsIDEuMCxcbiAgICAgICAgICAgICAwLjUsICAwLjUsIDEuMCwgMC4wLFxuICAgICAgICAgICAgIDAuNSwgLTAuNSwgMS4wLCAxLjBcbiAgICAgICAgXSk7XG5cbiAgICAgICAgLy8gQ1JFQVRFIFRIRSBCVUZGRVIgT04gVEhFIEdQVVxuICAgICAgICB0aGlzLnZlcnRleFRleENvb3JkQnVmZmVyID0gd2ViR0wuY3JlYXRlQnVmZmVyKCk7XG5cbiAgICAgICAgLy8gQklORCBUSEUgQlVGRkVSIFRPIEJFIFZFUlRFWCBEQVRBXG4gICAgICAgIHdlYkdMLmJpbmRCdWZmZXIod2ViR0wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleFRleENvb3JkQnVmZmVyKTtcblxuICAgICAgICAvLyBBTkQgU0VORCBUSEUgREFUQSBUTyBUSEUgQlVGRkVSIFdFIENSRUFURUQgT04gVEhFIEdQVVxuICAgICAgICB3ZWJHTC5idWZmZXJEYXRhKHdlYkdMLkFSUkFZX0JVRkZFUiwgdmVydGljZXNUZXhDb29yZHMsIHdlYkdMLlNUQVRJQ19EUkFXKTtcblxuICAgICAgICAvLyBTRVRVUCBUSEUgU0hBREVSIEFUVFJJQlVURVMgQU5EIFVOSUZPUk1TXG4gICAgICAgIHRoaXMud2ViR0xBdHRyaWJ1dGVMb2NhdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy53ZWJHTFVuaWZvcm1Mb2NhdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5sb2FkQXR0cmlidXRlTG9jYXRpb25zKHdlYkdMLCBbU3ByaXRlRGVmYXVsdHMuQV9QT1NJVElPTiwgU3ByaXRlRGVmYXVsdHMuQV9URVhfQ09PUkRdKTtcbiAgICAgICAgdGhpcy5sb2FkVW5pZm9ybUxvY2F0aW9ucyh3ZWJHTCwgW1Nwcml0ZURlZmF1bHRzLlVfU1BSSVRFX1RSQU5TRk9STSwgU3ByaXRlRGVmYXVsdHMuVV9TQU1QTEVSLCBTcHJpdGVEZWZhdWx0cy5VX1RFWF9DT09SRF9GQUNUT1IsIFNwcml0ZURlZmF1bHRzLlVfVEVYX0NPT1JEX1NISUZUXSk7XG5cbiAgICAgICAgLy8gV0UnTEwgVVNFIFRIRVNFIEZPUiBUUkFOU09GTVJJTkcgT0JKRUNUUyBXSEVOIFdFIERSQVcgVEhFTVxuICAgICAgICB0aGlzLnNwcml0ZVRyYW5zZm9ybSA9IG5ldyBNYXRyaXgoNCwgNCk7XG4gICAgICAgIHRoaXMuc3ByaXRlVHJhbnNsYXRlID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgdGhpcy5zcHJpdGVSb3RhdGUgPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICB0aGlzLnNwcml0ZVNjYWxlID0gbmV3IFZlY3RvcjMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyQW5pbWF0ZWRTcHJpdGVzKCAgd2ViR0wgOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc1dpZHRoIDogbnVtYmVyLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNIZWlnaHQgOiBudW1iZXIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGVTZXQgOiBBcnJheTxBbmltYXRlZFNwcml0ZT4pIDogdm9pZCB7XG4gICAgICAgIC8vIFNFTEVDVCBUSEUgQU5JTUFURUQgU1BSSVRFIFJFTkRFUklORyBTSEFERVIgUFJPR1JBTSBGT1IgVVNFXG4gICAgICAgIGxldCBzaGFkZXJQcm9ncmFtVG9Vc2UgPSB0aGlzLnNoYWRlci5nZXRQcm9ncmFtKCk7XG4gICAgICAgIHdlYkdMLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbVRvVXNlKTtcblxuICAgICAgIC8vIEFORCBUSEVOIFJFTkRFUiBFQUNIIE9ORVxuICAgICAgIGZvciAobGV0IHNwcml0ZSBvZiB2aXNpYmxlU2V0KSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckFuaW1hdGVkU3ByaXRlKHdlYkdMLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBzcHJpdGUpOyAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRBdHRyaWJ1dGVMb2NhdGlvbnMod2ViR0wgOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGF0dHJpYnV0ZUxvY2F0aW9uTmFtZXMgOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlTG9jYXRpb25OYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGxvY2F0aW9uTmFtZSA6IHN0cmluZyA9IGF0dHJpYnV0ZUxvY2F0aW9uTmFtZXNbaV07XG4gICAgICAgICAgICBsZXQgbG9jYXRpb24gOiBHTHVpbnQgPSB3ZWJHTC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnNoYWRlci5nZXRQcm9ncmFtKCksIGxvY2F0aW9uTmFtZSk7XG4gICAgICAgICAgICB0aGlzLndlYkdMQXR0cmlidXRlTG9jYXRpb25zW2xvY2F0aW9uTmFtZV0gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZFVuaWZvcm1Mb2NhdGlvbnMod2ViR0wgOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHVuaWZvcm1Mb2NhdGlvbk5hbWVzIDogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICBmb3IgKGxldCBpIDogbnVtYmVyID0gMDsgaSA8IHVuaWZvcm1Mb2NhdGlvbk5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbG9jYXRpb25OYW1lIDogc3RyaW5nID0gdW5pZm9ybUxvY2F0aW9uTmFtZXNbaV07XG4gICAgICAgICAgICBsZXQgbG9jYXRpb24gOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHdlYkdMLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNoYWRlci5nZXRQcm9ncmFtKCksIGxvY2F0aW9uTmFtZSk7XG4gICAgICAgICAgICB0aGlzLndlYkdMVW5pZm9ybUxvY2F0aW9uc1tsb2NhdGlvbk5hbWVdID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckFuaW1hdGVkU3ByaXRlKCAgIHdlYkdMIDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCA6IG51bWJlciwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzSGVpZ2h0IDogbnVtYmVyLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUgOiBBbmltYXRlZFNwcml0ZSkge1xuICAgICAgICBsZXQgc3ByaXRlVHlwZSA6IEFuaW1hdGVkU3ByaXRlVHlwZSA9IHNwcml0ZS5nZXRTcHJpdGVUeXBlKCk7XG4gICAgICAgIGxldCB0ZXh0dXJlIDogV2ViR0xHYW1lVGV4dHVyZSA9IHNwcml0ZVR5cGUuZ2V0U3ByaXRlU2hlZXRUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8gQ0FMQ1VMQVRFIEhPVyBNVUNIIFRPIFRSQU5TTEFURSBUSEUgUVVBRCBQRVIgVEhFIFNQUklURSBQT1NJVElPTlxuICAgICAgICBsZXQgc3ByaXRlV2lkdGggOiBudW1iZXIgPSBzcHJpdGVUeXBlLmdldFNwcml0ZVdpZHRoKCk7XG4gICAgICAgIGxldCBzcHJpdGVIZWlnaHQgOiBudW1iZXIgPSBzcHJpdGVUeXBlLmdldFNwcml0ZUhlaWdodCgpO1xuICAgICAgICBsZXQgc3ByaXRlWEluUGl4ZWxzIDogbnVtYmVyID0gc3ByaXRlLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgKHNwcml0ZVdpZHRoLzIpO1xuICAgICAgICBsZXQgc3ByaXRlWUluUGl4ZWxzIDogbnVtYmVyID0gc3ByaXRlLmdldFBvc2l0aW9uKCkuZ2V0WSgpICsgKHNwcml0ZUhlaWdodC8yKTtcbiAgICAgICAgbGV0IHNwcml0ZVhUcmFuc2xhdGUgOiBudW1iZXIgPSAoc3ByaXRlWEluUGl4ZWxzIC0gKGNhbnZhc1dpZHRoLzIpKS8oY2FudmFzV2lkdGgvMik7XG4gICAgICAgIGxldCBzcHJpdGVZVHJhbnNsYXRlIDogbnVtYmVyID0gKHNwcml0ZVlJblBpeGVscyAtIChjYW52YXNIZWlnaHQvMikpLyhjYW52YXNIZWlnaHQvMik7XG4gICAgICAgIHRoaXMuc3ByaXRlVHJhbnNsYXRlLnNldFgoc3ByaXRlWFRyYW5zbGF0ZSk7XG4gICAgICAgIHRoaXMuc3ByaXRlVHJhbnNsYXRlLnNldFkoLXNwcml0ZVlUcmFuc2xhdGUpO1xuXG4gICAgICAgIC8vIENBTENVTEFURSBIT1cgTVVDSCBUTyBTQ0FMRSBUSEUgUVVBRCBQRVIgVEhFIFNQUklURSBTSVpFXG4gICAgICAgIGxldCBkZWZhdWx0V2lkdGggOiBudW1iZXIgPSBjYW52YXNXaWR0aC8yO1xuICAgICAgICBsZXQgZGVmYXVsdEhlaWdodCA6IG51bWJlciA9IGNhbnZhc0hlaWdodC8yO1xuICAgICAgICBsZXQgc2NhbGVYIDogbnVtYmVyID0gc3ByaXRlV2lkdGgvZGVmYXVsdFdpZHRoO1xuICAgICAgICBsZXQgc2NhbGVZIDogbnVtYmVyID0gc3ByaXRlSGVpZ2h0L2RlZmF1bHRIZWlnaHQ7XG4gICAgICAgIHRoaXMuc3ByaXRlU2NhbGUuc2V0WChzY2FsZVgpO1xuICAgICAgICB0aGlzLnNwcml0ZVNjYWxlLnNldFkoc2NhbGVZKTtcblxuICAgICAgICAvLyBAdG9kbyAtIENPTUJJTkUgVEhJUyBXSVRIIFRIRSBST1RBVEUgQU5EIFNDQUxFIFZBTFVFUyBGUk9NIFRIRSBTUFJJVEVcbiAgICAgICAgTWF0aFV0aWxpdGllcy5pZGVudGl0eSh0aGlzLnNwcml0ZVRyYW5zZm9ybSk7XG4gICAgICAgIE1hdGhVdGlsaXRpZXMubW9kZWwodGhpcy5zcHJpdGVUcmFuc2Zvcm0sIHRoaXMuc3ByaXRlVHJhbnNsYXRlLCB0aGlzLnNwcml0ZVJvdGF0ZSwgdGhpcy5zcHJpdGVTY2FsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBGSUdVUkUgT1VUIFRIRSBURVhUVVJFIENPT1JESU5BVEUgRkFDVE9SIEFORCBTSElGVFxuICAgICAgICBsZXQgdGV4Q29vcmRGYWN0b3JYIDogbnVtYmVyID0gc3ByaXRlV2lkdGgvdGV4dHVyZS53aWR0aDtcbiAgICAgICAgbGV0IHRleENvb3JkRmFjdG9yWSA6IG51bWJlciA9IHNwcml0ZUhlaWdodC90ZXh0dXJlLmhlaWdodDtcbiAgICAgICAgbGV0IHNwcml0ZUxlZnQgOiBudW1iZXIgPSBzcHJpdGUuZ2V0TGVmdCgpO1xuICAgICAgICBsZXQgc3ByaXRlVG9wIDogbnVtYmVyID0gc3ByaXRlLmdldFRvcCgpO1xuICAgICAgICBsZXQgdGV4Q29vcmRTaGlmdFggOiBudW1iZXIgPSBzcHJpdGVMZWZ0L3RleHR1cmUud2lkdGg7XG4gICAgICAgIGxldCB0ZXhDb29yZFNoaWZ0WSA6IG51bWJlciA9IHNwcml0ZVRvcC90ZXh0dXJlLmhlaWdodDsgICBcblxuICAgICAgICAvLyBVU0UgVEhFIEFUVFJJQlVURVNcbiAgICAgICAgd2ViR0wuYmluZEJ1ZmZlcih3ZWJHTC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4VGV4Q29vcmRCdWZmZXIpO1xuICAgICAgICB3ZWJHTC5iaW5kVGV4dHVyZSh3ZWJHTC5URVhUVVJFXzJELCB0ZXh0dXJlLndlYkdMVGV4dHVyZSk7XG5cbiAgICAgICAgLy8gSE9PSyBVUCBUSEUgQVRUUklCVVRFU1xuICAgICAgICBsZXQgYV9Qb3NpdGlvbkxvY2F0aW9uIDogR0x1aW50ID0gdGhpcy53ZWJHTEF0dHJpYnV0ZUxvY2F0aW9uc1tTcHJpdGVEZWZhdWx0cy5BX1BPU0lUSU9OXTtcbiAgICAgICAgd2ViR0wudmVydGV4QXR0cmliUG9pbnRlcihhX1Bvc2l0aW9uTG9jYXRpb24sIFNwcml0ZURlZmF1bHRzLkZMT0FUU19QRVJfVEVYVFVSRV9DT09SRElOQVRFLCB3ZWJHTC5GTE9BVCwgZmFsc2UsIFNwcml0ZURlZmF1bHRzLlRPVEFMX0JZVEVTLCBTcHJpdGVEZWZhdWx0cy5WRVJURVhfUE9TSVRJT05fT0ZGU0VUKTtcbiAgICAgICAgd2ViR0wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYV9Qb3NpdGlvbkxvY2F0aW9uKTtcbiAgICAgICAgbGV0IGFfVGV4Q29vcmRMb2NhdGlvbiA6IEdMdWludCA9IHRoaXMud2ViR0xBdHRyaWJ1dGVMb2NhdGlvbnNbU3ByaXRlRGVmYXVsdHMuQV9URVhfQ09PUkRdO1xuICAgICAgICB3ZWJHTC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGFfVGV4Q29vcmRMb2NhdGlvbiwgU3ByaXRlRGVmYXVsdHMuRkxPQVRTX1BFUl9URVhUVVJFX0NPT1JESU5BVEUsIHdlYkdMLkZMT0FULCBmYWxzZSwgU3ByaXRlRGVmYXVsdHMuVE9UQUxfQllURVMsIFNwcml0ZURlZmF1bHRzLlRFWFRVUkVfQ09PUkRJTkFURV9PRkZTRVQpO1xuICAgICAgICB3ZWJHTC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX1RleENvb3JkTG9jYXRpb24pO1xuXG4gICAgICAgIC8vIFVTRSBUSEUgVU5JRk9STVNcbiAgICAgICAgbGV0IHVfU3ByaXRlVHJhbnNmb3JtTG9jYXRpb24gOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zW1Nwcml0ZURlZmF1bHRzLlVfU1BSSVRFX1RSQU5TRk9STV07XG4gICAgICAgIHdlYkdMLnVuaWZvcm1NYXRyaXg0ZnYodV9TcHJpdGVUcmFuc2Zvcm1Mb2NhdGlvbiwgZmFsc2UsIHRoaXMuc3ByaXRlVHJhbnNmb3JtLmdldERhdGEoKSk7XG4gICAgICAgIGxldCB1X1NhbXBsZXJMb2NhdGlvbiA6IFdlYkdMVW5pZm9ybUxvY2F0aW9uID0gdGhpcy53ZWJHTFVuaWZvcm1Mb2NhdGlvbnNbU3ByaXRlRGVmYXVsdHMuVV9TQU1QTEVSXTtcbiAgICAgICAgd2ViR0wudW5pZm9ybTFpKHVfU2FtcGxlckxvY2F0aW9uLCB0ZXh0dXJlLndlYkdMVGV4dHVyZUlkKTtcbiAgICAgICAgbGV0IHVfVGV4Q29vcmRGYWN0b3JMb2NhdGlvbiA6IFdlYkdMVW5pZm9ybUxvY2F0aW9uID0gdGhpcy53ZWJHTFVuaWZvcm1Mb2NhdGlvbnNbU3ByaXRlRGVmYXVsdHMuVV9URVhfQ09PUkRfRkFDVE9SXTtcbiAgICAgICAgd2ViR0wudW5pZm9ybTJmKHVfVGV4Q29vcmRGYWN0b3JMb2NhdGlvbiwgdGV4Q29vcmRGYWN0b3JYLCB0ZXhDb29yZEZhY3RvclkpO1xuICAgICAgICBsZXQgdV9UZXhDb29yZFNoaWZ0TG9jYXRpb24gOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMud2ViR0xVbmlmb3JtTG9jYXRpb25zW1Nwcml0ZURlZmF1bHRzLlVfVEVYX0NPT1JEX1NISUZUXTtcbiAgICAgICAgd2ViR0wudW5pZm9ybTJmKHVfVGV4Q29vcmRTaGlmdExvY2F0aW9uLCB0ZXhDb29yZFNoaWZ0WCwgdGV4Q29vcmRTaGlmdFkpO1xuXG4gICAgICAgIC8vIERSQVcgVEhFIFNQUklURSBBUyBBIFRSSUFOR0xFIFNUUklQIFVTSU5HIDQgVkVSVElDRVMsIFNUQVJUSU5HIEFUIFRIRSBTVEFSVCBPRiBUSEUgQVJSQVkgKGluZGV4IDApXG4gICAgICAgIHdlYkdMLmRyYXdBcnJheXMod2ViR0wuVFJJQU5HTEVfU1RSSVAsIFNwcml0ZURlZmF1bHRzLklOREVYX09GX0ZJUlNUX1ZFUlRFWCwgU3ByaXRlRGVmYXVsdHMuTlVNX1ZFUlRJQ0VTKTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFdlYkdMR2FtZVRleHR1cmUge1xuICAgIHB1YmxpYyB3ZWJHTFRleHR1cmVJZDogbnVtYmVyO1xuICAgIHB1YmxpYyB3ZWJHTFRleHR1cmU6IFdlYkdMVGV4dHVyZTtcbiAgICBwdWJsaWMgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgcHVibGljIHdpZHRoIDogbnVtYmVyO1xuICAgIHB1YmxpYyBoZWlnaHQgOiBudW1iZXI7XG59IiwiaW1wb3J0IHtTY2VuZU9iamVjdH0gZnJvbSAnLi9TY2VuZU9iamVjdCdcbmltcG9ydCB7QW5pbWF0ZWRTcHJpdGV9IGZyb20gJy4vc3ByaXRlL0FuaW1hdGVkU3ByaXRlJ1xuaW1wb3J0IHsgQ2lyY2xlU3ByaXRlIH0gZnJvbSAnLi9zcHJpdGUvQ2lyY2xlU3ByaXRlJztcblxuZXhwb3J0IGNsYXNzIFNjZW5lR3JhcGgge1xuICAgIC8vIEFORCBBTEwgT0YgVEhFIEFOSU1BVEVEIFNQUklURVMsIFdISUNIIEFSRSBOT1QgU1RPUkVEXG4gICAgLy8gU09SVEVEIE9SIElOIEFOWSBQQVJUSUNVTEFSIE9SREVSLiBOT1RFIFRIQVQgQU5JTUFURUQgU1BSSVRFU1xuICAgIC8vIEFSRSBTQ0VORSBPQkpFQ1RTXG4gICAgcHJpdmF0ZSBhbmltYXRlZFNwcml0ZXMgOiBBcnJheTxBbmltYXRlZFNwcml0ZT47XG4gICAgcHJpdmF0ZSBjaXJjbGVTcHJpdGVzIDogQXJyYXk8Q2lyY2xlU3ByaXRlPjtcblxuICAgIC8vIFNFVCBPRiBWSVNJQkxFIE9CSkVDVFMsIE5PVEUgVEhBVCBBVCBUSEUgTU9NRU5UIE9VUlxuICAgIC8vIFNDRU5FIEdSQVBIIElTIFFVSVRFIFNJTVBMRSwgU08gVEhJUyBJUyBUSEUgU0FNRSBBU1xuICAgIC8vIE9VUiBMSVNUIE9GIEFOSU1BVEVEIFNQUklURVNcbiAgICBwcml2YXRlIHZpc2libGVTZXQgOiBBcnJheTxTY2VuZU9iamVjdD47XG4gICAgcHJpdmF0ZSBzcHJpdGVIb3ZlciA6IFNjZW5lT2JqZWN0O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBERUZBVUxUIENPTlNUUlVDVE9SIElOSVRJQUxJWkVTIE9VUiBEQVRBIFNUUlVDVFVSRVNcbiAgICAgICAgdGhpcy5hbmltYXRlZFNwcml0ZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5jaXJjbGVTcHJpdGVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMudmlzaWJsZVNldCA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnNwcml0ZUhvdmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TnVtU3ByaXRlcygpIDogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZWRTcHJpdGVzLmxlbmd0aCArIHRoaXMuY2lyY2xlU3ByaXRlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEFuaW1hdGVkU3ByaXRlKHNwcml0ZSA6IEFuaW1hdGVkU3ByaXRlKSA6IHZvaWQge1xuICAgICAgICB0aGlzLmFuaW1hdGVkU3ByaXRlcy5wdXNoKHNwcml0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZENpcmNsZVNwcml0ZShjaXJjbGUgOiBDaXJjbGVTcHJpdGUpIDogdm9pZHtcbiAgICAgICAgdGhpcy5jaXJjbGVTcHJpdGVzLnB1c2goY2lyY2xlKTtcbiAgICB9XG4gICAgcHVibGljIGdldFNwcml0ZUF0KHRlc3RYIDogbnVtYmVyLCB0ZXN0WSA6IG51bWJlcikgOiBBbmltYXRlZFNwcml0ZSB7XG4gICAgICAgIGZvciAobGV0IHNwcml0ZSBvZiB0aGlzLmFuaW1hdGVkU3ByaXRlcykge1xuICAgICAgICAgICAgaWYgKHNwcml0ZS5jb250YWlucyh0ZXN0WCwgdGVzdFkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzcHJpdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRDaXJjbGVBdCh0ZXN0WCA6IG51bWJlciwgdGVzdFkgOiBudW1iZXIpIDogQ2lyY2xlU3ByaXRlIHtcbiAgICAgICAgZm9yIChsZXQgY2lyY2xlIG9mIHRoaXMuY2lyY2xlU3ByaXRlcyl7XG4gICAgICAgICAgICBpZihjaXJjbGUuY29udGFpbnModGVzdFgsdGVzdFkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB1cGRhdGVcbiAgICAgKiBcbiAgICAgKiBDYWxsZWQgb25jZSBwZXIgZnJhbWUsIHRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgc3RhdGUgb2YgYWxsIHRoZSBvYmplY3RzXG4gICAgICogaW4gdGhlIHNjZW5lLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBkZWx0YSBUaGUgdGltZSB0aGF0IGhhcyBwYXNzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGlzIHVwZGF0ZVxuICAgICAqIGZ1bmNhdGlvbiB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGUoZGVsdGEgOiBudW1iZXIpIDogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IHNwcml0ZSBvZiB0aGlzLmFuaW1hdGVkU3ByaXRlcykge1xuICAgICAgICAgICAgc3ByaXRlLnVwZGF0ZShkZWx0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2NvcGUoKSA6IEFycmF5PFNjZW5lT2JqZWN0PiB7XG4gICAgICAgIC8vIENMRUFSIE9VVCBUSEUgT0xEXG4gICAgICAgIHRoaXMudmlzaWJsZVNldCA9IFtdO1xuXG4gICAgICAgIC8vIFBVVCBBTEwgVEhFIFNDRU5FIE9CSkVDVFMgSU5UTyBUSEUgVklTSUJMRSBTRVRcbiAgICAgICAgZm9yIChsZXQgc3ByaXRlIG9mIHRoaXMuYW5pbWF0ZWRTcHJpdGVzKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2libGVTZXQucHVzaChzcHJpdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZVNldDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2lyY2xlU2NvcGUoKSA6IEFycmF5PFNjZW5lT2JqZWN0PiB7XG4gICAgICAgIHRoaXMudmlzaWJsZVNldCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjaXJjbGUgb2YgdGhpcy5jaXJjbGVTcHJpdGVzKXtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZVNldC5wdXNoKGNpcmNsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZVNldDtcbiAgICB9XG4gICAgcHVibGljIHJlbW92ZShzcHJpdGUgOiBBbmltYXRlZFNwcml0ZSkgOiB2b2lke1xuICAgICAgICBsZXQgaW5kZXggOiBudW1iZXIgPSB0aGlzLmFuaW1hdGVkU3ByaXRlcy5pbmRleE9mKHNwcml0ZSk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZWRTcHJpdGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHB1YmxpYyByZW1vdmVDaXJjbGUoY2lyY2xlIDogQ2lyY2xlU3ByaXRlKSA6IHZvaWR7XG4gICAgICAgIGxldCBpbmRleCA6IG51bWJlciA9IHRoaXMuY2lyY2xlU3ByaXRlcy5pbmRleE9mKGNpcmNsZSk7XG4gICAgICAgIHRoaXMuY2lyY2xlU3ByaXRlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0U3ByaXRlSG92ZXIoc3ByaXRlSG92ZXIgOiBTY2VuZU9iamVjdCkgOiB2b2lke1xuICAgICAgICB0aGlzLnNwcml0ZUhvdmVyID0gc3ByaXRlSG92ZXI7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRTcHJpdGVIb3ZlcigpIDogU2NlbmVPYmplY3R7XG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZUhvdmVyO1xuICAgIH1cbn0iLCJpbXBvcnQge1ZlY3RvcjN9IGZyb20gJy4uL21hdGgvVmVjdG9yMydcblxuLyoqXG4gKiBTY2VuZU9iamVjdFxuICogXG4gKiBBIFNjZW5lT2JqZWN0IGlzIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBwbGFjZWQgaW50byB0aGUgc2NlbmUgZ3JhcGguIEl0IGhhc1xuICogYSBwb3NpdGlvbiwgcm90YXRpb24sIGFuZCBzY2FsZSBpbiB0aGUgZ2FtZSB3b3JsZC4gTm90ZSB0aGF0IGl0cyBwb3NpdGlvblxuICogaXMgdHlwaWNhbGx5IGl0cyBjZW50ZXJlZCBsb2NhdGlvbiwgc28gaWYgd2UncmUgdGFsa2luZyBhYm91dCBhIDJkIGJveCwgXG4gKiBpdCB3b3VsZCBiZSB0aGUgY2VudGVyIG9mIHRoYXQgYm94LlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2NlbmVPYmplY3Qge1xuICAgIHByaXZhdGUgcG9zaXRpb24gOiBWZWN0b3IzO1xuICAgIHByaXZhdGUgcm90YXRpb24gOiBWZWN0b3IzO1xuICAgIHByaXZhdGUgc2NhbGUgOiBWZWN0b3IzO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgICAgIC8vIENMRUFSIEFMTCBWQUxVRVNcbiAgICAgICAgdGhpcy5wb3NpdGlvbi5zZXQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbi5zZXQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgdGhpcy5zY2FsZS5zZXQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UG9zaXRpb24oKSA6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgICB9ICAgIFxuXG4gICAgcHVibGljIGdldFJvdGF0aW9uKCkgOiBWZWN0b3IzIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm90YXRpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNjYWxlKCkgOiBWZWN0b3IzIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGU7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGNvbnRhaW5zKHRlc3RYIDogbnVtYmVyLCB0ZXN0WSA6IG51bWJlcikgOiBib29sZWFuO1xufSIsImltcG9ydCB7U2NlbmVPYmplY3R9IGZyb20gJy4uL1NjZW5lT2JqZWN0J1xuaW1wb3J0IHtBbmltYXRlZFNwcml0ZVR5cGV9IGZyb20gJy4vQW5pbWF0ZWRTcHJpdGVUeXBlJ1xuXG5leHBvcnQgY2xhc3MgQW5pbWF0ZWRTcHJpdGUgZXh0ZW5kcyBTY2VuZU9iamVjdCB7XG4gICAgcHJpdmF0ZSBzcHJpdGVUeXBlIDogQW5pbWF0ZWRTcHJpdGVUeXBlO1xuICAgIHByaXZhdGUgc3RhdGUgOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBhbmltYXRpb25GcmFtZUluZGV4IDogbnVtYmVyO1xuICAgIHByaXZhdGUgZnJhbWVDb3VudGVyIDogbnVtYmVyO1xuICAgIFxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihpbml0U3ByaXRlVHlwZSA6IEFuaW1hdGVkU3ByaXRlVHlwZSwgaW5pdFN0YXRlIDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3ByaXRlVHlwZSA9IGluaXRTcHJpdGVUeXBlO1xuICAgICAgICBcbiAgICAgICAgLy8gU1RBUlQgUkVTRVRcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGluaXRTdGF0ZTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25GcmFtZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50ZXIgPSAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbmltYXRpb25GcmFtZUluZGV4KCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25GcmFtZUluZGV4O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGcmFtZUNvdW50ZXIoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyYW1lQ291bnRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3ByaXRlVHlwZSgpIDogQW5pbWF0ZWRTcHJpdGVUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlVHlwZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RhdGUoKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0U3RhdGUoaW5pdFN0YXRlIDogc3RyaW5nKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnN0YXRlID0gaW5pdFN0YXRlO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmZyYW1lQ291bnRlciA9IDA7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyB1cGRhdGUoZGVsdGEgOiBudW1iZXIpIDogdm9pZCB7XG4gICAgICAgIHRoaXMuZnJhbWVDb3VudGVyKys7XG4gICAgICAgIFxuICAgICAgICAvLyBIQVZFIFdFIEdPTkUgUEFTVCBUSEUgTEFTVCBGUkFNRSBJTiBUSEUgQU5JTUFUSU9OP1xuICAgICAgICB2YXIgY3VycmVudEFuaW1hdGlvbiA9IHRoaXMuc3ByaXRlVHlwZS5nZXRBbmltYXRpb24odGhpcy5zdGF0ZSk7XG4gICAgICAgIHZhciBjdXJyZW50RnJhbWUgPSBjdXJyZW50QW5pbWF0aW9uW3RoaXMuYW5pbWF0aW9uRnJhbWVJbmRleF07XG4gICAgICAgIGlmICh0aGlzLmZyYW1lQ291bnRlciA+IChjdXJyZW50RnJhbWUuZHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXgrKztcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXggPj0gY3VycmVudEFuaW1hdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mcmFtZUNvdW50ZXIgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnRhaW5zKHBvaW50WCA6IG51bWJlciwgcG9pbnRZIDogbnVtYmVyKSA6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgc3ByaXRlV2lkdGggPSB0aGlzLmdldFNwcml0ZVR5cGUoKS5nZXRTcHJpdGVXaWR0aCgpO1xuICAgICAgICBsZXQgc3ByaXRlSGVpZ2h0ID0gdGhpcy5nZXRTcHJpdGVUeXBlKCkuZ2V0U3ByaXRlSGVpZ2h0KCk7XG4gICAgICAgIGxldCBzcHJpdGVMZWZ0ID0gdGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKTtcbiAgICAgICAgbGV0IHNwcml0ZVJpZ2h0ID0gdGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKSArIHNwcml0ZVdpZHRoO1xuICAgICAgICBsZXQgc3ByaXRlVG9wID0gdGhpcy5nZXRQb3NpdGlvbigpLmdldFkoKTtcbiAgICAgICAgbGV0IHNwcml0ZUJvdHRvbSA9IHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyBzcHJpdGVIZWlnaHQ7XG4gICAgICAgIGlmICggICAgKHBvaW50WCA8IHNwcml0ZUxlZnQpXG4gICAgICAgICAgICB8fCAgKHNwcml0ZVJpZ2h0IDwgcG9pbnRYKVxuICAgICAgICAgICAgfHwgIChwb2ludFkgPCBzcHJpdGVUb3ApXG4gICAgICAgICAgICB8fCAgKHNwcml0ZUJvdHRvbSA8IHBvaW50WSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipSRU5BTUUgVEhJUyBNRVRIT0QgU08gSVQgREVOT1RFUyBQSVhFTCBMT0NBVElPTiBJTiBURVhUVVJFICovXG4gICAgcHVibGljIGdldExlZnQoKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZVR5cGUuZ2V0TGVmdCh0aGlzLnN0YXRlLCB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXgpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0VG9wKCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGVUeXBlLmdldFRvcCh0aGlzLnN0YXRlLCB0aGlzLmFuaW1hdGlvbkZyYW1lSW5kZXgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1N0cmluZygpIDogc3RyaW5nIHtcbiAgICAgICAgbGV0IHN1bW1hcnkgOiBzdHJpbmcgPSAgXCJ7IHBvc2l0aW9uOiAoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgdGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKSArIFwiLCBcIiArIHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyBcIikgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgXCIoc3RhdGU6IFwiICsgdGhpcy5nZXRTdGF0ZSgpICsgXCIpIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgIFwiKGFuaW1hdGlvbkZyYW1lSW5kZXg6IFwiICsgdGhpcy5nZXRBbmltYXRpb25GcmFtZUluZGV4KCkgKyBcIikgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgXCIoZnJhbWVDb3VudGVyOiBcIiArIHRoaXMuZ2V0RnJhbWVDb3VudGVyKCkgKyBcIikgXCI7XG4gICAgICAgIHJldHVybiBzdW1tYXJ5O1xuICAgIH1cbn0iLCJpbXBvcnQge1dlYkdMR2FtZVRleHR1cmV9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9XZWJHTEdhbWVUZXh0dXJlJ1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4uLy4uL2RhdGEvSGFzaFRhYmxlJ1xuXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uRnJhbWUge1xuICAgIHB1YmxpYyBsZWZ0IDogbnVtYmVyO1xuICAgIHB1YmxpYyB0b3AgOiBudW1iZXI7XG4gICAgcHVibGljIGR1cmF0aW9uIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoaW5pdExlZnQgOiBudW1iZXIsIGluaXRUb3AgOiBudW1iZXIsIGluaXREdXJhdGlvbiA6IG51bWJlcikge1xuICAgICAgICB0aGlzLmxlZnQgPSBpbml0TGVmdDtcbiAgICAgICAgdGhpcy50b3AgPSBpbml0VG9wO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gaW5pdER1cmF0aW9uO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFuaW1hdGVkU3ByaXRlVHlwZSB7XG4gICAgcHJpdmF0ZSBzcHJpdGVTaGVldFRleHR1cmUgOiBXZWJHTEdhbWVUZXh0dXJlO1xuICAgIHByaXZhdGUgYW5pbWF0aW9ucyA6IEhhc2hUYWJsZTxBcnJheTxBbmltYXRpb25GcmFtZT4+O1xuICAgIHByaXZhdGUgc3ByaXRlV2lkdGggOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzcHJpdGVIZWlnaHQgOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5pdFNwcml0ZVNoZWV0VGV4dHVyZSA6IFdlYkdMR2FtZVRleHR1cmUsIFxuICAgICAgICAgICAgICAgIGluaXRTcHJpdGVXaWR0aCA6IG51bWJlciwgaW5pdFNwcml0ZUhlaWdodCA6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNwcml0ZVNoZWV0VGV4dHVyZSA9IGluaXRTcHJpdGVTaGVldFRleHR1cmU7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnNwcml0ZVdpZHRoID0gaW5pdFNwcml0ZVdpZHRoO1xuICAgICAgICB0aGlzLnNwcml0ZUhlaWdodCA9IGluaXRTcHJpdGVIZWlnaHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEFuaW1hdGlvbihzdGF0ZSA6IHN0cmluZykgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW3N0YXRlXSA9IG5ldyBBcnJheTxBbmltYXRpb25GcmFtZT4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQW5pbWF0aW9uRnJhbWUoc3RhdGUgOiBzdHJpbmcsIGluZGV4IDogbnVtYmVyLCBmcmFtZUR1cmF0aW9uIDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB2YXIgY29sdW1ucyA9IHRoaXMuc3ByaXRlU2hlZXRUZXh0dXJlLndpZHRoL3RoaXMuc3ByaXRlV2lkdGg7XG4gICAgICAgIHZhciByb3dzID0gdGhpcy5zcHJpdGVTaGVldFRleHR1cmUuaGVpZ2h0L3RoaXMuc3ByaXRlSGVpZ2h0O1xuICAgICAgICB2YXIgY29sID0gaW5kZXggJSBjb2x1bW5zO1xuICAgICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihpbmRleCAvICBjb2x1bW5zKTtcbiAgICAgICAgdmFyIGxlZnQgPSBjb2wgKiB0aGlzLnNwcml0ZVdpZHRoO1xuICAgICAgICB2YXIgdG9wID0gcm93ICogdGhpcy5zcHJpdGVIZWlnaHQ7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1tzdGF0ZV0ucHVzaChuZXcgQW5pbWF0aW9uRnJhbWUobGVmdCwgdG9wLCBmcmFtZUR1cmF0aW9uKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNwcml0ZVdpZHRoKCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGVXaWR0aDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3ByaXRlSGVpZ2h0KCkgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGVIZWlnaHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNwcml0ZVNoZWV0VGV4dHVyZSgpIDogV2ViR0xHYW1lVGV4dHVyZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZVNoZWV0VGV4dHVyZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QW5pbWF0aW9uKHN0YXRlIDogc3RyaW5nKSA6IEFycmF5PEFuaW1hdGlvbkZyYW1lPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbnNbc3RhdGVdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMZWZ0KHN0YXRlIDogc3RyaW5nLCBmcmFtZUluZGV4IDogbnVtYmVyKSA6IG51bWJlciB7XG4gICAgICAgIGxldCBhbmltYXRpb25GcmFtZSA6IEFuaW1hdGlvbkZyYW1lID0gdGhpcy5hbmltYXRpb25zW3N0YXRlXVtmcmFtZUluZGV4XTtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkZyYW1lLmxlZnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRvcChzdGF0ZSA6IHN0cmluZywgZnJhbWVJbmRleCA6IG51bWJlcikgOiBudW1iZXIge1xuICAgICAgICBsZXQgYW5pbWF0aW9uRnJhbWUgOiBBbmltYXRpb25GcmFtZSA9IHRoaXMuYW5pbWF0aW9uc1tzdGF0ZV1bZnJhbWVJbmRleF07XG4gICAgICAgIHJldHVybiBhbmltYXRpb25GcmFtZS50b3A7XG4gICAgfVxufSIsImltcG9ydCB7U2NlbmVPYmplY3R9IGZyb20gJy4uL1NjZW5lT2JqZWN0J1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzJztcclxuaW1wb3J0IHsgdGV4dENoYW5nZVJhbmdlSXNVbmNoYW5nZWQgfSBmcm9tICd0eXBlc2NyaXB0JztcclxuZXhwb3J0IGNsYXNzIENpcmNsZVNwcml0ZSBleHRlbmRzIFNjZW5lT2JqZWN0IHtcclxuICAgIHByaXZhdGUgY29sb3JzIDogQXJyYXk8QXJyYXk8bnVtYmVyPj47XHJcbiAgICBwcml2YXRlIHdpZHRoIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBoZWlnaHQgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJfdmFsdWUgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGdfdmFsdWUgOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGJfdmFsdWUgOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuY29sb3JzID0gW1syNTUuMCwwLjAsMC4wXSxcclxuICAgICAgICAgICAgICAgICAgICBbMC4wLCAyNTUuMCwgMC4wXSxcclxuICAgICAgICAgICAgICAgICAgICBbMC4wLCAwLjAsIDI1NS4wXSxcclxuICAgICAgICAgICAgICAgICAgICBbMjU1LjAsMjU1LjAsMC4wXSxcclxuICAgICAgICAgICAgICAgICAgICBbMC4wLCAyNTUuMCwgMjU1LjBdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsyNTUuMCwgMC4wLCAyNTUuMF1dO1xyXG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo2KTtcclxuICAgICAgICB0aGlzLndpZHRoID0gMjU2O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMjU2O1xyXG4gICAgICAgIHRoaXMucl92YWx1ZSA9IHRoaXMuY29sb3JzW2luZGV4XVswXTtcclxuICAgICAgICB0aGlzLmdfdmFsdWUgPSB0aGlzLmNvbG9yc1tpbmRleF1bMV07XHJcbiAgICAgICAgdGhpcy5iX3ZhbHVlID0gdGhpcy5jb2xvcnNbaW5kZXhdWzJdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNvbnRhaW5zKHBvaW50WCA6IG51bWJlciwgcG9pbnRZIDogbnVtYmVyKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBzcHJpdGVXaWR0aCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgbGV0IHNwcml0ZUhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIGxldCBzcHJpdGVMZWZ0ID0gdGhpcy5nZXRQb3NpdGlvbigpLmdldFgoKTtcclxuICAgICAgICBsZXQgc3ByaXRlUmlnaHQgPSB0aGlzLmdldFBvc2l0aW9uKCkuZ2V0WCgpICsgc3ByaXRlV2lkdGg7XHJcbiAgICAgICAgbGV0IHNwcml0ZVRvcCA9IHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCk7XHJcbiAgICAgICAgbGV0IHNwcml0ZUJvdHRvbSA9IHRoaXMuZ2V0UG9zaXRpb24oKS5nZXRZKCkgKyBzcHJpdGVIZWlnaHQ7XHJcbiAgICAgICAgaWYgKCAgICAocG9pbnRYIDwgc3ByaXRlTGVmdClcclxuICAgICAgICAgICAgfHwgIChzcHJpdGVSaWdodCA8IHBvaW50WClcclxuICAgICAgICAgICAgfHwgIChwb2ludFkgPCBzcHJpdGVUb3ApXHJcbiAgICAgICAgICAgIHx8ICAoc3ByaXRlQm90dG9tIDwgcG9pbnRZKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldENvbG9ycygpIDogQXJyYXk8QXJyYXk8bnVtYmVyPj57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFdpZHRoKCkgOiBudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGg7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0SGVpZ2h0KCkgOiBudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFIoKSA6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5yX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldEcoKSA6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5nX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldEIoKSA6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5iX3ZhbHVlO1xyXG4gICAgfVxyXG59IiwiLypcbiAqIFRoaXMgcHJvdmlkZXMgcmVzcG9uc2VzIHRvIFVJIGlucHV0LlxuICovXG5pbXBvcnQge0FuaW1hdGVkU3ByaXRlfSBmcm9tIFwiLi4vc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlXCJcbmltcG9ydCB7U2NlbmVHcmFwaH0gZnJvbSBcIi4uL3NjZW5lL1NjZW5lR3JhcGhcIlxuaW1wb3J0IHsgQ2lyY2xlU3ByaXRlIH0gZnJvbSBcIi4uL3NjZW5lL3Nwcml0ZS9DaXJjbGVTcHJpdGVcIlxuaW1wb3J0IHsgUmVzb3VyY2VNYW5hZ2VyIH0gZnJvbSBcIi4uL2ZpbGVzL1Jlc291cmNlTWFuYWdlclwiXG5pbXBvcnQge0FuaW1hdGVkU3ByaXRlVHlwZX0gZnJvbSAnLi4vc2NlbmUvc3ByaXRlL0FuaW1hdGVkU3ByaXRlVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBVSUNvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgc3ByaXRlVG9EcmFnIDogQW5pbWF0ZWRTcHJpdGU7XG4gICAgcHJpdmF0ZSBjaXJjbGVUb0RyYWcgOiBDaXJjbGVTcHJpdGU7XG4gICAgcHJpdmF0ZSBzY2VuZSA6IFNjZW5lR3JhcGg7XG4gICAgcHJpdmF0ZSBkcmFnT2Zmc2V0WCA6IG51bWJlcjtcbiAgICBwcml2YXRlIGRyYWdPZmZzZXRZIDogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVzb3VyY2VNYW5hZ2VyIDogUmVzb3VyY2VNYW5hZ2VyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cblxuICAgIHB1YmxpYyBpbml0KGNhbnZhc0lkIDogc3RyaW5nLCBpbml0U2NlbmUgOiBTY2VuZUdyYXBoLCByZXNvdXJjZU1hbmFnZXIgOiBSZXNvdXJjZU1hbmFnZXIpIDogdm9pZCB7XG4gICAgICAgIHRoaXMuc3ByaXRlVG9EcmFnID0gbnVsbDtcbiAgICAgICAgdGhpcy5zY2VuZSA9IGluaXRTY2VuZTtcbiAgICAgICAgdGhpcy5kcmFnT2Zmc2V0WCA9IC0xO1xuICAgICAgICB0aGlzLmRyYWdPZmZzZXRZID0gLTE7XG4gICAgICAgIHRoaXMucmVzb3VyY2VNYW5hZ2VyID0gcmVzb3VyY2VNYW5hZ2VyO1xuXG4gICAgICAgIGxldCBjYW52YXMgOiBIVE1MQ2FudmFzRWxlbWVudCA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNJZCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2VEb3duSGFuZGxlcik7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW91c2VNb3ZlSGFuZGxlcik7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm1vdXNlVXBIYW5kbGVyKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCB0aGlzLm1vdXNlRG91YmxlQ2xpY2tIYW5kbGVyKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5ob3ZlckluZm8pO1xuICAgIH1cblxuICAgIHB1YmxpYyBtb3VzZURvd25IYW5kbGVyID0gKGV2ZW50IDogTW91c2VFdmVudCkgOiB2b2lkID0+IHtcbiAgICAgICAgbGV0IG1vdXNlUHJlc3NYIDogbnVtYmVyID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgbGV0IG1vdXNlUHJlc3NZIDogbnVtYmVyID0gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgbGV0IHNwcml0ZSA6IEFuaW1hdGVkU3ByaXRlID0gdGhpcy5zY2VuZS5nZXRTcHJpdGVBdChtb3VzZVByZXNzWCwgbW91c2VQcmVzc1kpO1xuICAgICAgICBsZXQgY2lyY2xlIDogQ2lyY2xlU3ByaXRlID0gdGhpcy5zY2VuZS5nZXRDaXJjbGVBdChtb3VzZVByZXNzWCwgbW91c2VQcmVzc1kpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm1vdXNlUHJlc3NYOiBcIiArIG1vdXNlUHJlc3NYKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJtb3VzZVByZXNzWTogXCIgKyBtb3VzZVByZXNzWSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic3ByaXRlOiBcIiArIHNwcml0ZSk7XG4gICAgICAgIGlmIChzcHJpdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gU1RBUlQgRFJBR0dJTkcgSVRcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlVG9EcmFnID0gc3ByaXRlO1xuICAgICAgICAgICAgdGhpcy5kcmFnT2Zmc2V0WCA9IHNwcml0ZS5nZXRQb3NpdGlvbigpLmdldFgoKSAtIG1vdXNlUHJlc3NYO1xuICAgICAgICAgICAgdGhpcy5kcmFnT2Zmc2V0WSA9IHNwcml0ZS5nZXRQb3NpdGlvbigpLmdldFkoKSAtIG1vdXNlUHJlc3NZO1xuICAgICAgICB9ZWxzZSBpZihjaXJjbGUgIT0gbnVsbCl7XG4gICAgICAgICAgICB0aGlzLmNpcmNsZVRvRHJhZyA9IGNpcmNsZTtcbiAgICAgICAgICAgIHRoaXMuZHJhZ09mZnNldFggPSBjaXJjbGUuZ2V0UG9zaXRpb24oKS5nZXRYKCkgLSBtb3VzZVByZXNzWDtcbiAgICAgICAgICAgIHRoaXMuZHJhZ09mZnNldFkgPSBjaXJjbGUuZ2V0UG9zaXRpb24oKS5nZXRZKCkgLSBtb3VzZVByZXNzWTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZXQgaSA6IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSozKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGkpO1xuICAgICAgICAgICAgaWYgKGkgPT09IDIpe1xuICAgICAgICAgICAgICAgIGxldCBjaXJjbGUgOiBDaXJjbGVTcHJpdGUgPSBuZXcgQ2lyY2xlU3ByaXRlKCk7XG4gICAgICAgICAgICAgICAgY2lyY2xlLmdldFBvc2l0aW9uKCkuc2V0KGV2ZW50LmNsaWVudFggLSAoMjU2IC8gMiksIGV2ZW50LmNsaWVudFkgLSAoMjU2IC8gMiksIDAuMCwgMS4wKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmFkZENpcmNsZVNwcml0ZShjaXJjbGUpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgY29uc3QgREVNT19TUFJJVEVfVFlQRVMgOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ3Jlc291cmNlcy9hbmltYXRlZF9zcHJpdGVzL1JlZENpcmNsZU1hbi5qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgJ3Jlc291cmNlcy9hbmltYXRlZF9zcHJpdGVzL011bHRpQ29sb3JCbG9jay5qc29uJ1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgY29uc3QgREVNT19TUFJJVEVfU1RBVEVTID0ge1xuICAgICAgICAgICAgICAgICAgICBGT1JXQVJEX1NUQVRFOiAnRk9SV0FSRCcsXG4gICAgICAgICAgICAgICAgICAgIFJFVkVSU0VfU1RBVEU6ICdSRVZFUlNFJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGV0IHNwcml0ZVR5cGVUb1VzZSA6IHN0cmluZyA9IERFTU9fU1BSSVRFX1RZUEVTW2ldO1xuICAgICAgICAgICAgICAgIGxldCBhbmltYXRlZFNwcml0ZVR5cGUgOiBBbmltYXRlZFNwcml0ZVR5cGUgPSB0aGlzLnJlc291cmNlTWFuYWdlci5nZXRBbmltYXRlZFNwcml0ZVR5cGVCeUlkKHNwcml0ZVR5cGVUb1VzZSk7XG4gICAgICAgICAgICAgICAgbGV0IHNwcml0ZVRvQWRkIDogQW5pbWF0ZWRTcHJpdGUgPSBuZXcgQW5pbWF0ZWRTcHJpdGUoYW5pbWF0ZWRTcHJpdGVUeXBlLCBERU1PX1NQUklURV9TVEFURVMuRk9SV0FSRF9TVEFURSk7XG4gICAgICAgICAgICAgICAgc3ByaXRlVG9BZGQuZ2V0UG9zaXRpb24oKS5zZXQoZXZlbnQuY2xpZW50WCAtICgyNTYgLyAyKSwgZXZlbnQuY2xpZW50WSAtICgyNTYgLyAyKSwgMC4wLCAxLjApO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkQW5pbWF0ZWRTcHJpdGUoc3ByaXRlVG9BZGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBtb3VzZU1vdmVIYW5kbGVyID0gKGV2ZW50IDogTW91c2VFdmVudCkgOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3ByaXRlVG9EcmFnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlVG9EcmFnLmdldFBvc2l0aW9uKCkuc2V0KGV2ZW50LmNsaWVudFggKyB0aGlzLmRyYWdPZmZzZXRYLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNsaWVudFkgKyB0aGlzLmRyYWdPZmZzZXRZLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlVG9EcmFnLmdldFBvc2l0aW9uKCkuZ2V0WigpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlVG9EcmFnLmdldFBvc2l0aW9uKCkuZ2V0VygpKTtcbiAgICAgICAgfWVsc2UgaWYodGhpcy5jaXJjbGVUb0RyYWcgIT0gbnVsbCl7XG4gICAgICAgICAgICB0aGlzLmNpcmNsZVRvRHJhZy5nZXRQb3NpdGlvbigpLnNldChldmVudC5jbGllbnRYICsgdGhpcy5kcmFnT2Zmc2V0WCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jbGllbnRZICsgdGhpcy5kcmFnT2Zmc2V0WSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNpcmNsZVRvRHJhZy5nZXRQb3NpdGlvbigpLmdldFooKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNpcmNsZVRvRHJhZy5nZXRQb3NpdGlvbigpLmdldFcoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VVcEhhbmRsZXIgPSAoZXZlbnQgOiBNb3VzZUV2ZW50KSA6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnNwcml0ZVRvRHJhZyA9IG51bGw7XG4gICAgICAgIHRoaXMuY2lyY2xlVG9EcmFnID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VEb3VibGVDbGlja0hhbmRsZXIgPSAoZXZlbnQgOiBNb3VzZUV2ZW50KSA6IHZvaWQgPT4ge1xuICAgICAgICBsZXQgbW91c2VQcmVzc1ggOiBudW1iZXIgPSBldmVudC5jbGllbnRYO1xuICAgICAgICBsZXQgbW91c2VQcmVzc1kgOiBudW1iZXIgPSBldmVudC5jbGllbnRZO1xuICAgICAgICBsZXQgc3ByaXRlIDogQW5pbWF0ZWRTcHJpdGUgPSB0aGlzLnNjZW5lLmdldFNwcml0ZUF0KG1vdXNlUHJlc3NYLCBtb3VzZVByZXNzWSk7XG4gICAgICAgIGxldCBjaXJjbGUgOiBDaXJjbGVTcHJpdGUgPSB0aGlzLnNjZW5lLmdldENpcmNsZUF0KG1vdXNlUHJlc3NYLCBtb3VzZVByZXNzWSk7XG4gICAgICAgIGlmKHNwcml0ZSAhPSBudWxsKXtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKHNwcml0ZSk7XG4gICAgICAgIH1lbHNlIGlmKGNpcmNsZSAhPSBudWxsKXtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2lyY2xlKGNpcmNsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaG92ZXJJbmZvID0gKGV2ZW50IDogTW91c2VFdmVudCkgOiB2b2lkID0+IHtcbiAgICAgICAgbGV0IG1vdXNlUHJlc3NYIDogbnVtYmVyID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgbGV0IG1vdXNlUHJlc3NZIDogbnVtYmVyID0gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgbGV0IHNwcml0ZSA6IEFuaW1hdGVkU3ByaXRlID0gdGhpcy5zY2VuZS5nZXRTcHJpdGVBdChtb3VzZVByZXNzWCwgbW91c2VQcmVzc1kpO1xuICAgICAgICBsZXQgY2lyY2xlIDogQ2lyY2xlU3ByaXRlID0gdGhpcy5zY2VuZS5nZXRDaXJjbGVBdChtb3VzZVByZXNzWCwgbW91c2VQcmVzc1kpO1xuICAgICAgICBpZihzcHJpdGUgIT0gbnVsbCl7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnNldFNwcml0ZUhvdmVyKHNwcml0ZSk7XG4gICAgICAgIH1lbHNlIGlmKGNpcmNsZSAhPSBudWxsKXtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuc2V0U3ByaXRlSG92ZXIoY2lyY2xlKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnNldFNwcml0ZUhvdmVyKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ=="}